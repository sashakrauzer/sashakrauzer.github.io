{"version":3,"sources":["assets/images/elements.svg","servicesAndCharacteristics.js","actions/index.js","utils/index.js","components/Loader/index.jsx","components/GoogleOauth/index.jsx","components/FacebookOauth/index.jsx","components/Login/index.jsx","components/WebBluetooth/index.jsx","components/Account/Devices.jsx","components/Account/Recipes.jsx","components/Account/index.js","App.jsx","reducers/index.js","reducers/auth.js","reducers/data.js","reducers/bluetooth.js","reducers/settings.js","store.js","index.jsx"],"names":["module","exports","dataTransferService","name","uuid","description","characteristics","properties","axios","defaults","baseURL","showAppPreloader","createAction","fetchTokenRequest","fetchTokenSuccess","fetchTokenFailure","convertToken","data","dispatch","post","grant_type","client_id","backend","token","then","response","state","duration","cookies","Cookies","expiresDate","Date","setSeconds","getSeconds","set","JSON","stringify","path","expires","writeStateToCookie","expires_in","catch","fetchRecipesRequest","fetchRecipesSuccess","fetchRecipesFailure","recipe","get","fetchUserSuccess","fetchUserFailure","user","getState","access_token","auth","cookie","headers","Authorization","e","status","navigate","fetchUserDevicesSuccess","fetchUserDevicesFailure","saveDeviceRequest","saveDeviceSuccess","saveDeviceFailure","removeDeviceSuccess","removeDeviceFailure","connectToDeviceRequest","connectToDeviceSuccess","connectToDeviceFailure","connectGattRequest","connectGattSuccess","connectGattFailure","connectToDevice","newFilters","filters","navigator","bluetooth","requestDevice","acceptAllDevices","undefined","optionalServices","device","console","log","devices","userDevices","newDevices","_","uniqBy","uid","id","length","put","saveDevice","gatt","connect","server","fetchBatteryServiceRequest","fetchBatteryServiceSuccess","fetchBatteryServiceFailure","fetchDeviceInfoRequest","fetchDeviceInfoSuccess","fetchDeviceInfoFailure","fetchDeviceInfoCharacteristicSuccess","getBinaryRecipeRequest","getBinaryRecipeSuccess","getBinaryRecipeFailure","recipeByteTransfered","keyI","characteristicWrite","writeRecipeToDevice","recipeBinary","service","handleResponseControlMsg","event","target","value","getUint8","getCharacteristic","characteristic","startNotifications","addEventListener","handleLevelChanged","sendingData","a","sum","buffer","byteLength","writeValue","slice","getPrimaryService","ser","ArrayBuffer","DataView","setInt8","setInt32","setInt16","getInt8","Int8Array","error","alert","Loader","className","Component","actionCreators","actions","GoogleOauth","responseGoogleRequest","responseGoogleSuccess","props","accessToken","responseGoogleFailure","clientId","buttonText","onSuccess","this","onFailure","onRequest","cookiePolicy","FacebookOauth","email","userID","responseFacebook","setState","appId","autoLoad","fields","callback","Login","isLogged","src","logo","alt","batteryServiceAction","handleBatteryLevelChange","level","readValue","Error","deviceInfoServiceAction","manufacturerName","WebBluetooth","bluetoothDevice","batteryLevelCharacteristic","gattServer","transferService","services","onDisconnected","serviceConnect","CtrlRxCharacteristicUuid","sendDataToDevice","result","i","CtrlTxCharacteristicUuid","StatusCharacteristicUuid","batteryLevel","prevProps","batteryService","binary_recipe","removeDevice","filter","Devices","deviceFromStore","showDrawer","byteTransfered","map","span","key","title","CheckCircleTwoTone","twoToneColor","type","extra","style","color","shape","icon","CloseCircleOutlined","onClick","width","Number","isInteger","percent","Math","floor","PlusCircleOutlined","gutter","getBinaryRecipe","recipeId","Recipes","onClose","recipes","cover","image","description_text","buttonVisible","Account","current","handleClick","first_name","last_name","selectedKeys","mode","Item","AntDesignOutlined","ReadOutlined","placement","closable","visible","App","authCookie","showPreloader","basepath","from","to","noThrow","default","subTitle","settings","handleActions","payload","base64","binary_string","window","atob","len","bytes","Uint8Array","charCodeAt","base64ToArrayBuffer","deviceInfoService","stack","preloaderStack","push","shift","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","thunk","configureStore","reducer","reducers","devTools","process","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.cbe5e850.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/elements.b15f934a.svg\";","export default [\n    {\n        name: 'Device Information Service',\n        uuid: 0x180a,\n        description: 'Exposes manufacturer and/or information about a device',\n        characteristics: [\n            {\n                name: 'Manufacturer Name String',\n                uuid: 0x2a29,\n                description: 'Represent the name of the manufacturer of device',\n                properties: ['read'],\n            },\n        ],\n    },\n    {\n        name: 'Battery Service',\n        uuid: 0x180f,\n        description:\n            'Exposes the Battery Level of a single battery or set of batteries in a device',\n        characteristics: [\n            {\n                name: 'Battery Level',\n                uuid: 0x2a19,\n                description: 'Represent level of the battery in a device',\n                properties: ['read', 'notify'],\n            },\n        ],\n    },\n    {\n        name: 'Data Transfer Service',\n        uuid: '5cf052d0-2403-4719-a558-b7e72c48112f',\n        description: 'Provide data receive and transmitting of a data',\n        characteristics: [\n            {\n                name: 'Data Receive',\n                uuid: '5cf052d1-2403-4719-a558-b7e72c48112f',\n                description: 'Receive data channel',\n                properties: ['write'],\n            },\n            {\n                name: 'Data Transmit',\n                uuid: '5cf052d2-2403-4719-a558-b7e72c48112f',\n                description: 'Transmit data channel',\n                properties: ['read', 'notify'],\n            },\n            {\n                name: 'Control Receive',\n                uuid: '5cf052d3-2403-4719-a558-b7e72c48112f',\n                description: 'Control data receive channel',\n                properties: ['write'],\n            },\n            {\n                name: 'Control Transmit',\n                uuid: '5cf052d4-2403-4719-a558-b7e72c48112f',\n                description: 'Control data transmit channel',\n                properties: ['read', 'notify'],\n            },\n            {\n                name: 'Status',\n                uuid: '5cf052d5-2403-4719-a558-b7e72c48112f',\n                description: 'Expose status of transfer data',\n                properties: ['write', 'read', 'notify'],\n            },\n        ],\n    },\n];\n\nexport const deviceInformationService = {\n    name: 'Device Information Service',\n    uuid: 0x180a,\n    description: 'Exposes manufacturer and/or information about a device',\n    characteristics: [\n        {\n            name: 'Manufacturer Name String',\n            uuid: 0x2a29,\n            description: 'Represent the name of the manufacturer of device',\n            properties: ['read'],\n        },\n    ],\n};\n\nexport const batteryService = {\n    name: 'Battery Service',\n    uuid: 0x180f,\n    description:\n        'Exposes the Battery Level of a single battery or set of batteries in a device',\n    characteristics: [\n        {\n            name: 'Battery Level',\n            uuid: 0x2a19,\n            description: 'Represent level of the battery in a device',\n            properties: ['read', 'notify'],\n        },\n    ],\n};\n\nexport const dataTransferService = {\n    name: 'Data Transfer Service',\n    uuid: '5cf052d0-2403-4719-a558-b7e72c48112f',\n    description: 'Provide data receive and transmitting of a data',\n    characteristics: [\n        {\n            name: 'Data Receive',\n            uuid: '5cf052d1-2403-4719-a558-b7e72c48112f',\n            description: 'Receive data channel',\n            properties: ['write'],\n        },\n        {\n            name: 'Data Transmit',\n            uuid: '5cf052d2-2403-4719-a558-b7e72c48112f',\n            description: 'Transmit data channel',\n            properties: ['read', 'notify'],\n        },\n        {\n            name: 'Control Receive',\n            uuid: '5cf052d3-2403-4719-a558-b7e72c48112f',\n            description: 'Control data receive channel',\n            properties: ['write'],\n        },\n        {\n            name: 'Control Transmit',\n            uuid: '5cf052d4-2403-4719-a558-b7e72c48112f',\n            description: 'Control data transmit channel',\n            properties: ['read', 'notify'],\n        },\n        {\n            name: 'Status',\n            uuid: '5cf052d5-2403-4719-a558-b7e72c48112f',\n            description: 'Expose status of transfer data',\n            properties: ['write', 'read', 'notify'],\n        },\n    ],\n};\n","import { createAction } from 'redux-actions';\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\nimport _ from 'lodash';\nimport { writeStateToCookie } from '../utils/index';\nimport { dataTransferService } from '../servicesAndCharacteristics';\n\naxios.defaults.baseURL = 'https://portal.pipe.today/api';\n\n///////////////////////\n/////// other ////////\n/////////////////////\n\nexport const showAppPreloader = createAction('SHOW_APP_PRELOADER');\n\n///////////////////////\n//// auth actions ////\n/////////////////////\n\nexport const fetchTokenRequest = createAction('FETCH_TOKEN_REQUEST');\nexport const fetchTokenSuccess = createAction('FETCH_TOKEN_SUCCESS');\nexport const fetchTokenFailure = createAction('FETCH_TOKEN_FAILURE');\n\nexport const convertToken = (data) => {\n    return (dispatch) => {\n        dispatch(fetchTokenRequest());\n\n        axios\n            .post('oauth/convert-token/', {\n                grant_type: 'convert_token',\n                client_id: 'qxN1hlSy0GbXqE6au6Hd63N4YOWK6WCP2TuXWzaO',\n                backend: 'google-oauth2',\n                token: data,\n            })\n            .then((response) => {\n                writeStateToCookie(\n                    response.data,\n                    'auth_cookie',\n                    response.data.expires_in\n                );\n                dispatch(fetchTokenSuccess(response.data));\n            })\n            .catch(() => {\n                dispatch(fetchTokenFailure());\n            });\n    };\n};\n\n///////////////////////\n////// recipes ///////\n/////////////////////\n\nexport const fetchRecipesRequest = createAction('FETCH_RECIPES_REQUEST');\nexport const fetchRecipesSuccess = createAction('FETCH_RECIPES_SUCCESS');\nexport const fetchRecipesFailure = createAction('FETCH_RECIPES_FAILURE');\n\nexport const recipe = () => {\n    return (dispatch) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .get('recipe/')\n            .then((response) => {\n                dispatch(fetchRecipesSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(fetchRecipesFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\n///////////////////////\n//////// user ////////\n/////////////////////\n\nexport const fetchUserRequest = createAction('FETCH_USER_REQUEST');\nexport const fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nexport const fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const user = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n        axios\n            .get('user/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(fetchUserSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch((e) => {\n                dispatch(fetchUserFailure());\n                dispatch(showAppPreloader(false));\n\n                switch (e.response.status) {\n                    case 403:\n                        navigate('/');\n                        break;\n                    default:\n                        break;\n                }\n            });\n    };\n};\n\nexport const fetchUserDevicesRequest = createAction(\n    'FETCH_USER_DEVICES_REQUEST'\n);\nexport const fetchUserDevicesSuccess = createAction(\n    'FETCH_USER_DEVICES_SUCCESS'\n);\nexport const fetchUserDevicesFailure = createAction(\n    'FETCH_USER_DEVICES_FAILURE'\n);\n\nexport const userDevices = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        axios\n            .get('user/devices/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(fetchUserDevicesSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(fetchUserDevicesFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const saveDeviceRequest = createAction('SAVE_DEVICE_REQUEST');\nexport const saveDeviceSuccess = createAction('SAVE_DEVICE_SUCCESS');\nexport const saveDeviceFailure = createAction('SAVE_DEVICE_FAILURE');\n\nexport const saveDevice = (device) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n            data: {\n                userDevices: { devices },\n            },\n        } = getState();\n\n        const newDevices = _.uniqBy(\n            [...devices, { name: device.name, uid: device.id }],\n            'uid'\n        );\n\n        if (newDevices.length === devices.length) {\n            return false;\n        }\n\n        dispatch(saveDeviceRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .put(\n                'user/devices/',\n                { devices: newDevices },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                dispatch(saveDeviceSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(saveDeviceFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const removeDeviceRequest = createAction('REMOVE_DEVICE_REQUEST');\nexport const removeDeviceSuccess = createAction('REMOVE_DEVICE_SUCCESS');\nexport const removeDeviceFailure = createAction('REMOVE_DEVICE_FAILURE');\n\nexport const removeDevice = (uid) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n            data: {\n                userDevices: { devices },\n            },\n        } = getState();\n\n        const newDevices = devices.filter((device) => {\n            if (device.uid === uid) {\n                return false;\n            }\n            return true;\n        });\n\n        dispatch(saveDeviceRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .put(\n                'user/devices/',\n                { devices: newDevices },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                dispatch(removeDeviceSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(removeDeviceFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\n///////////////////////\n///// Bluetooth //////\n/////////////////////\n\nexport const connectToDeviceRequest = createAction('CONNECT_TO_DEVICE_REQUEST');\nexport const connectToDeviceSuccess = createAction('CONNECT_TO_DEVICE_SUCCESS');\nexport const connectToDeviceFailure = createAction('CONNECT_TO_DEVICE_FAILURE');\n\nexport const connectGattRequest = createAction('CONNECT_GATT_REQUEST');\nexport const connectGattSuccess = createAction('CONNECT_GATT_SUCCESS');\nexport const connectGattFailure = createAction('CONNECT_GATT_FAILURE');\n\nexport const connectToDevice = (newFilters) => {\n    return (dispatch) => {\n        dispatch(connectToDeviceRequest());\n\n        const filters = newFilters;\n        navigator.bluetooth\n            .requestDevice({\n                acceptAllDevices: filters ? undefined : true,\n                filters,\n                optionalServices: [\n                    '5cf052d0-2403-4719-a558-b7e72c48112f',\n                    'battery_service',\n                    0x2a29,\n                    0x180a,\n                ],\n            })\n            .then((device) => {\n                console.log('device', device);\n                dispatch(connectToDeviceSuccess(device));\n                dispatch(saveDevice(device));\n                dispatch(connectGattRequest());\n                return device.gatt.connect();\n            })\n            .catch(() => {\n                dispatch(connectToDeviceFailure());\n            })\n            .then((server) => {\n                dispatch(connectGattSuccess(server));\n            })\n            .catch(() => {\n                dispatch(connectGattFailure());\n            });\n    };\n};\n\nexport const fetchBatteryServiceRequest = createAction(\n    'FETCH_BATTERY_SERVICE_REQUEST'\n);\nexport const fetchBatteryServiceSuccess = createAction(\n    'FETCH_BATTERY_SERVICE_SUCCESS'\n);\nexport const fetchBatteryServiceFailure = createAction(\n    'FETCH_BATTERY_SERVICE_FAILURE'\n);\n\nexport const fetchBatteryCharacteristicSuccess = createAction(\n    'FETCH_BATTERY_CHARACTERISTIC_SUCCESS'\n);\n\nexport const batteryService = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchBatteryServiceRequest());\n\n        const {\n            bluetooth: { server },\n        } = getState();\n\n        server\n            .getPrimaryService('battery_service')\n            .then((service) => {\n                dispatch(fetchBatteryServiceSuccess());\n                return service.getCharacteristic('battery_level');\n            })\n            .catch(() => {\n                dispatch(fetchBatteryServiceFailure());\n            })\n            .then((characteristic) => {\n                if (characteristic) {\n                    characteristic.startNotifications();\n                    characteristic.addEventListener(\n                        'characteristicvaluechanged',\n                        handleBatteryLevelChange\n                    );\n                    return characteristic.readValue();\n                }\n                throw new Error('characteristic baterry level not found');\n            })\n            .then((value) => {\n                console.log('fetchBatteryServiceSuccess', value.getUint8(0));\n                dispatch(\n                    fetchBatteryServiceSuccess({ level: value.getUint8(0) })\n                );\n            })\n            .catch(() => {});\n\n        function handleBatteryLevelChange(event) {\n            // console.log(\n            //     'batteryLevelChange',\n            //     event,\n            //     event.target.value.getUint8(0)\n            // );\n            dispatch(\n                fetchBatteryServiceSuccess({\n                    level: event.target.value.getUint8(0),\n                })\n            );\n        }\n    };\n};\n\nexport const fetchDeviceInfoRequest = createAction('FETCH_DEVICE_INFO_REQUEST');\nexport const fetchDeviceInfoSuccess = createAction('FETCH_DEVICE_INFO_SUCCESS');\nexport const fetchDeviceInfoFailure = createAction('FETCH_DEVICE_INFO_FAILURE');\n\nexport const fetchDeviceInfoCharacteristicSuccess = createAction(\n    'FETCH_DEVICE_INFO_CHARACTERISTIC_SUCCESS'\n);\n\nexport const deviceInfoService = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchDeviceInfoRequest());\n\n        const {\n            bluetooth: { server },\n        } = getState();\n\n        server\n            .getPrimaryService(0x180a)\n            .then((service) => {\n                dispatch(fetchDeviceInfoSuccess());\n                return service.getCharacteristic(0x2a29);\n            })\n            .catch(() => {\n                dispatch(fetchDeviceInfoFailure());\n            })\n            .then((characteristic) => {\n                if (characteristic) {\n                    return characteristic.readValue();\n                }\n                throw new Error('characteristic manufacturerName not found');\n            })\n            .then((value) => {\n                dispatch(\n                    fetchDeviceInfoCharacteristicSuccess({\n                        manufacturerName: value.getUint8(0),\n                    })\n                );\n            })\n            .catch(() => {});\n    };\n};\n\nexport const getBinaryRecipeRequest = createAction('GET_BINARY_RECIPE_REQUEST');\nexport const getBinaryRecipeSuccess = createAction('GET_BINARY_RECIPE_SUCCESS');\nexport const getBinaryRecipeFailure = createAction('GET_BINARY_RECIPE_FAILURE');\n\nexport const getBinaryRecipe = (recipeId) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        console.log('services', dataTransferService);\n\n        dispatch(getBinaryRecipeRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .get('recipe_binary/' + recipeId + '/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(getBinaryRecipeSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(getBinaryRecipeFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const writeRecipeToDeviceRequest = createAction(\n    'WRITE_RECIPE_TO_DEVICE_REQUEST'\n);\nexport const writeRecipeToDeviceSuccess = createAction(\n    'WRITE_RECIPE_TO_DEVICE_SUCCESS'\n);\nexport const writeRecipeToDeviceFailure = createAction(\n    'WRITE_RECIPE_TO_DEVICE_FAILURE'\n);\n\nexport const recipeByteTransfered = createAction('RECIPE_BYTE_TRANSFERED');\n\nlet keyI = 0;\nlet characteristicWrite = null;\n// let buffer = null;\n\nexport const writeRecipeToDevice = () => {\n    return (dispatch, getState) => {\n        const {\n            bluetooth: { server },\n            data: { recipeBinary },\n        } = getState();\n\n        let service = null;\n        // let result = null;\n\n        // connect to service\n\n        server\n            .getPrimaryService(dataTransferService.uuid)\n            .then((ser) => {\n                // console.log('service', ser);\n                service = ser;\n                return service.getCharacteristic(\n                    '5cf052d4-2403-4719-a558-b7e72c48112f'\n                );\n            })\n            .then((characteristic) => {\n                return characteristic.startNotifications();\n            })\n            .then((characteristic) => {\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    handleResponseControlMsg\n                );\n                console.log('Подписка на Control Transmit');\n\n                return service.getCharacteristic(\n                    '5cf052d3-2403-4719-a558-b7e72c48112f'\n                );\n            })\n            .then((characteristic) => {\n                console.log('characteristic Control Receive');\n                let buffer = new ArrayBuffer(20);\n                let msgKeyWord8 = 0x0a;\n                let operationCode = 0xff;\n                let dataSize32 = 0x2334;\n                let dataType16 = 0x0;\n\n                new DataView(buffer).setInt8(0, msgKeyWord8, true);\n                new DataView(buffer).setInt8(1, operationCode, true);\n                new DataView(buffer).setInt32(2, dataSize32, true);\n                new DataView(buffer).setInt16(6, dataType16, true);\n                console.log('Control Receive', new DataView(buffer).getInt8(0));\n                characteristic.writeValue(new Int8Array(buffer));\n            })\n            .catch((error) => {\n                alert(error);\n            });\n\n        function handleResponseControlMsg(event) {\n            let status = event.target.value.getUint8(0);\n            console.log('handleResponseControlMsg', 0x0a === status, status);\n            if (0x0a === status) {\n                service\n                    .getCharacteristic('5cf052d5-2403-4719-a558-b7e72c48112f')\n                    .then((characteristic) => {\n                        // console.log('characteristic Статус', characteristic);\n                        characteristic.startNotifications();\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            handleLevelChanged\n                        );\n                        return service.getCharacteristic(\n                            '5cf052d1-2403-4719-a558-b7e72c48112f'\n                        );\n                    })\n                    .then((characteristic) => {\n                        // console.log('characteristic Data Receive', buffer);\n\n                        characteristicWrite = characteristic;\n\n                        sendingData();\n                    });\n            } else if (0x0f === status) {\n                console.log('Recipe did saved');\n            } else {\n                console.log('');\n            }\n        }\n\n        function handleLevelChanged(event) {\n            let value = event.target.value;\n            console.log('handleStatusChanged', value, value.getUint8(0));\n            sendingData();\n        }\n\n        async function sendingData() {\n            console.log(\n                'sendingData...'\n                // recipeBinary.buffer,\n                // characteristicWrite\n            );\n\n            for (\n                let sum = 0;\n                keyI < recipeBinary.buffer.byteLength && sum < 400;\n                keyI = keyI + 20, sum = sum + 20\n            ) {\n                await characteristicWrite.writeValue(\n                    recipeBinary.buffer.slice(keyI, keyI + 20)\n                );\n                dispatch(\n                    recipeByteTransfered(\n                        recipeBinary.buffer.slice(keyI, keyI + 20).byteLength\n                    )\n                );\n                console.log(\n                    'DataBuffer',\n                    recipeBinary.buffer.slice(keyI, keyI + 20)\n                );\n            }\n\n            // for (let i = 0; keyI < buffer.byteLength; i++) {\n            //     result = await characteristicWrite.writeValue(\n            //         buffer.slice(keyI, keyI + 20)\n            //     );\n            //     keyI = keyI + 20;\n            //     console.log('sendingData', result);\n            //     break;\n            // }\n        }\n    };\n};\n","import Cookies from 'universal-cookie';\n\nexport const writeStateToCookie = (state, name, duration) => {\n    const cookies = new Cookies();\n    const expiresDate = new Date();\n    // expiresDate.setDate(expiresDate.getDate() + duration);\n    expiresDate.setSeconds(expiresDate.getSeconds() + duration);\n    cookies.set(name, JSON.stringify(state), {\n        path: '/',\n        expires: expiresDate,\n    });\n};\n\nexport const readStateFromCookie = (name) => {\n    const cookies = new Cookies();\n    return cookies.get(name);\n};\n\nexport const base64ToArrayBuffer = (base64) => {\n    var binary_string = window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n    for (var i = 0; i < len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n};\n","import React, { Component } from 'react';\n\nexport default class Loader extends Component {\n    render() {\n        return (\n            <div className=\"loader__container\">\n                <div className=\"loader\">\n                    <div className=\"lds-ripple\">\n                        <div></div>\n                        <div></div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport GoogleLogin from 'react-google-login';\nimport * as actions from '../../actions';\n\n// const responseGoogle = (response, status) => {\n//     console.log(response, status);\n// };\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n};\n\nclass GoogleOauth extends Component {\n    responseGoogleRequest = () => {\n        // console.log(response, 'request');\n    };\n\n    responseGoogleSuccess = (response) => {\n        const { convertToken } = this.props;\n        // console.log(response, 'success');\n        convertToken(response.accessToken);\n    };\n\n    responseGoogleFailure = () => {\n        // console.log(response, 'failure');\n    };\n\n    render() {\n        return (\n            <GoogleLogin\n                // clientId=\"385449723022-vmed4lc1a8a1t3fsat4flujbobsblv01.apps.googleusercontent.com\"\n                clientId=\"205221816405-0lvlolma2t1lvif67t749qee7h9te473.apps.googleusercontent.com\"\n                // redirectUri=\"http://localhost:3000\"\n                buttonText=\"Login\"\n                onSuccess={this.responseGoogleSuccess}\n                onFailure={this.responseGoogleFailure}\n                onRequest={this.responseGoogleRequest}\n                cookiePolicy={'single_host_origin'}\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(GoogleOauth);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport FacebookLogin from 'react-facebook-login';\nimport * as actions from '../../actions';\n\n// const responseGoogle = (response, status) => {\n//     console.log(response, status);\n// };\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n};\n\nclass FacebookOauth extends Component {\n    state = {\n        name: '',\n        email: '',\n        userID: '',\n    };\n    // responseGoogleRequest = () => {\n    //     // console.log(response, 'request');\n    // };\n\n    // responseGoogleSuccess = (response) => {\n    //     const { convertToken } = this.props;\n    //     // console.log(response, 'success');\n    //     convertToken(response.accessToken);\n    // };\n\n    // responseGoogleFailure = () => {\n    //     // console.log(response, 'failure');\n    // };\n\n    responseFacebook = (response) => {\n        const { name, email, userID } = response;\n        console.log(response);\n        this.setState({\n            name,\n            email,\n            userID,\n        });\n    };\n\n    render() {\n        const { name, email, userID } = this.state;\n        return (\n            <>\n                <FacebookLogin\n                    appId=\"369580627566109\"\n                    autoLoad={true}\n                    fields=\"name,email,picture\"\n                    // onClick={componentClicked}\n                    callback={this.responseFacebook}\n                />\n                <p>data: {`${name}, ${email}, ${userID}`}</p>\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(FacebookOauth);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport GoogleOauth from '../GoogleOauth/index.jsx';\nimport FacebookOauth from '../FacebookOauth/index.jsx';\nimport logo from '../../assets/images/elements.svg';\nimport * as actions from '../../actions';\n\n// const responseGoogle = (response, status) => {\n//     console.log(response, status);\n// };\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n};\n\nclass Login extends Component {\n    render() {\n        const { isLogged } = this.props;\n        if (!isLogged) {\n            // dfsfds\n        }\n        return (\n            <div className=\"App\" path=\"/\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    {/* <p>\n                        App for test BLE <u>Web connect</u>\n                    </p> */}\n                    {/* <WebBluetooth /> */}\n                    {/* <GoogleOauth /> */}\n                    <FacebookOauth />\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Login);\n","import React, { Component } from 'react';\n// import { connectWB } from './service';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data: { recipeBinary },\n        data,\n        bluetooth,\n        bluetooth: { device, server },\n    } = state;\n    return {\n        token,\n        device,\n        bluetooth,\n        server,\n        recipeBinary,\n        data,\n    };\n};\n\nconst actionCreators = {\n    connectToDevice: actions.connectToDevice,\n    batteryServiceAction: actions.batteryService,\n    deviceInfoServiceAction: actions.deviceInfoService,\n    writeRecipeToDevice: actions.writeRecipeToDevice,\n};\n\nclass WebBluetooth extends Component {\n    state = {\n        bluetoothDevice: null,\n        batteryLevelCharacteristic: null,\n        gattServer: null,\n        transferService: null,\n        characteristic: null,\n    };\n\n    connectToDevice = () => {\n        navigator.bluetooth\n            .requestDevice({\n                // acceptAllDevices: true,\n                filters: [\n                    { name: 'BlueNRG' },\n                    // { name: 'JUST-ASUS' },\n                    { services: ['5cf052d0-2403-4719-a558-b7e72c48112f'] },\n                    // { services: ['00001800-0000-1000-8000-00805f9b34fb'] },\n                ],\n                optionalServices: ['5cf052d0-2403-4719-a558-b7e72c48112f'],\n            })\n            .then((device) => {\n                console.log('device', device);\n                this.setState({ bluetoothDevice: device });\n                this.state.bluetoothDevice.addEventListener(\n                    'gattserverdisconnected',\n                    this.onDisconnected\n                );\n            })\n            .catch((error) => {\n                // alert(error);\n                console.log('error', error);\n            });\n    };\n\n    // onDisconnected() {\n    //     // console.log('> Bluetooth Device disconnected');\n    //     // connectDeviceAndCacheCharacteristics().catch((error) => {\n    //     //     console.log('Argh! ' + error);\n    //     // });\n    // }\n\n    // disconnect = () => {\n    //     bluetoothDevice.gatt.disconnect();\n    // };\n\n    connect() {\n        // console.log('Connecting to Bluetooth Device...');\n        return this.state.bluetoothDevice.gatt\n            .connect()\n            .then((server) => {\n                console.log('server', server);\n\n                this.setState({ gattServer: server });\n            })\n            .catch((error) => {\n                alert(error);\n                // console.log('error', error);\n            });\n    }\n\n    serviceConnect = (uuid) => {\n        const { server } = this.props;\n        console.log('serviceConnect', server);\n        server\n            .getPrimaryService(uuid)\n            .then((service) => {\n                console.log('service', service);\n                this.setState({ transferService: service });\n\n                // return service.getCharacteristic(StatusCharacteristicUuid);\n            })\n            .catch((error) => {\n                alert(error);\n                // console.log('error', error);\n            });\n    };\n\n    CtrlRxCharacteristicUuid = () => {\n        let buffer = new ArrayBuffer(20);\n        let msgKeyWord8 = 0x0a;\n        let operationCode = 0xff;\n        let dataSize32 = 800;\n        let dataType16 = 0x0006;\n\n        new DataView(buffer).setInt8(0, msgKeyWord8);\n        new DataView(buffer).setInt8(1, operationCode);\n        new DataView(buffer).setInt32(2, dataSize32);\n        new DataView(buffer).setInt16(6, dataType16);\n\n        console.log('BUFFER', buffer, new DataView(buffer));\n        this.state.transferService\n            .getCharacteristic('5cf052d3-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Control Receive');\n                return characteristic.writeValue(buffer);\n            })\n            .then((value) => {\n                console.log('Control Receive value: ', value);\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    sendDataToDevice = () => {\n        let buffer = new ArrayBuffer(20);\n        new DataView(buffer).setInt32(0, 6000);\n        this.state.transferService\n            .getCharacteristic('5cf052d1-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Data Receive', buffer);\n\n                let result = null;\n                async function sendingData() {\n                    for (let i = 0; i < 800; i = i + 20) {\n                        result = await characteristic.writeValue(buffer);\n                        console.log('sendingData', result);\n                    }\n                }\n                sendingData();\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    CtrlTxCharacteristicUuid = () => {\n        this.state.transferService\n            .getCharacteristic('5cf052d4-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                return characteristic.startNotifications();\n            })\n            .then((characteristic) => {\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleResponseControlMsg\n                );\n                console.log('Подписка на Control Transmit');\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    StatusCharacteristicUuid = () => {\n        this.state.transferService\n            .getCharacteristic('5cf052d5-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                characteristic.startNotifications();\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleLevelChanged\n                );\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('Статус value: ', value);\n            });\n    };\n\n    batteryLevel = () => {\n        this.state.transferService\n            .getCharacteristic('battery_level')\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                characteristic.startNotifications();\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleLevelChanged\n                );\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('Заряд батареи', value.buffer);\n                // console.log('Battery percentage is ' + value.getUint8(0));\n            });\n    };\n\n    handleResponseControlMsg(event) {\n        let status = event.target.value.getUint8(0);\n        console.log('handleResponseControlMsg', 0x0a === status);\n        // console.log('Event - Battery percentage is ' + batteryLevel);\n    }\n\n    handleLevelChanged(event) {\n        let batteryLevel = event.target.value;\n        console.log('handleStatusChanged', batteryLevel, batteryLevel.buffer);\n        // console.log('Event - Battery percentage is ' + batteryLevel);\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            bluetooth: { device, server, batteryService },\n            batteryServiceAction,\n        } = this.props;\n        if (device && server && !batteryService) {\n            console.log('Need request battery service');\n            batteryServiceAction();\n        }\n        // if (device && server && !deviceInfoService) {\n        //     console.log('Need request device info service');\n        //     deviceInfoServiceAction();\n        // }\n\n        const { recipeBinary, writeRecipeToDevice } = this.props;\n        if (recipeBinary !== prevProps.recipeBinary) {\n            console.log('Recipe binary not same');\n            if (recipeBinary.binary_recipe) {\n                // writeToDevice\n                writeRecipeToDevice();\n            }\n        }\n    }\n\n    render() {\n        // const { device, recipeBinary } = this.props;\n        // if (device) {\n        //     console.log('Added device: ', device);\n        // }\n        // console.log('webbluetooth render', recipeBinary);\n        // if (recipeBinary) {\n        //     console.log('recipeBinary', recipeBinary.buffer);\n        // }\n        return (\n            <div>\n                {/* <p>\n                    {this.state.bluetoothDevice &&\n                        'Подключено устройство: ' +\n                            this.state.bluetoothDevice.name}\n                </p>\n                <button\n                    onClick={() => connectToDevice()}\n                    // className={'bluetooth__connect-btn'}\n                >\n                    Add device\n                </button>\n                <br />\n                <br />\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.connect();\n                    }}\n                >\n                    Подключиться к серверу гатт\n                </button>\n                <br />\n                <br />\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.serviceConnect(\n                            '5cf052d0-2403-4719-a558-b7e72c48112f'\n                        );\n                    }}\n                >\n                    Подключиться к DataTransferService\n                </button>\n\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.serviceConnect('battery_service');\n                    }}\n                >\n                    Подключиться к Baterry service\n                </button>\n                <br />\n                <br />\n                <ul>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.CtrlRxCharacteristicUuid();\n                            }}\n                        >\n                            Отправить control message\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.CtrlTxCharacteristicUuid();\n                            }}\n                        >\n                            Подписаться на ответ control message\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.StatusCharacteristicUuid();\n                            }}\n                        >\n                            Посмотреть сколько принято байт во время передачи\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.batteryLevel();\n                            }}\n                        >\n                            Узнать уровень заряда батареи\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.sendDataToDevice();\n                            }}\n                        >\n                            Send data to device\n                        </button>\n                    </li>\n                </ul> */}\n                {/* <button onClick={this.disconnect}>Дисконект</button>\n                <button onClick={this.onReconnectButtonClick}>Reconect</button> */}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(WebBluetooth);\n","import React, { Component } from 'react';\nimport { Card, Col, Row, Button, Tooltip, Divider, Progress } from 'antd';\nimport {\n    PlusCircleOutlined,\n    CloseCircleOutlined,\n    CheckCircleTwoTone,\n} from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\nimport WebBluetooth from '../WebBluetooth';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data,\n        data: { byteTransfered },\n        bluetooth: { device, server, batteryService },\n    } = state;\n    return {\n        token,\n        data,\n        device,\n        server,\n        batteryService,\n        byteTransfered,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n    recipe: actions.recipe,\n    user: actions.user,\n    connectToDevice: actions.connectToDevice,\n    removeDevice: actions.removeDevice,\n};\n\nclass Devices extends Component {\n    render() {\n        const {\n            connectToDevice,\n            removeDevice,\n            device: deviceFromStore,\n            showDrawer,\n            server,\n            batteryService,\n            byteTransfered,\n            // batteryService: { level },\n        } = this.props;\n        // console.log('Devices', this.props.devices);\n        let devices =\n            this.props.devices &&\n            this.props.devices.map((device) => {\n                if (deviceFromStore && deviceFromStore.id === device.uid) {\n                    return (\n                        <Col span={8} key={device.uid}>\n                            <Card\n                                title={\n                                    <>\n                                        {deviceFromStore &&\n                                            deviceFromStore.id ===\n                                                device.uid && (\n                                                <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                                            )}\n                                        <Divider type=\"vertical\" />\n                                        <span>{device.name}</span>\n                                    </>\n                                }\n                                extra={\n                                    <div>\n                                        <Button\n                                            // type=\"primary\"\n                                            style={{ color: 'red' }}\n                                            shape=\"circle\"\n                                            icon={<CloseCircleOutlined />}\n                                            onClick={() =>\n                                                removeDevice(device.uid)\n                                            }\n                                        />\n                                    </div>\n                                }\n                                style={{ width: 300 }}\n                                // cover={<img alt=\"example\" src={device.image} />}\n                            >\n                                <p>\n                                    <strong>UID:</strong> {device.uid}\n                                </p>\n                                {batteryService &&\n                                    Number.isInteger(batteryService.level) && (\n                                        <p>\n                                            <strong>Battery level: </strong>\n                                            {batteryService.level}\n                                        </p>\n                                    )}\n\n                                {server && (\n                                    <Button onClick={showDrawer}>\n                                        Add recipe to device\n                                    </Button>\n                                )}\n                                {byteTransfered ? (\n                                    <Progress\n                                        type=\"circle\"\n                                        percent={Math.floor(\n                                            (byteTransfered * 100) / 9012\n                                        )}\n                                        width={40}\n                                    />\n                                ) : (\n                                    ''\n                                )}\n                            </Card>\n                        </Col>\n                    );\n                }\n                return (\n                    <Col span={8} key={device.uid}>\n                        <Card\n                            title={\n                                <>\n                                    {deviceFromStore &&\n                                        deviceFromStore.id === device.uid && (\n                                            <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                                        )}\n                                    <Divider type=\"vertical\" />\n                                    <span>{device.name}</span>\n                                </>\n                            }\n                            extra={\n                                <div>\n                                    <Button\n                                        // type=\"primary\"\n                                        style={{ color: 'red' }}\n                                        shape=\"circle\"\n                                        icon={\n                                            <CloseCircleOutlined twoToneColor=\"#52c41a\" />\n                                        }\n                                        onClick={() => removeDevice(device.uid)}\n                                    />\n                                </div>\n                            }\n                            style={{ width: 300 }}\n                            // cover={<img alt=\"example\" src={device.image} />}\n                        >\n                            <p>\n                                <strong>UID:</strong> {device.uid}\n                            </p>\n                            <Button\n                                // type=\"primary\"\n                                shape=\"circle\"\n                                icon={<PlusCircleOutlined />}\n                                onClick={() =>\n                                    connectToDevice([{ name: device.name }])\n                                }\n                            />\n                        </Card>\n                    </Col>\n                );\n            });\n        // console.log('fsadasd', devices);\n        return (\n            <>\n                <Row gutter={16}>{devices || ''}</Row>\n                <Divider />\n                <Tooltip title=\"Add device\">\n                    <Button\n                        shape=\"circle\"\n                        icon={<PlusCircleOutlined />}\n                        onClick={() => connectToDevice()}\n                    />\n                </Tooltip>\n                <WebBluetooth />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Devices);\n","import React, { Component } from 'react';\nimport { Card, Row, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    writeRecipeToDevice: actions.writeRecipeToDevice,\n    getBinaryRecipe: actions.getBinaryRecipe,\n};\n\nclass Recipes extends Component {\n    render() {\n        const { onClose, getBinaryRecipe } = this.props;\n        let recipes = this.props.recipes.map((recipe) => {\n            return (\n                // <Col span={6} key={recipe.id}>\n                <Card\n                    key={recipe.id}\n                    title={recipe.name + ' - id' + recipe.id + ''}\n                    // extra={<a href=\"#\">More</a>}\n                    style={{ width: 250 }}\n                    cover={<img alt=\"example\" src={recipe.image} />}\n                    className=\"recipe__card\"\n                >\n                    <p>{recipe.description_text}</p>\n                    {this.props.buttonVisible && (\n                        <Button\n                            onClick={() => {\n                                onClose();\n                                getBinaryRecipe(recipe.id);\n                            }}\n                        >\n                            Add\n                        </Button>\n                    )}\n                </Card>\n                // </Col>\n            );\n        });\n        // console.log('fsadasd', recipes);\n        return <Row gutter={16}>{recipes}</Row>;\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Recipes);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Menu, PageHeader, Drawer } from 'antd';\nimport {\n    // MailOutlined,\n    // AppstoreOutlined,\n    // SettingOutlined,\n    AntDesignOutlined,\n    ReadOutlined,\n} from '@ant-design/icons';\n\nimport './account.scss';\n\nimport * as actions from '../../actions';\nimport Devices from './Devices';\nimport Recipes from './Recipes';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data,\n    } = state;\n    return {\n        token,\n        data,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n    recipe: actions.recipe,\n    user: actions.user,\n    userDevices: actions.userDevices,\n};\n\nclass Account extends Component {\n    state = {\n        current: 'devices',\n        showDrawer: false,\n    };\n\n    showDrawer = () => {\n        this.setState({ showDrawer: true });\n    };\n\n    onClose = () => {\n        this.setState({ showDrawer: false });\n    };\n\n    handleClick = (e) => {\n        // console.log('click ', e);\n        this.setState({ current: e.key });\n    };\n\n    componentDidMount() {\n        const { recipe, user, userDevices } = this.props;\n        // console.log('didMount');\n        recipe();\n        user();\n        userDevices();\n    }\n\n    render() {\n        const { current } = this.state;\n        const {\n            data: { user, recipe, userDevices },\n        } = this.props;\n        // console.log('account', user);\n        return (\n            <>\n                <div className=\"elements__account\">\n                    <PageHeader\n                        title={\n                            <div>\n                                {user && user.first_name + ' ' + user.last_name}\n                            </div>\n                        }\n                    >\n                        <Menu\n                            onClick={this.handleClick}\n                            selectedKeys={[current]}\n                            mode=\"horizontal\"\n                        >\n                            <Menu.Item\n                                key=\"devices\"\n                                icon={<AntDesignOutlined />}\n                            >\n                                My devices\n                            </Menu.Item>\n                            <Menu.Item key=\"recipes\" icon={<ReadOutlined />}>\n                                Recipes\n                            </Menu.Item>\n                        </Menu>\n                        {/* <WebBluetooth /> */}\n                    </PageHeader>\n                    {this.state.current === 'devices' ? (\n                        <Devices\n                            devices={userDevices && userDevices.devices}\n                            showDrawer={this.showDrawer}\n                        />\n                    ) : (\n                        <Recipes\n                            recipes={recipe}\n                            buttonVisible={true}\n                            onClose={this.onClose}\n                        />\n                    )}\n                    <Drawer\n                        title=\"Recipes\"\n                        width={640}\n                        placement=\"right\"\n                        closable={false}\n                        onClose={this.onClose}\n                        visible={this.state.showDrawer}\n                    >\n                        <Recipes\n                            recipes={recipe}\n                            buttonVisible={true}\n                            onClose={this.onClose}\n                        />\n                    </Drawer>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Account);\n","import React, { Component } from 'react';\nimport { Router, Link, Redirect } from '@reach/router';\nimport { connect } from 'react-redux';\nimport { Result, Button } from 'antd';\n\nimport * as actions from './actions';\nimport { readStateFromCookie } from './utils';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport Loader from './components/Loader';\n// import WebBluetooth from './WebBluetooth';\n// import GoogleOauth from './components/GoogleOauth';\nimport Login from './components/Login';\nimport Account from './components/Account';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { cookie },\n        settings: { showPreloader },\n    } = state;\n    return {\n        cookie,\n        showPreloader,\n    };\n};\n\nconst actionCreators = {\n    fetchTokenSuccess: actions.fetchTokenSuccess,\n};\n\nclass App extends Component {\n    // connectToDevice = () => {\n    //     navigator.bluetooth\n    //         .requestDevice({\n    //             acceptAllDevices: true,\n    //             optionalServices: ['battery_service'],\n    //         })\n    //         .then((device) => {\n    //             console.log(device);\n    //         })\n    //         .catch((error) => {\n    //             console.log(error);\n    //         });\n    // };\n\n    componentWillMount() {\n        const { fetchTokenSuccess } = this.props;\n        const authCookie = readStateFromCookie('auth_cookie');\n        // Проверяем наличии куки авторизации\n        if (authCookie) {\n            console.log('cookie', authCookie);\n            fetchTokenSuccess(authCookie);\n        }\n    }\n\n    render() {\n        const { cookie, showPreloader } = this.props;\n        return (\n            <>\n                {showPreloader && <Loader />}\n                <Router basepath=\"elements2\">\n                    {cookie.access_token && (\n                        <Redirect from=\"/\" to={`account`} noThrow />\n                    )}\n\n                    <Login path=\"/\" />\n                    <Account path=\"account\" />\n\n                    <Result\n                        default\n                        status=\"404\"\n                        title=\"404\"\n                        subTitle=\"Sorry, the page you visited does not exist.\"\n                        extra={\n                            <Button type=\"primary\">\n                                <Link to=\"/\">Back Home</Link>\n                            </Button>\n                        }\n                    />\n                </Router>\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(App);\n","import auth from './auth';\nimport data from './data';\nimport bluetooth from './bluetooth';\nimport settings from './settings';\n\nexport default {\n    auth,\n    data,\n    bluetooth,\n    settings,\n};\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.fetchTokenSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            return {\n                ...state,\n                cookie: payload,\n            };\n        },\n    },\n    {\n        cookie: {},\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\nimport { base64ToArrayBuffer } from '../utils';\n\nexport default handleActions(\n    {\n        [actions.fetchRecipesSuccess](state, { payload }) {\n            // console.log('fetchRecipesSuccess', payload);\n            return {\n                ...state,\n                recipe: payload,\n            };\n        },\n        [actions.fetchUserSuccess](state, { payload }) {\n            // console.log('fetchUserSuccess', payload);\n            return {\n                ...state,\n                user: payload,\n            };\n        },\n        [actions.fetchUserDevicesSuccess](state, { payload }) {\n            // console.log('fetchUserDevicesSuccess', payload);\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [actions.getBinaryRecipeSuccess](state, { payload }) {\n            // console.log('fetchUserDevicesSuccess', payload);\n            let buffer = base64ToArrayBuffer(payload.binary_recipe);\n            return {\n                ...state,\n                recipeBinary: { ...payload, buffer },\n            };\n        },\n        [actions.recipeByteTransfered](state, { payload }) {\n            return {\n                ...state,\n                byteTransfered: state.byteTransfered + payload,\n            };\n        },\n        [actions.saveDeviceSuccess](state, { payload }) {\n            console.log('saveDeviceSuccess', payload);\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [actions.removeDeviceSuccess](state, { payload }) {\n            console.log('removeDeviceSuccess', payload);\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n    },\n    {\n        recipe: [],\n        user: null,\n        userDevices: null,\n        recipeBinary: null,\n        byteTransfered: 0,\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.connectToDeviceSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            return {\n                ...state,\n                device: payload,\n            };\n        },\n        [actions.connectGattSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            return {\n                ...state,\n                server: payload,\n            };\n        },\n        [actions.fetchBatteryServiceSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            const { batteryService } = state;\n            return {\n                ...state,\n                batteryService: { ...batteryService, ...payload },\n            };\n        },\n        [actions.fetchDeviceInfoCharacteristicSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            const { deviceInfoService } = state;\n            return {\n                ...state,\n                deviceInfoService: { ...deviceInfoService, ...payload },\n            };\n        },\n    },\n    {\n        device: null,\n        server: null,\n        batteryService: null,\n        deviceInfoService: null,\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.showAppPreloader](state, { payload }) {\n            // Stack for handle several requests\n            let stack = state.preloaderStack.slice();\n            if (payload) {\n                stack.push(0);\n            } else {\n                stack.shift();\n            }\n            return {\n                ...state,\n                showPreloader: !!stack.length,\n                preloaderStack: stack,\n            };\n        },\n    },\n    {\n        showPreloader: false,\n        preloaderStack: [],\n    }\n);\n","import reducers from './reducers';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nconst middleware = getDefaultMiddleware({\n    immutableCheck: false,\n    serializableCheck: false,\n    thunk: true,\n});\n\nexport default configureStore({\n    reducer: { ...reducers },\n    middleware,\n    devTools: process.env.NODE_ENV !== 'production',\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\n\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}