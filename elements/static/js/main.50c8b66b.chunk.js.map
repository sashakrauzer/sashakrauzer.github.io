{"version":3,"sources":["assets/images/elements.svg","actions/index.js","utils/index.js","components/Loader/index.jsx","components/GoogleOauth/index.jsx","components/Login/index.jsx","components/WebBluetooth/index.jsx","components/Account/Devices.jsx","components/Account/Recipes.jsx","components/Account/index.js","App.jsx","reducers/index.js","reducers/auth.js","reducers/data.js","reducers/bluetooth.js","reducers/settings.js","store.js","index.jsx"],"names":["module","exports","axios","defaults","baseURL","showAppPreloader","createAction","fetchTokenRequest","fetchTokenSuccess","fetchTokenFailure","convertToken","data","dispatch","post","grant_type","client_id","backend","token","then","response","state","name","duration","cookies","Cookies","expiresDate","Date","setSeconds","getSeconds","set","JSON","stringify","path","expires","writeStateToCookie","expires_in","catch","fetchRecipesRequest","fetchRecipesSuccess","fetchRecipesFailure","recipe","get","fetchUserSuccess","fetchUserFailure","user","getState","access_token","auth","cookie","headers","Authorization","fetchUserDevicesSuccess","fetchUserDevicesFailure","saveDeviceRequest","saveDeviceSuccess","saveDeviceFailure","removeDeviceSuccess","removeDeviceFailure","connectToDeviceRequest","connectToDeviceSuccess","connectToDeviceFailure","connectGattRequest","connectGattSuccess","connectGattFailure","connectToDevice","newFilters","filters","navigator","bluetooth","requestDevice","acceptAllDevices","undefined","optionalServices","device","devices","userDevices","newDevices","_","uniqBy","uid","id","length","put","saveDevice","gatt","connect","error","console","server","info","fetchBatteryServiceRequest","fetchBatteryServiceSuccess","fetchBatteryServiceFailure","fetchDeviceInfoRequest","fetchDeviceInfoSuccess","fetchDeviceInfoFailure","fetchDeviceInfoCharacteristicSuccess","getRecipeByIdRequest","getRecipeByIdSuccess","getRecipeByIdFailure","Loader","className","Component","actionCreators","actions","GoogleOauth","responseGoogleRequest","responseGoogleSuccess","props","accessToken","responseGoogleFailure","clientId","buttonText","onSuccess","this","onFailure","onRequest","cookiePolicy","Login","isLogged","src","logo","alt","batteryServiceAction","batteryService","getPrimaryService","service","log","getCharacteristic","characteristic","startNotifications","addEventListener","value","level","readValue","Error","getUint8","deviceInfoServiceAction","manufacturerName","WebBluetooth","bluetoothDevice","batteryLevelCharacteristic","gattServer","transferService","services","setState","onDisconnected","serviceConnect","uuid","alert","CtrlRxCharacteristicUuid","buffer","ArrayBuffer","DataView","setInt8","setInt32","setInt16","writeValue","sendDataToDevice","result","a","i","sendingData","CtrlTxCharacteristicUuid","handleResponseControlMsg","StatusCharacteristicUuid","handleLevelChanged","batteryLevel","event","status","target","deviceInfoService","removeDevice","filter","Devices","deviceFromStore","showDrawer","map","span","key","title","CheckCircleTwoTone","twoToneColor","type","extra","style","color","shape","icon","CloseCircleOutlined","onClick","width","Number","isInteger","PlusCircleOutlined","gutter","writeRecipeToDevice","recipeId","base64","binary_string","window","atob","len","bytes","Uint8Array","charCodeAt","_base64ToArrayBuffer","binary_recipe","ser","Recipes","onClose","recipes","cover","image","description_text","buttonVisible","Account","current","handleClick","e","first_name","last_name","selectedKeys","mode","Item","AntDesignOutlined","ReadOutlined","placement","closable","visible","App","authCookie","showPreloader","from","to","noThrow","default","subTitle","settings","handleActions","payload","stack","preloaderStack","slice","push","shift","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","thunk","configureStore","reducer","reducers","devTools","process","ReactDOM","render","store","document","getElementById"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,sC,sVCK3CC,IAAMC,SAASC,QAAU,0BAMlB,I,IAAMC,EAAmBC,YAAa,sBAMhCC,EAAoBD,YAAa,uBACjCE,EAAoBF,YAAa,uBACjCG,EAAoBH,YAAa,uBAEjCI,EAAe,SAACC,GACzB,OAAO,SAACC,GAGJA,EAASL,KAETL,IACKW,KAAK,uBAAwB,CAC1BC,WAAY,gBACZC,UAAW,2CACXC,QAAS,gBACTC,MAAON,IAEVO,MAAK,SAACC,IChCe,SAACC,EAAOC,EAAMC,GAC5C,IAAMC,EAAU,IAAIC,IACdC,EAAc,IAAIC,KAExBD,EAAYE,WAAWF,EAAYG,aAAeN,GAClDC,EAAQM,IAAIR,EAAMS,KAAKC,UAAUX,GAAQ,CACrCY,KAAM,IACNC,QAASR,ID2BDS,CACIf,EAASR,KACT,cACAQ,EAASR,KAAKwB,YAMlBvB,EAASJ,EAAkBW,EAASR,UAGvCyB,OAAM,WAEHxB,EAASH,UASZ4B,EAAsB/B,YAAa,yBACnCgC,EAAsBhC,YAAa,yBACnCiC,EAAsBjC,YAAa,yBAEnCkC,EAAS,WAClB,OAAO,SAAC5B,GAGJA,EAASyB,KACTzB,EAASP,GAAiB,IAE1BH,IACKuC,IAAI,WACJvB,MAAK,SAACC,GAEHP,EAAS0B,EAAoBnB,EAASR,OACtCC,EAASP,GAAiB,OAE7B+B,OAAM,WAEHxB,EAAS2B,KACT3B,EAASP,GAAiB,SAU7BqC,GADmBpC,YAAa,sBACbA,YAAa,uBAChCqC,EAAmBrC,YAAa,sBAEhCsC,EAAO,WAChB,OAAO,SAAChC,EAAUiC,GACdjC,EAASyB,KACTzB,EAASP,GAAiB,IAFC,IAMTyC,EAEdD,IAHAE,KACIC,OAAUF,aAGlB5C,IACKuC,IAAI,QAAS,CACVQ,QAAS,CACLC,cAAc,UAAD,OAAYJ,MAGhC5B,MAAK,SAACC,GACHP,EAAS8B,EAAiBvB,EAASR,OAEnCC,EAASP,GAAiB,OAE7B+B,OAAM,WACHxB,EAAS+B,KACT/B,EAASP,GAAiB,SAQ7B8C,GAH0B7C,YACnC,8BAEmCA,YACnC,+BAES8C,EAA0B9C,YACnC,8BAmCS+C,EAAoB/C,YAAa,uBACjCgD,EAAoBhD,YAAa,uBACjCiD,EAAoBjD,YAAa,uBAiDjCkD,GADsBlD,YAAa,yBACbA,YAAa,0BACnCmD,EAAsBnD,YAAa,yBA0DnCoD,EAAyBpD,YAAa,6BACtCqD,EAAyBrD,YAAa,6BACtCsD,EAAyBtD,YAAa,6BAEtCuD,EAAqBvD,YAAa,wBAClCwD,EAAqBxD,YAAa,wBAClCyD,EAAqBzD,YAAa,wBAElC0D,EAAkB,SAACC,GAC5B,OAAO,SAACrD,GACJA,EAAS8C,KAaT,IAAMQ,EAAUD,EAEhBE,UAAUC,UACLC,cAAc,CACXC,kBAAkBJ,QAAUK,EAC5BL,UACAM,iBAAkB,CACd,uCACA,kBACA,MACA,QAGPtD,MAAK,SAACuD,GASH,OARA7D,EAAS+C,EAAuBc,IAChC7D,EAhJU,SAAC6D,GACvB,OAAO,SAAC7D,EAAUiC,GAAc,IAAD,EAQvBA,IALcC,EAHS,EAEvBC,KACIC,OAAUF,aAGK4B,EANI,EAKvB/D,KACIgE,YAAeD,QAIjBE,EAAaC,IAAEC,OAAF,sBACXJ,GADW,CACF,CAAErD,KAAMoD,EAAOpD,KAAM0D,IAAKN,EAAOO,MAC9C,OAGJ,GAAIJ,EAAWK,SAAWP,EAAQO,OAC9B,OAAO,EAGXrE,EAASyC,KACTzC,EAASP,GAAiB,IAE1BH,IACKgF,IACG,gBACA,CAAER,QAASE,GACX,CACI3B,QAAS,CACLC,cAAc,UAAD,OAAYJ,MAIpC5B,MAAK,SAACC,GAEHP,EAAS0C,EAAkBnC,EAASR,OACpCC,EAASP,GAAiB,OAE7B+B,OAAM,WAEHxB,EAAS2C,KACT3C,EAASP,GAAiB,QAuGjB8E,CAAWV,IAMpB7D,EAASiD,KACFY,EAAOW,KAAKC,aAEtBjD,OAAM,SAACkD,GACJ1E,EAASgD,KACT2B,QAAQD,MAAMA,MAEjBpE,MAAK,SAACsE,GACHD,QAAQE,KAAK,SAAUD,GACvB5E,EAASkD,EAAmB0B,OAE/BpD,OAAM,SAACkD,GACJ1E,EAASmD,KACTwB,QAAQD,MAAMA,QAKjBI,EAA6BpF,YACtC,iCAESqF,GAA6BrF,YACtC,iCAESsF,GAA6BtF,YACtC,iCAwDSuF,IArDoCvF,YAC7C,wCAoDkCA,YAAa,8BACtCwF,GAAyBxF,YAAa,6BACtCyF,GAAyBzF,YAAa,6BAEtC0F,GAAuC1F,YAChD,4CAsDS2F,GAAuB3F,YAAa,4BACpC4F,GAAuB5F,YAAa,4BACpC6F,GAAuB7F,YAAa,4BEzc5B8F,IF2cqB9F,YACtC,kCAEsCA,YACtC,kCAEsCA,YACtC,kC,qLEhdI,OACI,yBAAK+F,UAAU,qBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,cACX,8BACA,qC,GAPYC,c,qBCiB9BC,GAAiB,CACnB7F,aAAc8F,GAGZC,G,4MACFC,sBAAwB,a,EAIxBC,sBAAwB,SAACxF,IAGrBT,EAFyB,EAAKkG,MAAtBlG,cAEKS,EAAS0F,c,EAG1BC,sBAAwB,a,uDAKpB,OACI,kBAAC,KAAD,CAEIC,SAAS,2EAETC,WAAW,QACXC,UAAWC,KAAKP,sBAChBQ,UAAWD,KAAKJ,sBAChBM,UAAWF,KAAKR,sBAChBW,aAAc,2B,GAzBJf,aA+BXjB,gBA5CS,SAACjE,GAIrB,MAAO,CACHH,MAFAG,EADA2B,KAAQ9B,SA0CwBsF,GAAzBlB,CAAyCoB,I,qBClClDF,GAAiB,CACnB7F,aAAc8F,GAGZc,G,uKAEuBJ,KAAKN,MAAlBW,SAIR,OACI,yBAAKlB,UAAU,MAAMrE,KAAK,KACtB,4BAAQqE,UAAU,cACd,yBAAKmB,IAAKC,KAAMpB,UAAU,WAAWqB,IAAI,SACzC,+CACqB,2CAGrB,kBAAC,GAAD,Y,GAdApB,aAqBLjB,gBAlCS,SAACjE,GAIrB,MAAO,CACHH,MAFAG,EADA2B,KAAQ9B,SAgCwBsF,GAAzBlB,CAAyCiC,I,wIC1BlDf,GAAiB,CACnBvC,gBAAiBwC,EACjBmB,qBLwU0B,WAC1B,OAAO,SAAC/G,EAAUiC,GACdjC,EAAS8E,KADkB,MAKvB7C,IADAuB,UAAqBoB,GAJE,EAIVf,OAJU,EAIFe,QAJE,EAIMoC,eAGjCpC,EACKqC,kBAAkB,mBAClB3G,MAAK,SAAC4G,GAGH,OAFAlH,EAAS+E,MACTJ,QAAQwC,IAAI,UAAWD,GAChBA,EAAQE,kBAAkB,oBAEpC5F,OAAM,SAACkD,GACJ1E,EAASgF,MACTL,QAAQD,MAAMA,MAEjBpE,MAAK,SAAC+G,GAEH,GADA1C,QAAQwC,IAAI,sDAAyBE,GACjCA,EAWA,OAVAA,EAAeC,qBACfD,EAAeE,iBACX,8BACA,SAACC,GAAD,OACIxH,EACI+E,GAA2B,CACvB0C,MAAOD,QAIhBH,EAAeK,YAE1B,MAAM,IAAIC,MAAM,6CAEnBrH,MAAK,SAACkH,GACH7C,QAAQE,KAAK,4EAAiB2C,EAAMI,SAAS,IAC7C5H,EACI+E,GAA2B,CAAE0C,MAAOD,EAAMI,SAAS,SAG1DpG,OAAM,SAACkD,GAEJC,QAAQD,MAAMA,QKnX1BmD,wBLgY6B,WAC7B,OAAO,SAAC7H,EAAUiC,GACdjC,EAASiF,MADkB,MAKvBhD,IADAuB,UAAqBoB,GAJE,EAIVf,OAJU,EAIFe,QAJE,EAIMoC,eAGjCpC,EACKqC,kBAAkB,MAClB3G,MAAK,SAAC4G,GAGH,OAFAlH,EAASkF,MACTP,QAAQwC,IAAI,UAAWD,GAChBA,EAAQE,kBAAkB,UAEpC5F,OAAM,SAACkD,GACJ1E,EAASmF,MACTR,QAAQD,MAAMA,MAEjBpE,MAAK,SAAC+G,GAEH,GADA1C,QAAQwC,IAAI,sDAAyBE,GACjCA,EAWA,OAAOA,EAAeK,YAE1B,MAAM,IAAIC,MAAM,gDAEnBrH,MAAK,SAACkH,GACH7C,QAAQE,KAAK,kIAA0B2C,GACvCxH,EACIoF,GAAqC,CACjC0C,iBAAkBN,EAAMI,SAAS,SAI5CpG,OAAM,SAACkD,GAEJC,QAAQD,MAAMA,SK3axBqD,G,4MACFvH,MAAQ,CACJwH,gBAAiB,KACjBC,2BAA4B,KAC5BC,WAAY,KACZC,gBAAiB,KACjBd,eAAgB,M,EAGpBjE,gBAAkB,WACdG,UAAUC,UACLC,cAAc,CAEXH,QAAS,CACL,CAAE7C,KAAM,WAER,CAAE2H,SAAU,CAAC,0CAGjBxE,iBAAkB,CAAC,0CAEtBtD,MAAK,SAACuD,GACHc,QAAQwC,IAAI,SAAUtD,GACtB,EAAKwE,SAAS,CAAEL,gBAAiBnE,IACjC,EAAKrD,MAAMwH,gBAAgBT,iBACvB,yBACA,EAAKe,mBAGZ9G,OAAM,SAACkD,GAEJC,QAAQwC,IAAI,QAASzC,O,EA8BjC6D,eAAiB,SAACC,GAAU,IAChB5D,EAAW,EAAKoB,MAAhBpB,OACRD,QAAQwC,IAAI,iBAAkBvC,GAC9BA,EACKqC,kBAAkBuB,GAClBlI,MAAK,SAAC4G,GACHvC,QAAQwC,IAAI,UAAWD,GACvB,EAAKmB,SAAS,CAAEF,gBAAiBjB,OAIpC1F,OAAM,SAACkD,GACJ+D,MAAM/D,O,EAKlBgE,yBAA2B,WACvB,IAAIC,EAAS,IAAIC,YAAY,IAM7B,IAAIC,SAASF,GAAQG,QAAQ,EALX,IAMlB,IAAID,SAASF,GAAQG,QAAQ,EALT,KAMpB,IAAID,SAASF,GAAQI,SAAS,EALb,KAMjB,IAAIF,SAASF,GAAQK,SAAS,EALb,GAOjBrE,QAAQwC,IAAI,SAAUwB,EAAQ,IAAIE,SAASF,IAC3C,EAAKnI,MAAM2H,gBACNf,kBAAkB,wCAClB9G,MAAK,SAAC+G,GAEH,OADA1C,QAAQwC,IAAI,kCACLE,EAAe4B,WAAWN,MAEpCrI,MAAK,SAACkH,GACH7C,QAAQwC,IAAI,0BAA2BK,MAE1ChG,OAAM,SAACkD,GACJ+D,MAAM/D,O,EAIlBwE,iBAAmB,WACf,IAAIP,EAAS,IAAIC,YAAY,IAC7B,IAAIC,SAASF,GAAQI,SAAS,EAAG,KACjC,EAAKvI,MAAM2H,gBACNf,kBAAkB,wCAClB9G,MAAK,SAAC+G,GACH1C,QAAQwC,IAAI,8BAA+BwB,GAE3C,IAAIQ,EAAS,KAHS,4CAItB,4BAAAC,EAAA,sDACaC,EAAI,EADjB,YACoBA,EAAI,KADxB,gCAEuBhC,EAAe4B,WAAWN,GAFjD,OAEQQ,EAFR,OAGQxE,QAAQwC,IAAI,cAAegC,GAHnC,OAC6BE,GAAQ,GADrC,2DAJsB,0DAUtBC,MAEH9H,OAAM,SAACkD,GACJ+D,MAAM/D,O,EAIlB6E,yBAA2B,WACvB,EAAK/I,MAAM2H,gBACNf,kBAAkB,wCAClB9G,MAAK,SAAC+G,GACH,OAAOA,EAAeC,wBAEzBhH,MAAK,SAAC+G,GACHA,EAAeE,iBACX,6BACA,EAAKiC,0BAET7E,QAAQwC,IAAI,qFAEf3F,OAAM,SAACkD,GACJ+D,MAAM/D,O,EAIlB+E,yBAA2B,WACvB,EAAKjJ,MAAM2H,gBACNf,kBAAkB,wCAClB9G,MAAK,SAAC+G,GAOH,OANA1C,QAAQwC,IAAI,sDAAyBE,GACrCA,EAAeC,qBACfD,EAAeE,iBACX,6BACA,EAAKmC,oBAEFrC,EAAeK,eAEzBpH,MAAK,SAACkH,GACH7C,QAAQwC,IAAI,+CAAkBK,O,EAI1CmC,aAAe,WACX,EAAKnJ,MAAM2H,gBACNf,kBAAkB,iBAClB9G,MAAK,SAAC+G,GAOH,OANA1C,QAAQwC,IAAI,sDAAyBE,GACrCA,EAAeC,qBACfD,EAAeE,iBACX,6BACA,EAAKmC,oBAEFrC,EAAeK,eAEzBpH,MAAK,SAACkH,GACH7C,QAAQwC,IAAI,4EAAiBK,EAAMmB,Y,wDAjIpC,IAAD,OAEN,OAAOrC,KAAK9F,MAAMwH,gBAAgBxD,KAC7BC,UACAnE,MAAK,SAACsE,GACHD,QAAQwC,IAAI,SAAUvC,GAEtB,EAAKyD,SAAS,CAAEH,WAAYtD,OAE/BpD,OAAM,SAACkD,GACJ+D,MAAM/D,Q,+CA4HOkF,GACrB,IAAIC,EAASD,EAAME,OAAOtC,MAAMI,SAAS,GACzCjD,QAAQwC,IAAI,2BAA4B,KAAS0C,K,yCAIlCD,GACf,IAAID,EAAeC,EAAME,OAAOtC,MAChC7C,QAAQwC,IAAI,sBAAuBwC,EAAcA,EAAahB,U,2CA4C5C,IAAD,EAKbrC,KAAKN,MALQ,IAEbxC,UAAaK,EAFA,EAEAA,OAAQe,EAFR,EAEQA,OAAQoC,EAFhB,EAEgBA,eAAgB+C,EAFhC,EAEgCA,kBAC7ChD,EAHa,EAGbA,qBACAc,EAJa,EAIbA,wBAGAhE,GAAUe,IAAWoC,IACrBrC,QAAQwC,IAAI,gCACZJ,KAGAlD,GAAUe,IAAWmF,IACrBpF,QAAQwC,IAAI,oCACZU,O,+BAIE,IAAD,EAC+BvB,KAAKN,MAAhBnC,GADpB,EACGT,gBADH,EACoBS,QAIzB,OAHIA,GACAc,QAAQwC,IAAI,iBAAkBtD,GAG9B,kC,GAhQe6B,aAwWZjB,gBA5XS,SAACjE,GAAW,IAEpBH,EAGRG,EAHA2B,KAAQ9B,MACRmD,EAEAhD,EAFAgD,UAH2B,EAK3BhD,EADAgD,UAEJ,MAAO,CACHnD,QACAwD,OAR2B,EAIdA,OAKbL,YACAoB,OAV2B,EAINA,UAwXWe,GAAzBlB,CAAyCsD,ICtWlDpC,GAAiB,CACnB7F,aAAc8F,EACdhE,OAAQgE,EACR5D,KAAM4D,EACNxC,gBAAiBwC,EACjBoE,aNyLwB,SAAC7F,GACzB,OAAO,SAACnE,EAAUiC,GAAc,IAAD,EAQvBA,IALcC,EAHS,EAEvBC,KACIC,OAAUF,aAOZ8B,EAVqB,EAKvBjE,KACIgE,YAAeD,QAIImG,QAAO,SAACpG,GAC/B,OAAIA,EAAOM,MAAQA,KAcvBnE,EAASyC,KACTzC,EAASP,GAAiB,IAE1BH,IACKgF,IACG,gBACA,CAAER,QAASE,GACX,CACI3B,QAAS,CACLC,cAAc,UAAD,OAAYJ,MAIpC5B,MAAK,SAACC,GAEHP,EAAS4C,EAAoBrC,EAASR,OACtCC,EAASP,GAAiB,OAE7B+B,OAAM,WAEHxB,EAAS6C,KACT7C,EAASP,GAAiB,UMrOpCyK,G,uKACQ,IAAD,EASD5D,KAAKN,MAPL5C,EAFC,EAEDA,gBACA4G,EAHC,EAGDA,aACQG,EAJP,EAIDtG,OACAuG,EALC,EAKDA,WACAxF,EANC,EAMDA,OACAoC,EAPC,EAODA,eAIAlD,EACAwC,KAAKN,MAAMlC,SACXwC,KAAKN,MAAMlC,QAAQuG,KAAI,SAACxG,GACpB,OAAIsG,GAAmBA,EAAgB/F,KAAOP,EAAOM,IAE7C,kBAAC,KAAD,CAAKmG,KAAM,EAAGC,IAAK1G,EAAOM,KACtB,kBAAC,KAAD,CACIqG,MACI,oCACKL,GACGA,EAAgB/F,KACZP,EAAOM,KACP,kBAACsG,GAAA,EAAD,CAAoBC,aAAa,YAEzC,kBAAC,KAAD,CAASC,KAAK,aACd,8BAAO9G,EAAOpD,OAGtBmK,MACI,6BACI,kBAAC,IAAD,CAEIC,MAAO,CAAEC,MAAO,OAChBC,MAAM,SACNC,KAAM,kBAACC,GAAA,EAAD,MACNC,QAAS,kBACLlB,EAAanG,EAAOM,SAKpC0G,MAAO,CAAEM,MAAO,MAGhB,2BACI,wCADJ,IAC2BtH,EAAOM,KAEjC6C,GACGoE,OAAOC,UAAUrE,EAAeS,QAC5B,2BACI,mDACCT,EAAeS,OAI3B7C,GACG,kBAAC,IAAD,CAAQsG,QAASd,GAAjB,0BAShB,kBAAC,KAAD,CAAKE,KAAM,EAAGC,IAAK1G,EAAOM,KACtB,kBAAC,KAAD,CACIqG,MACI,oCACKL,GACGA,EAAgB/F,KAAOP,EAAOM,KAC1B,kBAACsG,GAAA,EAAD,CAAoBC,aAAa,YAEzC,kBAAC,KAAD,CAASC,KAAK,aACd,8BAAO9G,EAAOpD,OAGtBmK,MACI,6BACI,kBAAC,IAAD,CAEIC,MAAO,CAAEC,MAAO,OAChBC,MAAM,SACNC,KACI,kBAACC,GAAA,EAAD,CAAqBP,aAAa,YAEtCQ,QAAS,kBAAMlB,EAAanG,EAAOM,SAI/C0G,MAAO,CAAEM,MAAO,MAGhB,2BACI,wCADJ,IAC2BtH,EAAOM,KAElC,kBAAC,IAAD,CAEI4G,MAAM,SACNC,KAAM,kBAACM,GAAA,EAAD,MACNJ,QAAS,kBACL9H,EAAgB,CAAC,CAAE3C,KAAMoD,EAAOpD,gBAQ5D,OACI,oCACI,kBAAC,KAAD,CAAK8K,OAAQ,IAAKzH,GAAW,IAC7B,kBAAC,KAAD,MACA,kBAAC,KAAD,CAAS0G,MAAM,cACX,kBAAC,IAAD,CACIO,MAAM,SACNC,KAAM,kBAACM,GAAA,EAAD,MACNJ,QAAS,kBAAM9H,QAGvB,kBAAC,GAAD,W,GA1HMsC,aAgIPjB,gBAvJS,SAACjE,GAAW,IAEpBH,EAGRG,EAHA2B,KAAQ9B,MACRN,EAEAS,EAFAT,KAH2B,EAK3BS,EADAgD,UAEJ,MAAO,CACHnD,QACAN,OACA8D,OAT2B,EAIdA,OAMbe,OAV2B,EAINA,OAOrBoC,eAX2B,EAIEA,kBAmJGrB,GAAzBlB,CAAyCyF,ICrJlDvE,GAAiB,CACnB6F,oBPwc+B,SAACC,GAChC,OAAO,SAACzL,EAAUiC,GAAc,IAAD,EASvBA,IANcC,EAHS,EAEvBC,KACIC,OAAUF,aAHS,IAKvBsB,UAAaoB,EALU,EAKVA,OALU,EAKFf,OA+BzB,IAAIjC,EAAS,KACTsF,EAAU,KAEdlH,EAASqF,MACTrF,EAASP,GAAiB,IAE1BH,IACKuC,IAAI,iBAAmB4J,EAAW,IAAK,CACpCpJ,QAAS,CACLC,cAAc,UAAD,OAAYJ,MAGhC5B,MAAK,SAACC,GAYH,SAASmJ,EAAmBE,GACxB,IAAID,EAAeC,EAAME,OAAOtC,MAChC7C,QAAQwC,IACJ,sBACAwC,EACAA,EAAahB,QAKrB,SAASa,EAAyBI,GAC9B,IAAIC,EAASD,EAAME,OAAOtC,MAAMI,SAAS,GACzCjD,QAAQwC,IAAI,2BAA4B,KAAS0C,GACjD,IAAIlB,EAAS,IAAIC,YAAY,IAC7B,IAAIC,SAASF,GAAQI,SAAS,EAAG,KAC7B,KAASc,EACT3C,EACKE,kBACG,wCAEH9G,MAAK,SAAC+G,GAUH,OATA1C,QAAQwC,IACJ,sDACAE,GAEJA,EAAeC,qBACfD,EAAeE,iBACX,6BACAmC,GAEGxC,EAAQE,kBACX,2CAGP9G,MAAK,SAAC+G,GACH1C,QAAQwC,IACJ,8BACAwB,GAGJ,IAAIQ,EAAS,KANS,4CAOtB,4BAAAC,EAAA,sDACaC,EAAI,EADjB,YACoBA,EAAI,KADxB,gCAEuBhC,EAAe4B,WAC1BN,GAHZ,OAEQQ,EAFR,OAKQxE,QAAQwC,IAAI,cAAegC,GALnC,OAC6BE,GAAQ,GADrC,sBAOIrJ,EAASP,GAAiB,IAP9B,6CAPsB,0DAgBtB6J,MAyBRb,MAAM,SArFdzI,EAASsF,MAET1D,EAASrB,EAASR,KAElB4E,QAAQwC,IACJ,SACAvF,EA9BZ,SAA8B8J,GAI1B,IAHA,IAAIC,EAAgBC,OAAOC,KAAKH,GAC5BI,EAAMH,EAActH,OACpB0H,EAAQ,IAAIC,WAAWF,GAClBzC,EAAI,EAAGA,EAAIyC,EAAKzC,IACrB0C,EAAM1C,GAAKsC,EAAcM,WAAW5C,GAExC,OAAO0C,EAAMpD,OAwBLuD,CAAqBtK,EAAOuK,gBAmFhCvH,EACKqC,kBAAkB,wCAClB3G,MAAK,SAAC8L,GAGH,OAFAzH,QAAQwC,IAAI,UAAWiF,IACvBlF,EAAUkF,GACKhF,kBACX,2CAGP9G,MAAK,SAAC+G,GACH,OAAOA,EAAeC,wBAEzBhH,MAAK,SAAC+G,GAOH,OANAA,EAAeE,iBACX,6BACAiC,GAEJ7E,QAAQwC,IAAI,kFAELD,EAAQE,kBACX,2CAGP9G,MAAK,SAAC+G,GACH1C,QAAQwC,IAAI,kCACZ,IAAIwB,EAAS,IAAIC,YAAY,IAW7B,OALA,IAAIC,SAASF,GAAQG,QAAQ,EALX,IAMlB,IAAID,SAASF,GAAQG,QAAQ,EALT,KAMpB,IAAID,SAASF,GAAQI,SAAS,EALb,KAMjB,IAAIF,SAASF,GAAQK,SAAS,EALb,GAOV3B,EAAe4B,WAAWN,MAEpCrI,MAAK,SAACkH,GACH7C,QAAQwC,IAAI,0BAA2BK,MAE1ChG,OAAM,SAACkD,GACJ+D,MAAM/D,SAgEjBlD,OAAM,WAEHxB,EAASuF,MACTvF,EAASP,GAAiB,UO/rBpC4M,G,uKACQ,IAAD,SACoC/F,KAAKN,MAAtCwF,EADH,EACGA,oBAAqBc,EADxB,EACwBA,QACzBC,EAAUjG,KAAKN,MAAMuG,QAAQlC,KAAI,SAACzI,GAClC,OAEI,kBAAC,KAAD,CACI2I,IAAK3I,EAAOwC,GACZoG,MAAO5I,EAAOnB,KAAO,QAAUmB,EAAOwC,GAEtCyG,MAAO,CAAEM,MAAO,KAChBqB,MAAO,yBAAK1F,IAAI,UAAUF,IAAKhF,EAAO6K,QACtChH,UAAU,gBAEV,2BAAI7D,EAAO8K,kBACV,EAAK1G,MAAM2G,eACR,kBAAC,IAAD,CACIzB,QAAS,WACLoB,IACAd,EAAoB5J,EAAOwC,MAHnC,WAchB,OAAO,kBAAC,KAAD,CAAKmH,OAAQ,IAAKgB,O,GA9BX7G,aAkCPjB,gBA/CS,SAACjE,GAIrB,MAAO,CACHH,MAFAG,EADA2B,KAAQ9B,SA6CwBsF,GAAzBlB,CAAyC4H,ICxBlD1G,GAAiB,CACnB7F,aAAc8F,EACdhE,OAAQgE,EACR5D,KAAM4D,EACN7B,YRmGuB,WACvB,OAAO,SAAC/D,EAAUiC,GAGdjC,EAASyB,KACTzB,EAASP,GAAiB,IAJC,IAQTyC,EAEdD,IAHAE,KACIC,OAAUF,aAIlB5C,IACKuC,IAAI,gBAAiB,CAClBQ,QAAS,CACLC,cAAc,UAAD,OAAYJ,MAGhC5B,MAAK,SAACC,GAEHP,EAASuC,EAAwBhC,EAASR,OAC1CC,EAASP,GAAiB,OAE7B+B,OAAM,WAEHxB,EAASwC,KACTxC,EAASP,GAAiB,UQ3HpCmN,G,4MACFpM,MAAQ,CACJqM,QAAS,UACTzC,YAAY,G,EAGhBA,WAAa,WACT,EAAK/B,SAAS,CAAE+B,YAAY,K,EAGhCkC,QAAU,WACN,EAAKjE,SAAS,CAAE+B,YAAY,K,EAGhC0C,YAAc,SAACC,GAEX,EAAK1E,SAAS,CAAEwE,QAASE,EAAExC,O,kEAGV,IAAD,EACsBjE,KAAKN,MAAnCpE,EADQ,EACRA,OAAQI,EADA,EACAA,KAAM+B,EADN,EACMA,YAEtBnC,IACAI,IACA+B,M,+BAGM,IACE8I,EAAYvG,KAAK9F,MAAjBqM,QADH,EAIDvG,KAAKN,MADLjG,KAAQiC,EAHP,EAGOA,KAAMJ,EAHb,EAGaA,OAAQmC,EAHrB,EAGqBA,YAG1B,OACI,oCACI,yBAAK0B,UAAU,qBACX,kBAAC,KAAD,CACI+E,MACI,6BACKxI,GAAQA,EAAKgL,WAAa,IAAMhL,EAAKiL,YAI9C,kBAAC,KAAD,CACI/B,QAAS5E,KAAKwG,YACdI,aAAc,CAACL,GACfM,KAAK,cAEL,kBAAC,KAAKC,KAAN,CACI7C,IAAI,UACJS,KAAM,kBAACqC,GAAA,EAAD,OAFV,cAMA,kBAAC,KAAKD,KAAN,CAAW7C,IAAI,UAAUS,KAAM,kBAACsC,GAAA,EAAD,OAA/B,aAMgB,YAAvBhH,KAAK9F,MAAMqM,QACR,kBAAC,GAAD,CACI/I,QAASC,GAAeA,EAAYD,QACpCsG,WAAY9D,KAAK8D,aAGrB,kBAAC,GAAD,CAASmC,QAAS3K,IAEtB,kBAAC,KAAD,CACI4I,MAAM,UACNW,MAAO,IACPoC,UAAU,QACVC,UAAU,EACVlB,QAAShG,KAAKgG,QACdmB,QAASnH,KAAK9F,MAAM4J,YAEpB,kBAAC,GAAD,CACImC,QAAS3K,EACT+K,eAAe,EACfL,QAAShG,KAAKgG,iB,GA/EpB5G,aAwFPjB,gBA1GS,SAACjE,GAKrB,MAAO,CACHH,MAFAG,EAFA2B,KAAQ9B,MAKRN,KAHAS,EADAT,QAuGgC4F,GAAzBlB,CAAyCmI,ICjGlDjH,GAAiB,CACnB/F,kBAAmBgG,GAGjB8H,G,kLAemB,IRhCWjN,EQiCpBb,EAAsB0G,KAAKN,MAA3BpG,kBACF+N,GRlCsBlN,EQkCW,eRjC3B,IAAIG,KACLiB,IAAIpB,IQiCXkN,GACA/N,EAAkB+N,K,+BAIhB,IAAD,EAC6BrH,KAAKN,MAA/B5D,EADH,EACGA,OAAQwL,EADX,EACWA,cAMhB,OACI,oCACKA,GAAiB,kBAAC,GAAD,MAClB,kBAAC,IAAD,KACKxL,EAAOF,cACJ,kBAAC,IAAD,CAAU2L,KAAK,IAAIC,GAAE,UAAaC,SAAO,IAY7C,kBAAC,GAAD,CAAO3M,KAAK,MACZ,kBAAC,GAAD,CAASA,KAAK,YAMd,kBAAC,IAAD,CACI4M,SAAO,EACPnE,OAAO,MACPW,MAAM,MACNyD,SAAS,8CACTrD,MACI,kBAAC,IAAD,CAAQD,KAAK,WACT,kBAAC,IAAD,CAAMmD,GAAG,KAAT,sB,GA7DdpI,aAuEHjB,gBAtFS,SAACjE,GAKrB,MAAO,CACH4B,OAFA5B,EAFA2B,KAAQC,OAKRwL,cAHApN,EADA0N,SAAYN,iBAmFoBjI,GAAzBlB,CAAyCiJ,I,4BChGzC,IACXvL,KCHWgM,aAAc,gBAEpBvI,GAFmB,SAEQpF,EAFR,GAE6B,IAAZ4N,EAAW,EAAXA,QAEjC,OAAO,6BACA5N,GADP,IAEI4B,OAAQgM,OAIpB,CACIhM,OAAQ,KDPZrC,KEJWoO,cAAa,oBAEnBvI,GAFmB,SAEUpF,EAFV,GAE+B,IAAZ4N,EAAW,EAAXA,QAEnC,OAAO,6BACA5N,GADP,IAEIoB,OAAQwM,OANI,eASnBxI,GATmB,SASOpF,EATP,GAS4B,IAAZ4N,EAAW,EAAXA,QAEhC,OAAO,6BACA5N,GADP,IAEIwB,KAAMoM,OAbM,eAgBnBxI,GAhBmB,SAgBcpF,EAhBd,GAgBmC,IAAZ4N,EAAW,EAAXA,QAEvC,OAAO,6BACA5N,GADP,IAEIuD,YAAaqK,OApBD,eAuBnBxI,GAvBmB,SAuBQpF,EAvBR,GAuB6B,IAAZ4N,EAAW,EAAXA,QAEjC,OADAzJ,QAAQwC,IAAI,oBAAqBiH,GAC1B,6BACA5N,GADP,IAEIuD,YAAaqK,OA3BD,eA8BnBxI,GA9BmB,SA8BUpF,EA9BV,GA8B+B,IAAZ4N,EAAW,EAAXA,QAEnC,OADAzJ,QAAQwC,IAAI,sBAAuBiH,GAC5B,6BACA5N,GADP,IAEIuD,YAAaqK,OAlCD,GAsCxB,CACIxM,OAAQ,GACRI,KAAM,KACN+B,YAAa,OFpCjBP,UGLW2K,cAAa,kBAAC,EAEpBvI,GAFmB,SAEapF,EAFb,GAEkC,IAAZ4N,EAAW,EAAXA,QAEtC,OAAO,6BACA5N,GADP,IAEIqD,OAAQuK,OANI,aAAC,EASpBxI,GATmB,SASSpF,EATT,GAS8B,IAAZ4N,EAAW,EAAXA,QAElC,OAAO,6BACA5N,GADP,IAEIoE,OAAQwJ,OAbI,aAAC,EAgBpBxI,IAhBmB,SAgBiBpF,EAhBjB,GAgBsC,IAAZ4N,EAAW,EAAXA,QAElCpH,EAAmBxG,EAAnBwG,eACR,OAAO,6BACAxG,GADP,IAEIwG,eAAe,6BAAMA,GAAmBoH,QArB5B,aAAC,EAwBpBxI,IAxBmB,SAwB2BpF,EAxB3B,GAwBgD,IAAZ4N,EAAW,EAAXA,QAE5CrE,EAAsBvJ,EAAtBuJ,kBACR,OAAO,6BACAvJ,GADP,IAEIuJ,kBAAkB,6BAAMA,GAAsBqE,QA7BlC,GAiCxB,CACIvK,OAAQ,KACRe,OAAQ,KACRoC,eAAgB,KAChB+C,kBAAmB,OH/BvBmE,SINWC,aAAc,gBAEpBvI,GAFmB,SAEOpF,EAFP,GAE4B,IAAZ4N,EAAW,EAAXA,QAE5BC,EAAQ7N,EAAM8N,eAAeC,QAMjC,OALIH,EACAC,EAAMG,KAAK,GAEXH,EAAMI,QAEH,6BACAjO,GADP,IAEIoN,gBAAiBS,EAAMhK,OACvBiK,eAAgBD,OAI5B,CACIT,eAAe,EACfU,eAAgB,M,UCnBlBI,GAAaC,aAAqB,CACpCC,gBAAgB,EAChBC,mBAAmB,EACnBC,OAAO,IAGIC,gBAAe,CAC1BC,QAAQ,gBAAMC,IACdP,cACAQ,UAAUC,ICHdC,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOA,IACb,kBAAC,GAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.50c8b66b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/elements.b15f934a.svg\";","import { createAction } from 'redux-actions';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport { writeStateToCookie } from '../utils/index';\n\naxios.defaults.baseURL = 'http://45.33.35.232/api';\n\n///////////////////////\n/////// other ////////\n/////////////////////\n\nexport const showAppPreloader = createAction('SHOW_APP_PRELOADER');\n\n///////////////////////\n//// auth actions ////\n/////////////////////\n\nexport const fetchTokenRequest = createAction('FETCH_TOKEN_REQUEST');\nexport const fetchTokenSuccess = createAction('FETCH_TOKEN_SUCCESS');\nexport const fetchTokenFailure = createAction('FETCH_TOKEN_FAILURE');\n\nexport const convertToken = (data) => {\n    return (dispatch) => {\n        // console.log(dispatch, getState, data);\n\n        dispatch(fetchTokenRequest());\n\n        axios\n            .post('oauth/convert-token/', {\n                grant_type: 'convert_token',\n                client_id: 'qxN1hlSy0GbXqE6au6Hd63N4YOWK6WCP2TuXWzaO',\n                backend: 'google-oauth2',\n                token: data,\n            })\n            .then((response) => {\n                // console.log('success', response);\n                writeStateToCookie(\n                    response.data,\n                    'auth_cookie',\n                    response.data.expires_in\n                );\n                // console.log(\n                //     'ReadStateFromCookie',\n                //     readStateFromCookie('auth_cookie')\n                // );\n                dispatch(fetchTokenSuccess(response.data));\n                // dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                // handleAPIError(err, dispatch);\n                dispatch(fetchTokenFailure());\n            });\n    };\n};\n\n///////////////////////\n////// recipes ///////\n/////////////////////\n\nexport const fetchRecipesRequest = createAction('FETCH_RECIPES_REQUEST');\nexport const fetchRecipesSuccess = createAction('FETCH_RECIPES_SUCCESS');\nexport const fetchRecipesFailure = createAction('FETCH_RECIPES_FAILURE');\n\nexport const recipe = () => {\n    return (dispatch) => {\n        // console.log(dispatch, getState, data);\n\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .get('recipe/')\n            .then((response) => {\n                // console.log('success', response);\n                dispatch(fetchRecipesSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                // handleAPIError(err, dispatch);\n                dispatch(fetchRecipesFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\n///////////////////////\n//////// user ////////\n/////////////////////\n\nexport const fetchUserRequest = createAction('FETCH_USER_REQUEST');\nexport const fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nexport const fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const user = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n        axios\n            .get('user/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(fetchUserSuccess(response.data));\n                // dispatch(showAppPreloader(false));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(fetchUserFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const fetchUserDevicesRequest = createAction(\n    'FETCH_USER_DEVICES_REQUEST'\n);\nexport const fetchUserDevicesSuccess = createAction(\n    'FETCH_USER_DEVICES_SUCCESS'\n);\nexport const fetchUserDevicesFailure = createAction(\n    'FETCH_USER_DEVICES_FAILURE'\n);\n\nexport const userDevices = () => {\n    return (dispatch, getState) => {\n        // console.log(dispatch, getState, data);\n\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        axios\n            .get('user/devices/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                // console.log('success', response);\n                dispatch(fetchUserDevicesSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                // handleAPIError(err, dispatch);\n                dispatch(fetchUserDevicesFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const saveDeviceRequest = createAction('SAVE_DEVICE_REQUEST');\nexport const saveDeviceSuccess = createAction('SAVE_DEVICE_SUCCESS');\nexport const saveDeviceFailure = createAction('SAVE_DEVICE_FAILURE');\n\nexport const saveDevice = (device) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n            data: {\n                userDevices: { devices },\n            },\n        } = getState();\n\n        const newDevices = _.uniqBy(\n            [...devices, { name: device.name, uid: device.id }],\n            'uid'\n        );\n\n        if (newDevices.length === devices.length) {\n            return false;\n        }\n\n        dispatch(saveDeviceRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .put(\n                'user/devices/',\n                { devices: newDevices },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                // console.log('success', response);\n                dispatch(saveDeviceSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                // handleAPIError(err, dispatch);\n                dispatch(saveDeviceFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const removeDeviceRequest = createAction('REMOVE_DEVICE_REQUEST');\nexport const removeDeviceSuccess = createAction('REMOVE_DEVICE_SUCCESS');\nexport const removeDeviceFailure = createAction('REMOVE_DEVICE_FAILURE');\n\nexport const removeDevice = (uid) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n            data: {\n                userDevices: { devices },\n            },\n        } = getState();\n\n        const newDevices = devices.filter((device) => {\n            if (device.uid === uid) {\n                return false;\n            }\n            return true;\n        });\n        // _.uniqBy(\n        //     [...devices, { name: device.name, uid: device.id }],\n        //     'uid'\n        // );\n\n        // if (newDevices.length === devices.length) {\n        //     return false;\n        // }\n\n        dispatch(saveDeviceRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .put(\n                'user/devices/',\n                { devices: newDevices },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                // console.log('success', response);\n                dispatch(removeDeviceSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                // handleAPIError(err, dispatch);\n                dispatch(removeDeviceFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\n///////////////////////\n///// Bluetooth //////\n/////////////////////\n\nexport const connectToDeviceRequest = createAction('CONNECT_TO_DEVICE_REQUEST');\nexport const connectToDeviceSuccess = createAction('CONNECT_TO_DEVICE_SUCCESS');\nexport const connectToDeviceFailure = createAction('CONNECT_TO_DEVICE_FAILURE');\n\nexport const connectGattRequest = createAction('CONNECT_GATT_REQUEST');\nexport const connectGattSuccess = createAction('CONNECT_GATT_SUCCESS');\nexport const connectGattFailure = createAction('CONNECT_GATT_FAILURE');\n\nexport const connectToDevice = (newFilters) => {\n    return (dispatch) => {\n        dispatch(connectToDeviceRequest());\n\n        // const {\n        //     auth: {\n        //         cookie: { access_token },\n        //     },\n        // } = getState();\n\n        // const filters = [\n        //     { name: 'BlueNRG' },\n        //     { services: ['5cf052d0-2403-4719-a558-b7e72c48112f'] },\n        // ];\n\n        const filters = newFilters;\n        // console.log('connectToDevice', newFilters);\n        navigator.bluetooth\n            .requestDevice({\n                acceptAllDevices: filters ? undefined : true,\n                filters,\n                optionalServices: [\n                    '5cf052d0-2403-4719-a558-b7e72c48112f',\n                    'battery_service',\n                    0x2a29,\n                    0x180a,\n                ],\n            })\n            .then((device) => {\n                dispatch(connectToDeviceSuccess(device));\n                dispatch(saveDevice(device));\n                // this.setState({ bluetoothDevice: device });\n                // device.addEventListener(\n                //     'gattserverdisconnected',\n                //     this.onDisconnected\n                // );\n                dispatch(connectGattRequest());\n                return device.gatt.connect();\n            })\n            .catch((error) => {\n                dispatch(connectToDeviceFailure());\n                console.error(error);\n            })\n            .then((server) => {\n                console.info('server', server);\n                dispatch(connectGattSuccess(server));\n            })\n            .catch((error) => {\n                dispatch(connectGattFailure());\n                console.error(error);\n            });\n    };\n};\n\nexport const fetchBatteryServiceRequest = createAction(\n    'FETCH_BATTERY_SERVICE_REQUEST'\n);\nexport const fetchBatteryServiceSuccess = createAction(\n    'FETCH_BATTERY_SERVICE_SUCCESS'\n);\nexport const fetchBatteryServiceFailure = createAction(\n    'FETCH_BATTERY_SERVICE_FAILURE'\n);\n\nexport const fetchBatteryCharacteristicSuccess = createAction(\n    'FETCH_BATTERY_CHARACTERISTIC_SUCCESS'\n);\n\nexport const batteryService = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchBatteryServiceRequest());\n\n        const {\n            bluetooth: { device, server, batteryService },\n        } = getState();\n\n        server\n            .getPrimaryService('battery_service')\n            .then((service) => {\n                dispatch(fetchBatteryServiceSuccess());\n                console.log('service', service);\n                return service.getCharacteristic('battery_level');\n            })\n            .catch((error) => {\n                dispatch(fetchBatteryServiceFailure());\n                console.error(error);\n            })\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                if (characteristic) {\n                    characteristic.startNotifications();\n                    characteristic.addEventListener(\n                        'characteristicvaluechanged',\n                        (value) =>\n                            dispatch(\n                                fetchBatteryServiceSuccess({\n                                    level: value,\n                                })\n                            )\n                    );\n                    return characteristic.readValue();\n                }\n                throw new Error('characteristic baterry level not found');\n            })\n            .then((value) => {\n                console.info('Заряд батареи', value.getUint8(0));\n                dispatch(\n                    fetchBatteryServiceSuccess({ level: value.getUint8(0) })\n                );\n            })\n            .catch((error) => {\n                // dispatch(fetchBatteryServiceFailure());\n                console.error(error);\n            });\n    };\n};\n\nexport const fetchDeviceInfoRequest = createAction('FETCH_DEVICE_INFO_REQUEST');\nexport const fetchDeviceInfoSuccess = createAction('FETCH_DEVICE_INFO_SUCCESS');\nexport const fetchDeviceInfoFailure = createAction('FETCH_DEVICE_INFO_FAILURE');\n\nexport const fetchDeviceInfoCharacteristicSuccess = createAction(\n    'FETCH_DEVICE_INFO_CHARACTERISTIC_SUCCESS'\n);\n\nexport const deviceInfoService = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchDeviceInfoRequest());\n\n        const {\n            bluetooth: { device, server, batteryService },\n        } = getState();\n\n        server\n            .getPrimaryService(0x180a)\n            .then((service) => {\n                dispatch(fetchDeviceInfoSuccess());\n                console.log('service', service);\n                return service.getCharacteristic(0x2a29);\n            })\n            .catch((error) => {\n                dispatch(fetchDeviceInfoFailure());\n                console.error(error);\n            })\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                if (characteristic) {\n                    // characteristic.startNotifications();\n                    // characteristic.addEventListener(\n                    //     'characteristicvaluechanged',\n                    //     (value) =>\n                    //         dispatch(\n                    //             fetchDeviceInfoCharacteristicSuccess({\n                    //                 manufacturerName: value,\n                    //             })\n                    //         )\n                    // );\n                    return characteristic.readValue();\n                }\n                throw new Error('characteristic manufacturerName not found');\n            })\n            .then((value) => {\n                console.info('Название производителя', value);\n                dispatch(\n                    fetchDeviceInfoCharacteristicSuccess({\n                        manufacturerName: value.getUint8(0),\n                    })\n                );\n            })\n            .catch((error) => {\n                // dispatch(fetchBatteryServiceFailure());\n                console.error(error);\n            });\n    };\n};\n\nexport const getRecipeByIdRequest = createAction('GET_RECIPE_BY_ID_REQUEST');\nexport const getRecipeByIdSuccess = createAction('GET_RECIPE_BY_ID_SUCCESS');\nexport const getRecipeByIdFailure = createAction('GET_RECIPE_BY_ID_FAILURE');\n\nexport const writeRecipeToDeviceRequest = createAction(\n    'WRITE_RECIPE_TO_DEVICE_REQUEST'\n);\nexport const writeRecipeToDeviceSuccess = createAction(\n    'WRITE_RECIPE_TO_DEVICE_SUCCESS'\n);\nexport const writeRecipeToDeviceFailure = createAction(\n    'WRITE_RECIPE_TO_DEVICE_FAILURE'\n);\n\nexport const writeRecipeToDevice = (recipeId) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n            bluetooth: { server, device },\n            // data: {\n            //     userDevices: { devices },\n            // },\n        } = getState();\n\n        // const newDevices = devices.filter((device) => {\n        //     if (device.uid === uid) {\n        //         return false;\n        //     }\n        //     return true;\n        // });\n        // _.uniqBy(\n        //     [...devices, { name: device.name, uid: device.id }],\n        //     'uid'\n        // );\n\n        // if (newDevices.length === devices.length) {\n        //     return false;\n        // }\n\n        function _base64ToArrayBuffer(base64) {\n            var binary_string = window.atob(base64);\n            var len = binary_string.length;\n            var bytes = new Uint8Array(len);\n            for (var i = 0; i < len; i++) {\n                bytes[i] = binary_string.charCodeAt(i);\n            }\n            return bytes.buffer;\n        }\n\n        let recipe = null;\n        let service = null;\n\n        dispatch(getRecipeByIdRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .get('recipe_binary/' + recipeId + '/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                // console.log('success', response);\n                dispatch(getRecipeByIdSuccess());\n\n                recipe = response.data;\n\n                console.log(\n                    'recipe',\n                    recipe,\n                    _base64ToArrayBuffer(recipe.binary_recipe)\n                );\n\n                function handleLevelChanged(event) {\n                    let batteryLevel = event.target.value;\n                    console.log(\n                        'handleStatusChanged',\n                        batteryLevel,\n                        batteryLevel.buffer\n                    );\n                    // console.log('Event - Battery percentage is ' + batteryLevel);\n                }\n\n                function handleResponseControlMsg(event) {\n                    let status = event.target.value.getUint8(0);\n                    console.log('handleResponseControlMsg', 0x0a === status);\n                    let buffer = new ArrayBuffer(20);\n                    new DataView(buffer).setInt32(0, 6000);\n                    if (0x0a === status) {\n                        service\n                            .getCharacteristic(\n                                '5cf052d5-2403-4719-a558-b7e72c48112f'\n                            )\n                            .then((characteristic) => {\n                                console.log(\n                                    'characteristic Статус',\n                                    characteristic\n                                );\n                                characteristic.startNotifications();\n                                characteristic.addEventListener(\n                                    'characteristicvaluechanged',\n                                    handleLevelChanged\n                                );\n                                return service.getCharacteristic(\n                                    '5cf052d1-2403-4719-a558-b7e72c48112f'\n                                );\n                            })\n                            .then((characteristic) => {\n                                console.log(\n                                    'characteristic Data Receive',\n                                    buffer\n                                );\n\n                                let result = null;\n                                async function sendingData() {\n                                    for (let i = 0; i < 800; i = i + 20) {\n                                        result = await characteristic.writeValue(\n                                            buffer\n                                        );\n                                        console.log('sendingData', result);\n                                    }\n                                    dispatch(showAppPreloader(false));\n                                }\n                                sendingData();\n                            });\n\n                        // service\n                        //     .getCharacteristic(\n                        //         '5cf052d1-2403-4719-a558-b7e72c48112f'\n                        //     )\n                        //     .then((characteristic) => {\n                        //         console.log(\n                        //             'characteristic Data Receive',\n                        //             buffer\n                        //         );\n\n                        //         let result = null;\n                        //         async function sendingData() {\n                        //             for (let i = 0; i < 800; i = i + 20) {\n                        //                 result = await characteristic.writeValue(\n                        //                     buffer\n                        //                 );\n                        //                 console.log('sendingData', result);\n                        //             }\n                        //         }\n                        //         sendingData();\n                        //     });\n                    } else {\n                        alert('Error');\n                    }\n                }\n\n                // connect to service\n                server\n                    .getPrimaryService('5cf052d0-2403-4719-a558-b7e72c48112f')\n                    .then((ser) => {\n                        console.log('service', ser);\n                        service = ser;\n                        return service.getCharacteristic(\n                            '5cf052d4-2403-4719-a558-b7e72c48112f'\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            handleResponseControlMsg\n                        );\n                        console.log('Подписка на Control Transmit');\n\n                        return service.getCharacteristic(\n                            '5cf052d3-2403-4719-a558-b7e72c48112f'\n                        );\n                    })\n                    .then((characteristic) => {\n                        console.log('characteristic Control Receive');\n                        let buffer = new ArrayBuffer(20);\n                        let msgKeyWord8 = 0x0a;\n                        let operationCode = 0xff;\n                        let dataSize32 = 800;\n                        let dataType16 = 0x0006;\n\n                        new DataView(buffer).setInt8(0, msgKeyWord8);\n                        new DataView(buffer).setInt8(1, operationCode);\n                        new DataView(buffer).setInt32(2, dataSize32);\n                        new DataView(buffer).setInt16(6, dataType16);\n\n                        return characteristic.writeValue(buffer);\n                    })\n                    .then((value) => {\n                        console.log('Control Receive value: ', value);\n                    })\n                    .catch((error) => {\n                        alert(error);\n                    });\n                // return service\n                //     .getCharacteristic('5cf052d1-2403-4719-a558-b7e72c48112f')\n                //     .then((characteristic) => {\n                //         console.log(\n                //             'characteristic Data Receive',\n                //             _base64ToArrayBuffer(recipe.binary_recipe)\n                //         );\n                //         // this.setState({ characteristic });\n                //         let result = null;\n                //         async function sendingData() {\n                //             for (let i = 0; i < 800; i = i + 20) {\n                //                 result = await characteristic.writeValue(\n                //                     buffer\n                //                 );\n                //                 console.log('sendingData', result);\n                //             }\n                //         }\n                //         sendingData();\n                //     })\n                //     .catch((error) => {\n                //         console.error('error', error);\n                //     });\n\n                // Send to device\n                // async function saveRecipe() {}\n\n                // this.state.transferService\n                //     .getCharacteristic('5cf052d1-2403-4719-a558-b7e72c48112f')\n                //     .then((characteristic) => {\n                //         console.log('characteristic Data Receive', buffer);\n                //         // this.setState({ characteristic });\n                //         let result = null;\n                //         async function sendingData() {\n                //             for (let i = 0; i < 800; i = i + 20) {\n                //                 result = await characteristic.writeValue(\n                //                     buffer\n                //                 );\n                //                 console.log('sendingData', result);\n                //             }\n                //         }\n                //         sendingData();\n                //     })\n                //     .catch((error) => {\n                //         alert(error);\n                //     });\n\n                // service\n                //     .getCharacteristic('5cf052d4-2403-4719-a558-b7e72c48112f')\n                //     .then((characteristic) => {\n                //         return characteristic.startNotifications();\n                //     })\n                //     .then((characteristic) => {\n                //         characteristic.addEventListener(\n                //             'characteristicvaluechanged',\n                //             this.handleResponseControlMsg\n                //         );\n                //         console.log('Подписка на Control Transmit');\n                //     })\n                //     .catch((error) => {\n                //         alert(error);\n                //     });\n            })\n            .catch(() => {\n                // handleAPIError(err, dispatch);\n                dispatch(getRecipeByIdFailure());\n                dispatch(showAppPreloader(false));\n            });\n\n        // axios\n        //     .put(\n        //         'user/devices/',\n        //         { devices: newDevices },\n        //         {\n        //             headers: {\n        //                 Authorization: `Bearer ${access_token}`,\n        //             },\n        //         }\n        //     )\n        //     .then((response) => {\n        //         // console.log('success', response);\n        //         dispatch(removeDeviceSuccess(response.data));\n        //         dispatch(showAppPreloader(false));\n        //     })\n        //     .catch(() => {\n        //         // handleAPIError(err, dispatch);\n        //         dispatch(removeDeviceFailure());\n        //         dispatch(showAppPreloader(false));\n        //     });\n    };\n};\n","import Cookies from 'universal-cookie';\n\nexport const writeStateToCookie = (state, name, duration) => {\n    const cookies = new Cookies();\n    const expiresDate = new Date();\n    // expiresDate.setDate(expiresDate.getDate() + duration);\n    expiresDate.setSeconds(expiresDate.getSeconds() + duration);\n    cookies.set(name, JSON.stringify(state), {\n        path: '/',\n        expires: expiresDate,\n    });\n};\n\nexport const readStateFromCookie = (name) => {\n    const cookies = new Cookies();\n    return cookies.get(name);\n};\n","import React, { Component } from 'react';\n\nexport default class Loader extends Component {\n    render() {\n        return (\n            <div className=\"loader__container\">\n                <div className=\"loader\">\n                    <div className=\"lds-ripple\">\n                        <div></div>\n                        <div></div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport GoogleLogin from 'react-google-login';\nimport * as actions from '../../actions';\n\n// const responseGoogle = (response, status) => {\n//     console.log(response, status);\n// };\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n};\n\nclass GoogleOauth extends Component {\n    responseGoogleRequest = () => {\n        // console.log(response, 'request');\n    };\n\n    responseGoogleSuccess = (response) => {\n        const { convertToken } = this.props;\n        // console.log(response, 'success');\n        convertToken(response.accessToken);\n    };\n\n    responseGoogleFailure = () => {\n        // console.log(response, 'failure');\n    };\n\n    render() {\n        return (\n            <GoogleLogin\n                // clientId=\"385449723022-vmed4lc1a8a1t3fsat4flujbobsblv01.apps.googleusercontent.com\"\n                clientId=\"205221816405-0lvlolma2t1lvif67t749qee7h9te473.apps.googleusercontent.com\"\n                // redirectUri=\"http://localhost:3000\"\n                buttonText=\"Login\"\n                onSuccess={this.responseGoogleSuccess}\n                onFailure={this.responseGoogleFailure}\n                onRequest={this.responseGoogleRequest}\n                cookiePolicy={'single_host_origin'}\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(GoogleOauth);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport GoogleOauth from '../GoogleOauth/index.jsx';\nimport logo from '../../assets/images/elements.svg';\nimport * as actions from '../../actions';\n\n// const responseGoogle = (response, status) => {\n//     console.log(response, status);\n// };\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n};\n\nclass Login extends Component {\n    render() {\n        const { isLogged } = this.props;\n        if (!isLogged) {\n            // dfsfds\n        }\n        return (\n            <div className=\"App\" path=\"/\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                        App for test BLE <u>Web connect</u>\n                    </p>\n                    {/* <WebBluetooth /> */}\n                    <GoogleOauth />\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Login);\n","import React, { Component } from 'react';\n// import { connectWB } from './service';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        bluetooth,\n        bluetooth: { device, server },\n    } = state;\n    return {\n        token,\n        device,\n        bluetooth,\n        server,\n    };\n};\n\nconst actionCreators = {\n    connectToDevice: actions.connectToDevice,\n    batteryServiceAction: actions.batteryService,\n    deviceInfoServiceAction: actions.deviceInfoService,\n};\n\nclass WebBluetooth extends Component {\n    state = {\n        bluetoothDevice: null,\n        batteryLevelCharacteristic: null,\n        gattServer: null,\n        transferService: null,\n        characteristic: null,\n    };\n\n    connectToDevice = () => {\n        navigator.bluetooth\n            .requestDevice({\n                // acceptAllDevices: true,\n                filters: [\n                    { name: 'BlueNRG' },\n                    // { name: 'JUST-ASUS' },\n                    { services: ['5cf052d0-2403-4719-a558-b7e72c48112f'] },\n                    // { services: ['00001800-0000-1000-8000-00805f9b34fb'] },\n                ],\n                optionalServices: ['5cf052d0-2403-4719-a558-b7e72c48112f'],\n            })\n            .then((device) => {\n                console.log('device', device);\n                this.setState({ bluetoothDevice: device });\n                this.state.bluetoothDevice.addEventListener(\n                    'gattserverdisconnected',\n                    this.onDisconnected\n                );\n            })\n            .catch((error) => {\n                // alert(error);\n                console.log('error', error);\n            });\n    };\n\n    // onDisconnected() {\n    //     // console.log('> Bluetooth Device disconnected');\n    //     // connectDeviceAndCacheCharacteristics().catch((error) => {\n    //     //     console.log('Argh! ' + error);\n    //     // });\n    // }\n\n    // disconnect = () => {\n    //     bluetoothDevice.gatt.disconnect();\n    // };\n\n    connect() {\n        // console.log('Connecting to Bluetooth Device...');\n        return this.state.bluetoothDevice.gatt\n            .connect()\n            .then((server) => {\n                console.log('server', server);\n\n                this.setState({ gattServer: server });\n            })\n            .catch((error) => {\n                alert(error);\n                // console.log('error', error);\n            });\n    }\n\n    serviceConnect = (uuid) => {\n        const { server } = this.props;\n        console.log('serviceConnect', server);\n        server\n            .getPrimaryService(uuid)\n            .then((service) => {\n                console.log('service', service);\n                this.setState({ transferService: service });\n\n                // return service.getCharacteristic(StatusCharacteristicUuid);\n            })\n            .catch((error) => {\n                alert(error);\n                // console.log('error', error);\n            });\n    };\n\n    CtrlRxCharacteristicUuid = () => {\n        let buffer = new ArrayBuffer(20);\n        let msgKeyWord8 = 0x0a;\n        let operationCode = 0xff;\n        let dataSize32 = 800;\n        let dataType16 = 0x0006;\n\n        new DataView(buffer).setInt8(0, msgKeyWord8);\n        new DataView(buffer).setInt8(1, operationCode);\n        new DataView(buffer).setInt32(2, dataSize32);\n        new DataView(buffer).setInt16(6, dataType16);\n\n        console.log('BUFFER', buffer, new DataView(buffer));\n        this.state.transferService\n            .getCharacteristic('5cf052d3-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Control Receive');\n                return characteristic.writeValue(buffer);\n            })\n            .then((value) => {\n                console.log('Control Receive value: ', value);\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    sendDataToDevice = () => {\n        let buffer = new ArrayBuffer(20);\n        new DataView(buffer).setInt32(0, 6000);\n        this.state.transferService\n            .getCharacteristic('5cf052d1-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Data Receive', buffer);\n\n                let result = null;\n                async function sendingData() {\n                    for (let i = 0; i < 800; i = i + 20) {\n                        result = await characteristic.writeValue(buffer);\n                        console.log('sendingData', result);\n                    }\n                }\n                sendingData();\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    CtrlTxCharacteristicUuid = () => {\n        this.state.transferService\n            .getCharacteristic('5cf052d4-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                return characteristic.startNotifications();\n            })\n            .then((characteristic) => {\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleResponseControlMsg\n                );\n                console.log('Подписка на Control Transmit');\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    StatusCharacteristicUuid = () => {\n        this.state.transferService\n            .getCharacteristic('5cf052d5-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                characteristic.startNotifications();\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleLevelChanged\n                );\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('Статус value: ', value);\n            });\n    };\n\n    batteryLevel = () => {\n        this.state.transferService\n            .getCharacteristic('battery_level')\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                characteristic.startNotifications();\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleLevelChanged\n                );\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('Заряд батареи', value.buffer);\n                // console.log('Battery percentage is ' + value.getUint8(0));\n            });\n    };\n\n    handleResponseControlMsg(event) {\n        let status = event.target.value.getUint8(0);\n        console.log('handleResponseControlMsg', 0x0a === status);\n        // console.log('Event - Battery percentage is ' + batteryLevel);\n    }\n\n    handleLevelChanged(event) {\n        let batteryLevel = event.target.value;\n        console.log('handleStatusChanged', batteryLevel, batteryLevel.buffer);\n        // console.log('Event - Battery percentage is ' + batteryLevel);\n    }\n\n    // onReconnectButtonClick = () => {\n    //     if (!bluetoothDevice) {\n    //         return;\n    //     }\n    //     if (bluetoothDevice.gatt.connected) {\n    //         // console.log('> Bluetooth Device is already connected');\n    //         return;\n    //     }\n    //     this.connect()\n    //         .then((server) => {\n    //             // console.log('server', server);\n    //             // Getting Battery Service...\n    //             return server.getPrimaryService('battery_service');\n    //         })\n    //         .then((service) => {\n    //             // console.log('service', service);\n    //             // Getting Battery Level Characteristic...\n    //             return service.getCharacteristic('battery_level');\n    //         })\n    //         .then((characteristic) => {\n    //             // console.log('characteristic', characteristic);\n    //             // Reading Battery Level...\n    //             characteristic.startNotifications();\n    //             // characteristic.addEventListener(\n    //             //     'characteristicvaluechanged',\n    //             //     this.handleLevelChanged\n    //             // );\n    //             return characteristic.readValue();\n    //         })\n    //         .then((value) => {\n    //             alert(value);\n    //             // console.log('value', value);\n    //             // console.log('Battery percentage is ' + value.getUint8(0));\n    //         })\n    //         .catch((error) => {\n    //             alert(error);\n    //             // console.log('error', error);\n    //         });\n    // };\n\n    componentDidUpdate() {\n        const {\n            bluetooth: { device, server, batteryService, deviceInfoService },\n            batteryServiceAction,\n            deviceInfoServiceAction,\n        } = this.props;\n\n        if (device && server && !batteryService) {\n            console.log('Need request battery service');\n            batteryServiceAction();\n        }\n\n        if (device && server && !deviceInfoService) {\n            console.log('Need request device info service');\n            deviceInfoServiceAction();\n        }\n    }\n\n    render() {\n        const { connectToDevice, device } = this.props;\n        if (device) {\n            console.log('Added device: ', device);\n        }\n        return (\n            <div>\n                {/* <p>\n                    {this.state.bluetoothDevice &&\n                        'Подключено устройство: ' +\n                            this.state.bluetoothDevice.name}\n                </p>\n                <button\n                    onClick={() => connectToDevice()}\n                    // className={'bluetooth__connect-btn'}\n                >\n                    Add device\n                </button>\n                <br />\n                <br />\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.connect();\n                    }}\n                >\n                    Подключиться к серверу гатт\n                </button>\n                <br />\n                <br />\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.serviceConnect(\n                            '5cf052d0-2403-4719-a558-b7e72c48112f'\n                        );\n                    }}\n                >\n                    Подключиться к DataTransferService\n                </button>\n\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.serviceConnect('battery_service');\n                    }}\n                >\n                    Подключиться к Baterry service\n                </button>\n                <br />\n                <br />\n                <ul>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.CtrlRxCharacteristicUuid();\n                            }}\n                        >\n                            Отправить control message\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.CtrlTxCharacteristicUuid();\n                            }}\n                        >\n                            Подписаться на ответ control message\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.StatusCharacteristicUuid();\n                            }}\n                        >\n                            Посмотреть сколько принято байт во время передачи\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.batteryLevel();\n                            }}\n                        >\n                            Узнать уровень заряда батареи\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.sendDataToDevice();\n                            }}\n                        >\n                            Send data to device\n                        </button>\n                    </li>\n                </ul> */}\n                {/* <button onClick={this.disconnect}>Дисконект</button>\n                <button onClick={this.onReconnectButtonClick}>Reconect</button> */}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(WebBluetooth);\n","import React, { Component } from 'react';\nimport { Card, Col, Row, Button, Tooltip, Divider, Drawer } from 'antd';\nimport {\n    PlusCircleOutlined,\n    CloseCircleOutlined,\n    CheckOutlined,\n    CheckCircleTwoTone,\n} from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\nimport WebBluetooth from '../WebBluetooth';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data,\n        bluetooth: { device, server, batteryService },\n    } = state;\n    return {\n        token,\n        data,\n        device,\n        server,\n        batteryService,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n    recipe: actions.recipe,\n    user: actions.user,\n    connectToDevice: actions.connectToDevice,\n    removeDevice: actions.removeDevice,\n};\n\nclass Devices extends Component {\n    render() {\n        const {\n            connectToDevice,\n            removeDevice,\n            device: deviceFromStore,\n            showDrawer,\n            server,\n            batteryService,\n            // batteryService: { level },\n        } = this.props;\n        // console.log('Devices', this.props.devices);\n        let devices =\n            this.props.devices &&\n            this.props.devices.map((device) => {\n                if (deviceFromStore && deviceFromStore.id === device.uid) {\n                    return (\n                        <Col span={8} key={device.uid}>\n                            <Card\n                                title={\n                                    <>\n                                        {deviceFromStore &&\n                                            deviceFromStore.id ===\n                                                device.uid && (\n                                                <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                                            )}\n                                        <Divider type=\"vertical\" />\n                                        <span>{device.name}</span>\n                                    </>\n                                }\n                                extra={\n                                    <div>\n                                        <Button\n                                            // type=\"primary\"\n                                            style={{ color: 'red' }}\n                                            shape=\"circle\"\n                                            icon={<CloseCircleOutlined />}\n                                            onClick={() =>\n                                                removeDevice(device.uid)\n                                            }\n                                        />\n                                    </div>\n                                }\n                                style={{ width: 300 }}\n                                // cover={<img alt=\"example\" src={device.image} />}\n                            >\n                                <p>\n                                    <strong>UID:</strong> {device.uid}\n                                </p>\n                                {batteryService &&\n                                    Number.isInteger(batteryService.level) && (\n                                        <p>\n                                            <strong>Battery level: </strong>\n                                            {batteryService.level}\n                                        </p>\n                                    )}\n\n                                {server && (\n                                    <Button onClick={showDrawer}>\n                                        Add recipe to device\n                                    </Button>\n                                )}\n                            </Card>\n                        </Col>\n                    );\n                }\n                return (\n                    <Col span={8} key={device.uid}>\n                        <Card\n                            title={\n                                <>\n                                    {deviceFromStore &&\n                                        deviceFromStore.id === device.uid && (\n                                            <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                                        )}\n                                    <Divider type=\"vertical\" />\n                                    <span>{device.name}</span>\n                                </>\n                            }\n                            extra={\n                                <div>\n                                    <Button\n                                        // type=\"primary\"\n                                        style={{ color: 'red' }}\n                                        shape=\"circle\"\n                                        icon={\n                                            <CloseCircleOutlined twoToneColor=\"#52c41a\" />\n                                        }\n                                        onClick={() => removeDevice(device.uid)}\n                                    />\n                                </div>\n                            }\n                            style={{ width: 300 }}\n                            // cover={<img alt=\"example\" src={device.image} />}\n                        >\n                            <p>\n                                <strong>UID:</strong> {device.uid}\n                            </p>\n                            <Button\n                                // type=\"primary\"\n                                shape=\"circle\"\n                                icon={<PlusCircleOutlined />}\n                                onClick={() =>\n                                    connectToDevice([{ name: device.name }])\n                                }\n                            />\n                        </Card>\n                    </Col>\n                );\n            });\n        // console.log('fsadasd', devices);\n        return (\n            <>\n                <Row gutter={16}>{devices || ''}</Row>\n                <Divider />\n                <Tooltip title=\"Add device\">\n                    <Button\n                        shape=\"circle\"\n                        icon={<PlusCircleOutlined />}\n                        onClick={() => connectToDevice()}\n                    />\n                </Tooltip>\n                <WebBluetooth />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Devices);\n","import React, { Component } from 'react';\nimport { Menu, PageHeader, Card, Col, Row, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    writeRecipeToDevice: actions.writeRecipeToDevice,\n};\n\nclass Recipes extends Component {\n    render() {\n        const { writeRecipeToDevice, onClose } = this.props;\n        let recipes = this.props.recipes.map((recipe) => {\n            return (\n                // <Col span={6} key={recipe.id}>\n                <Card\n                    key={recipe.id}\n                    title={recipe.name + ' - id' + recipe.id + ''}\n                    // extra={<a href=\"#\">More</a>}\n                    style={{ width: 250 }}\n                    cover={<img alt=\"example\" src={recipe.image} />}\n                    className=\"recipe__card\"\n                >\n                    <p>{recipe.description_text}</p>\n                    {this.props.buttonVisible && (\n                        <Button\n                            onClick={() => {\n                                onClose();\n                                writeRecipeToDevice(recipe.id);\n                            }}\n                        >\n                            Add\n                        </Button>\n                    )}\n                </Card>\n                // </Col>\n            );\n        });\n        // console.log('fsadasd', recipes);\n        return <Row gutter={16}>{recipes}</Row>;\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Recipes);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Menu, PageHeader, Card, Col, Row, Drawer } from 'antd';\nimport {\n    // MailOutlined,\n    // AppstoreOutlined,\n    // SettingOutlined,\n    AntDesignOutlined,\n    ReadOutlined,\n} from '@ant-design/icons';\n\nimport './account.scss';\n\nimport * as actions from '../../actions';\nimport Devices from './Devices';\nimport Recipes from './Recipes';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data,\n    } = state;\n    return {\n        token,\n        data,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n    recipe: actions.recipe,\n    user: actions.user,\n    userDevices: actions.userDevices,\n};\n\nclass Account extends Component {\n    state = {\n        current: 'devices',\n        showDrawer: false,\n    };\n\n    showDrawer = () => {\n        this.setState({ showDrawer: true });\n    };\n\n    onClose = () => {\n        this.setState({ showDrawer: false });\n    };\n\n    handleClick = (e) => {\n        // console.log('click ', e);\n        this.setState({ current: e.key });\n    };\n\n    componentDidMount() {\n        const { recipe, user, userDevices } = this.props;\n        // console.log('didMount');\n        recipe();\n        user();\n        userDevices();\n    }\n\n    render() {\n        const { current } = this.state;\n        const {\n            data: { user, recipe, userDevices },\n        } = this.props;\n        // console.log('account', user);\n        return (\n            <>\n                <div className=\"elements__account\">\n                    <PageHeader\n                        title={\n                            <div>\n                                {user && user.first_name + ' ' + user.last_name}\n                            </div>\n                        }\n                    >\n                        <Menu\n                            onClick={this.handleClick}\n                            selectedKeys={[current]}\n                            mode=\"horizontal\"\n                        >\n                            <Menu.Item\n                                key=\"devices\"\n                                icon={<AntDesignOutlined />}\n                            >\n                                My devices\n                            </Menu.Item>\n                            <Menu.Item key=\"recipes\" icon={<ReadOutlined />}>\n                                Recipes\n                            </Menu.Item>\n                        </Menu>\n                        {/* <WebBluetooth /> */}\n                    </PageHeader>\n                    {this.state.current === 'devices' ? (\n                        <Devices\n                            devices={userDevices && userDevices.devices}\n                            showDrawer={this.showDrawer}\n                        />\n                    ) : (\n                        <Recipes recipes={recipe} />\n                    )}\n                    <Drawer\n                        title=\"Recipes\"\n                        width={640}\n                        placement=\"right\"\n                        closable={false}\n                        onClose={this.onClose}\n                        visible={this.state.showDrawer}\n                    >\n                        <Recipes\n                            recipes={recipe}\n                            buttonVisible={true}\n                            onClose={this.onClose}\n                        />\n                    </Drawer>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Account);\n","import React, { Component } from 'react';\nimport { Router, Link, navigate, Redirect } from '@reach/router';\nimport { connect } from 'react-redux';\nimport { Result, Button } from 'antd';\n\nimport * as actions from './actions';\nimport { readStateFromCookie } from './utils';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport Loader from './components/Loader';\n// import WebBluetooth from './WebBluetooth';\n// import GoogleOauth from './components/GoogleOauth';\nimport Login from './components/Login';\nimport Account from './components/Account';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { cookie },\n        settings: { showPreloader },\n    } = state;\n    return {\n        cookie,\n        showPreloader,\n    };\n};\n\nconst actionCreators = {\n    fetchTokenSuccess: actions.fetchTokenSuccess,\n};\n\nclass App extends Component {\n    // connectToDevice = () => {\n    //     navigator.bluetooth\n    //         .requestDevice({\n    //             acceptAllDevices: true,\n    //             optionalServices: ['battery_service'],\n    //         })\n    //         .then((device) => {\n    //             console.log(device);\n    //         })\n    //         .catch((error) => {\n    //             console.log(error);\n    //         });\n    // };\n\n    componentDidMount() {\n        const { fetchTokenSuccess } = this.props;\n        const authCookie = readStateFromCookie('auth_cookie');\n        if (authCookie) {\n            fetchTokenSuccess(authCookie);\n        }\n    }\n\n    render() {\n        const { cookie, showPreloader } = this.props;\n\n        // if (cookie.access_token) {\n        //     // fdfdsf\n        // }\n\n        return (\n            <>\n                {showPreloader && <Loader />}\n                <Router>\n                    {cookie.access_token && (\n                        <Redirect from=\"/\" to={`account`} noThrow />\n                    )}\n\n                    {/* <div className=\"App\" path=\"/\">\n                    <header className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                        <p>\n                            App for test BLE <u>Web connect</u>\n                        </p>\n                        <GoogleOauth />\n                    </header>\n                </div> */}\n                    <Login path=\"/\" />\n                    <Account path=\"account\" />\n                    {/* {cookie.access_token ? (\n                        <Account path=\"/\" isLogged={cookie.access_token} />\n                    ) : (\n                        <Login path=\"/\" isLogged={cookie.access_token} />\n                    )} */}\n                    <Result\n                        default\n                        status=\"404\"\n                        title=\"404\"\n                        subTitle=\"Sorry, the page you visited does not exist.\"\n                        extra={\n                            <Button type=\"primary\">\n                                <Link to=\"/\">Back Home</Link>\n                            </Button>\n                        }\n                    />\n                </Router>\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(App);\n","import auth from './auth';\nimport data from './data';\nimport bluetooth from './bluetooth';\nimport settings from './settings';\n\nexport default {\n    auth,\n    data,\n    bluetooth,\n    settings,\n};\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.fetchTokenSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            return {\n                ...state,\n                cookie: payload,\n            };\n        },\n    },\n    {\n        cookie: {},\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.fetchRecipesSuccess](state, { payload }) {\n            // console.log('fetchRecipesSuccess', payload);\n            return {\n                ...state,\n                recipe: payload,\n            };\n        },\n        [actions.fetchUserSuccess](state, { payload }) {\n            // console.log('fetchUserSuccess', payload);\n            return {\n                ...state,\n                user: payload,\n            };\n        },\n        [actions.fetchUserDevicesSuccess](state, { payload }) {\n            // console.log('fetchUserDevicesSuccess', payload);\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [actions.saveDeviceSuccess](state, { payload }) {\n            console.log('saveDeviceSuccess', payload);\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [actions.removeDeviceSuccess](state, { payload }) {\n            console.log('removeDeviceSuccess', payload);\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n    },\n    {\n        recipe: [],\n        user: null,\n        userDevices: null,\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.connectToDeviceSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            return {\n                ...state,\n                device: payload,\n            };\n        },\n        [actions.connectGattSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            return {\n                ...state,\n                server: payload,\n            };\n        },\n        [actions.fetchBatteryServiceSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            const { batteryService } = state;\n            return {\n                ...state,\n                batteryService: { ...batteryService, ...payload },\n            };\n        },\n        [actions.fetchDeviceInfoCharacteristicSuccess](state, { payload }) {\n            // console.log('fetchTokenSuccess', payload);\n            const { deviceInfoService } = state;\n            return {\n                ...state,\n                deviceInfoService: { ...deviceInfoService, ...payload },\n            };\n        },\n    },\n    {\n        device: null,\n        server: null,\n        batteryService: null,\n        deviceInfoService: null,\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.showAppPreloader](state, { payload }) {\n            // Stack for handle several requests\n            let stack = state.preloaderStack.slice();\n            if (payload) {\n                stack.push(0);\n            } else {\n                stack.shift();\n            }\n            return {\n                ...state,\n                showPreloader: !!stack.length,\n                preloaderStack: stack,\n            };\n        },\n    },\n    {\n        showPreloader: false,\n        preloaderStack: [],\n    }\n);\n","import reducers from './reducers';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nconst middleware = getDefaultMiddleware({\n    immutableCheck: false,\n    serializableCheck: false,\n    thunk: true,\n});\n\nexport default configureStore({\n    reducer: { ...reducers },\n    middleware,\n    devTools: process.env.NODE_ENV !== 'production',\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\n\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}