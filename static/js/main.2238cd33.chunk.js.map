{"version":3,"sources":["assets/images/elements.svg","utils/index.js","servicesAndCharacteristics.js","actions/index.js","components/Loader/index.jsx","components/GoogleOauth/index.jsx","components/FacebookOauth/index.jsx","components/routes/Login/index.jsx","actions/actionUtils.js","actions/bluetooth.js","components/WebBluetooth/index.jsx","components/routes/Account/Device.jsx","components/routes/Account/Devices.jsx","components/routes/Account/Recipes.jsx","components/routes/Account/index.js","components/routes/BluetoothNotAvailable/index.jsx","App.jsx","reducers/index.js","reducers/auth.js","reducers/data.js","reducers/bluetooth.js","reducers/settings.js","store.js","index.jsx"],"names":["module","exports","base64ToArrayBuffer","base64","binary_string","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","buffer","dataTransferService","name","uuid","description","characteristics","dataReceive","properties","dataTransmit","controlReceive","controlTransmit","status","recipeInfoService","recipeListLowPart","recipeListHighPart","recipeListSize","axios","defaults","baseURL","showAppPreloader","createAction","fetchTokenRequest","fetchTokenSuccess","convertToken","dispatch","response","access_token","expires_in","token_type","scope","refresh_token","state","duration","cookies","Cookies","expiresDate","Date","setSeconds","getSeconds","set","JSON","stringify","path","expires","writeStateToCookie","logoutRequest","logoutSuccess","logoutFailure","fetchRecipesRequest","fetchRecipesSuccess","fetchRecipesFailure","recipe","getState","auth","cookie","get","headers","Authorization","then","data","catch","fetchUserSuccess","fetchUserFailure","user","e","navigate","fetchUserDevicesSuccess","fetchUserDevicesFailure","saveDeviceRequest","saveDeviceSuccess","saveDeviceFailure","removeDeviceSuccess","removeDeviceFailure","getBinaryRecipeRequest","getBinaryRecipeSuccess","getBinaryRecipeFailure","Loader","className","Component","actionCreators","actions","GoogleOauth","responseGoogleRequest","responseGoogleSuccess","props","accessToken","responseGoogleFailure","clientId","buttonText","onSuccess","this","onFailure","onRequest","cookiePolicy","connect","token","FacebookOauth","failure","responseFacebook","setState","onResponseFacebook","console","log","appId","autoLoad","fields","callback","textButton","redirectUri","Login","isLogged","src","logo","alt","navigator","userAgent","includes","instance","prepareControlReceiveBuffer","action","ArrayBuffer","dataSize32","DataView","setInt8","setInt32","setInt16","connectToDeviceRequest","connectToDeviceSuccess","connectToDeviceFailure","connectToDevice","newFilters","devicesFromStore","bluetooth","devices","filters","namePrefix","requestDevice","acceptAllDevices","undefined","optionalServices","device","_","find","deviceFromStore","Error","addEventListener","event","onDisconnected","userDevices","newDevices","uniqBy","uid","put","saveDevice","connectToGATTServer","error","message","deviceDisconnected","target","connectGattRequest","connectGattSuccess","connectGattFailure","time","text","toJSON","substr","exponentialBackoff","max","delay","toTry","success","fail","server","setTimeout","gatt","recipeInfo","fetchLogsRequest","fetchLogsSuccess","fetchLogsFailure","fetchBatteryServiceRequest","fetchBatteryServiceSuccess","fetchBatteryServiceFailure","fetchDeviceInfoRequest","fetchDeviceInfoSuccess","fetchDeviceInfoFailure","fetchDeviceInfoCharacteristicSuccess","fetchRecipeInfoRequest","fetchRecipeInfoSuccess","fetchRecipeInfoFailure","service","getPrimaryService","ser","getCharacteristic","characteristic","readValue","value","recipeByteTransfered","imgByteTransfered","speedOfDataTransfer","keyI","characteristicWrite","writeRecipeToDevice","recipeBinary","handleControlReceive","getUint8","operationCode","dataType","getUint16","startNotifications","oncharacteristicvaluechanged","handleStatusTransferData","sendingData","alert","handleStatusTransferDataImg","sendingDataImg","Utils","bufferImg","byteLength","Int8Array","writeValue","warn","a","startTransfer","now","sum","slice","endTransfer","Promise","resolve","batteryServiceAction","handleBatteryLevelChange","level","deviceInfoServiceAction","manufacturerName","WebBluetooth","bluetoothDevice","batteryLevelCharacteristic","gattServer","transferService","services","serviceConnect","CtrlRxCharacteristicUuid","sendDataToDevice","result","CtrlTxCharacteristicUuid","handleResponseControlMsg","StatusCharacteristicUuid","handleLevelChanged","batteryLevel","prevProps","batteryService","binary_recipe","Device","componentDidUpdate","connectedDevice","GATTDisconnected","Modal","title","content","connected","removeDevice","showDrawer","byteTransfered","GATTConnected","connectionRequest","deviceState","logsResult","logs","CheckCircleTwoTone","twoToneColor","LoadingOutlined","CloseCircleOutlined","type","extra","style","color","shape","icon","onClick","width","toFixed","Number","isInteger","percent","size","filter","disconnectGattServer","disconnect","Devices","connectedDevices","map","key","gutter","PlusCircleOutlined","bluetoothActions","getBinaryRecipe","recipeId","Recipes","onClose","recipes","id","cover","image","buttonVisible","logout","remove","Account","current","handleClick","first_name","last_name","selectedKeys","mode","Item","AntDesignOutlined","ReadOutlined","placement","closable","visible","BluetoothNotAvailable","href","App","authCookie","showPreloader","from","to","noThrow","default","subTitle","settings","handleActions","payload","binary_image_r400x400","isFinite","Object","assign","push","deviceInfoService","stack","preloaderStack","shift","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","thunk","configureStore","reducer","reducers","devTools","process","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.2238cd33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/elements.b15f934a.svg\";","import Cookies from 'universal-cookie';\n\nexport const writeStateToCookie = (state, name, duration) => {\n    const cookies = new Cookies();\n    const expiresDate = new Date();\n    // expiresDate.setDate(expiresDate.getDate() + duration);\n    expiresDate.setSeconds(expiresDate.getSeconds() + duration);\n    cookies.set(name, JSON.stringify(state), {\n        path: '/',\n        expires: expiresDate,\n    });\n};\n\nexport const readStateFromCookie = (name) => {\n    const cookies = new Cookies();\n    return cookies.get(name);\n};\n\nexport const removeStateFromCookie = (name) => {\n    const cookies = new Cookies();\n    return cookies.remove(name);\n};\n\nexport const base64ToArrayBuffer = (base64) => {\n    var binary_string = window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n    for (var i = 0; i < len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n};\n","export default [\n    {\n        name: 'Device Information Service',\n        uuid: 0x180a,\n        description: 'Exposes manufacturer and/or information about a device',\n        characteristics: [\n            {\n                name: 'Manufacturer Name String',\n                uuid: 0x2a29,\n                description: 'Represent the name of the manufacturer of device',\n                properties: ['read'],\n            },\n        ],\n    },\n    {\n        name: 'Battery Service',\n        uuid: 0x180f,\n        description:\n            'Exposes the Battery Level of a single battery or set of batteries in a device',\n        characteristics: [\n            {\n                name: 'Battery Level',\n                uuid: 0x2a19,\n                description: 'Represent level of the battery in a device',\n                properties: ['read', 'notify'],\n            },\n        ],\n    },\n    {\n        name: 'Data Transfer Service',\n        uuid: '5cf052d0-2403-4719-a558-b7e72c48112f',\n        description: 'Provide data receive and transmitting of a data',\n        characteristics: [\n            {\n                name: 'Data Receive',\n                uuid: '5cf052d1-2403-4719-a558-b7e72c48112f',\n                description: 'Receive data channel',\n                properties: ['write'],\n            },\n            {\n                name: 'Data Transmit',\n                uuid: '5cf052d2-2403-4719-a558-b7e72c48112f',\n                description: 'Transmit data channel',\n                properties: ['read', 'notify'],\n            },\n            {\n                name: 'Control Receive',\n                uuid: '5cf052d3-2403-4719-a558-b7e72c48112f',\n                description: 'Control data receive channel',\n                properties: ['write'],\n            },\n            {\n                name: 'Control Transmit',\n                uuid: '5cf052d4-2403-4719-a558-b7e72c48112f',\n                description: 'Control data transmit channel',\n                properties: ['read', 'notify'],\n            },\n            {\n                name: 'Status',\n                uuid: '5cf052d5-2403-4719-a558-b7e72c48112f',\n                description: 'Expose status of transfer data',\n                properties: ['write', 'read', 'notify'],\n            },\n        ],\n    },\n];\n\nexport const deviceInformationService = {\n    name: 'Device Information Service',\n    uuid: 0x180a,\n    description: 'Exposes manufacturer and/or information about a device',\n    characteristics: [\n        {\n            name: 'Manufacturer Name String',\n            uuid: 0x2a29,\n            description: 'Represent the name of the manufacturer of device',\n            properties: ['read'],\n        },\n    ],\n};\n\nexport const batteryService = {\n    name: 'Battery Service',\n    uuid: 0x180f,\n    description:\n        'Exposes the Battery Level of a single battery or set of batteries in a device',\n    characteristics: [\n        {\n            name: 'Battery Level',\n            uuid: 0x2a19,\n            description: 'Represent level of the battery in a device',\n            properties: ['read', 'notify'],\n        },\n    ],\n};\n\nexport const dataTransferService = {\n    name: 'Data Transfer Service',\n    uuid: '5cf052d0-2403-4719-a558-b7e72c48112f',\n    description: 'Provide data receive and transmitting of a data',\n    characteristics: {\n        dataReceive: {\n            name: 'Data Receive',\n            uuid: '5cf052d1-2403-4719-a558-b7e72c48112f',\n            description: 'Receive data channel',\n            properties: ['write'],\n        },\n        dataTransmit: {\n            name: 'Data Transmit',\n            uuid: '5cf052d2-2403-4719-a558-b7e72c48112f',\n            description: 'Transmit data channel',\n            properties: ['read', 'notify'],\n        },\n        controlReceive: {\n            name: 'Control Receive',\n            uuid: '5cf052d3-2403-4719-a558-b7e72c48112f',\n            description: 'Control data receive channel',\n            properties: ['write'],\n        },\n        controlTransmit: {\n            name: 'Control Transmit',\n            uuid: '5cf052d4-2403-4719-a558-b7e72c48112f',\n            description: 'Control data transmit channel',\n            properties: ['read', 'notify'],\n        },\n        status: {\n            name: 'Status',\n            uuid: '5cf052d5-2403-4719-a558-b7e72c48112f',\n            description: 'Expose status of transfer data',\n            properties: ['write', 'read', 'notify'],\n        },\n    },\n};\n\nexport const recipeInfoService = {\n    name: 'Recipe Info Service',\n    uuid: '32dd23d0-d223-4462-34ad-434ec288113c',\n    description: '',\n    characteristics: {\n        recipeListLowPart: {\n            name: 'Recipe List Low Part',\n            uuid: '32dd23d1-d223-4462-34ad-434ec288113c',\n            description: 'Exporse first 5 slots of recipe list',\n            properties: ['read', 'notify'],\n        },\n        recipeListHighPart: {\n            name: 'Recipe List High Part',\n            uuid: '32dd23d2-d223-4462-34ad-434ec288113c',\n            description: 'Exporse last 5 slots of recipe list',\n            properties: ['read', 'notify'],\n        },\n        recipeListSize: {\n            name: 'Recipe List Size',\n            uuid: '32dd23d3-d223-4462-34ad-434ec288113c',\n            description: 'Exporse size of recipe list',\n            properties: ['read'],\n        },\n    },\n};\n\nexport const commandService = {\n    name: 'Command Service',\n    uuid: 'dad54500-2ee3-6213-624a-aeca328f132a',\n    description: '',\n    characteristics: {\n        command: {\n            name: 'Command',\n            uuid: 'dad54501-2ee3-6213-624a-aeca328f132a',\n            description: '',\n            properties: ['write'],\n        },\n        commandStatus: {\n            name: 'Command Status',\n            uuid: 'dad54502-2ee3-6213-624a-aeca328f132a',\n            description: '',\n            properties: ['notify'],\n        },\n    },\n};\n","import { createAction } from 'redux-actions';\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\nimport _ from 'lodash';\nimport { writeStateToCookie, removeStateFromCookie } from '../utils';\nimport { dataTransferService } from '../servicesAndCharacteristics';\n\naxios.defaults.baseURL = 'https://portal.pipe.today/api';\n// axios.defaults.withCredentials = false;\n\n///////////////////////\n/////// other ////////\n/////////////////////\n\nexport const showAppPreloader = createAction('SHOW_APP_PRELOADER');\nexport const selectRecipe = createAction('SELECT_RECIPE');\n\n///////////////////////\n//// auth actions ////\n/////////////////////\n\nexport const fetchTokenRequest = createAction('FETCH_TOKEN_REQUEST');\nexport const fetchTokenSuccess = createAction('FETCH_TOKEN_SUCCESS');\nexport const fetchTokenFailure = createAction('FETCH_TOKEN_FAILURE');\n\nexport const convertToken = () => {\n    // export const convertToken = (data, type, appId) => {\n    return (dispatch) => {\n        dispatch(fetchTokenRequest());\n\n        const response = {\n            access_token: 'vw1gWk6snMInNV1CIFENDCOiqn3RGe',\n            expires_in: 2592000,\n            token_type: 'Bearer',\n            scope: 'read write',\n            refresh_token: 'J0QXCv3XLzs22fbJNell77WzxjoaPV',\n        };\n\n        writeStateToCookie(response, 'auth_cookie', response.expires_in);\n\n        dispatch(fetchTokenSuccess(response));\n\n        // axios\n        //     .post('oauth/convert-token/', {\n        //         grant_type: 'convert_token',\n        //         client_id: appId,\n        //         backend: type,\n        //         token: data,\n        //     })\n        //     .then((response) => {\n        //         writeStateToCookie(\n        //             response.data,\n        //             'auth_cookie',\n        //             response.data.expires_in\n        //         );\n        //         dispatch(fetchTokenSuccess(response.data));\n        //     })\n        //     .catch(() => {\n        //         dispatch(fetchTokenFailure());\n        //     });\n    };\n};\n\nexport const logoutRequest = createAction('LOGOUT_REQUEST');\nexport const logoutSuccess = createAction('LOGOUT_SUCCESS');\nexport const logoutFailure = createAction('LOGOUT_FAILURE');\n\nexport const logout = () => {\n    return (dispatch) => {\n        dispatch(logoutRequest());\n        try {\n            removeStateFromCookie('auth_cookie');\n            dispatch(logoutSuccess());\n        } catch (e) {\n            dispatch(logoutFailure());\n            console.error('logout', e.message);\n        }\n    };\n};\n\n///////////////////////\n////// recipes ///////\n/////////////////////\n\nexport const fetchRecipesRequest = createAction('FETCH_RECIPES_REQUEST');\nexport const fetchRecipesSuccess = createAction('FETCH_RECIPES_SUCCESS');\nexport const fetchRecipesFailure = createAction('FETCH_RECIPES_FAILURE');\n\nexport const recipe = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        axios\n            .get('recipe/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(fetchRecipesSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(fetchRecipesFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\n///////////////////////\n//////// user ////////\n/////////////////////\n\nexport const fetchUserRequest = createAction('FETCH_USER_REQUEST');\nexport const fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nexport const fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const user = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n        axios\n            .get('user/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(fetchUserSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch((e) => {\n                dispatch(fetchUserFailure());\n                dispatch(showAppPreloader(false));\n\n                switch (e.response.status) {\n                    case 403:\n                        navigate('/');\n                        break;\n                    default:\n                        break;\n                }\n            });\n    };\n};\n\nexport const fetchUserDevicesRequest = createAction(\n    'FETCH_USER_DEVICES_REQUEST'\n);\nexport const fetchUserDevicesSuccess = createAction(\n    'FETCH_USER_DEVICES_SUCCESS'\n);\nexport const fetchUserDevicesFailure = createAction(\n    'FETCH_USER_DEVICES_FAILURE'\n);\n\nexport const userDevices = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        axios\n            .get('user/devices/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(fetchUserDevicesSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(fetchUserDevicesFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const saveDeviceRequest = createAction('SAVE_DEVICE_REQUEST');\nexport const saveDeviceSuccess = createAction('SAVE_DEVICE_SUCCESS');\nexport const saveDeviceFailure = createAction('SAVE_DEVICE_FAILURE');\n\nexport const saveDevice = (device) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n            data: {\n                userDevices: { devices },\n            },\n        } = getState();\n\n        const newDevices = _.uniqBy(\n            [...devices, { name: device.name, uid: device.name }],\n            'name'\n        );\n\n        if (newDevices.length === devices.length) {\n            return false;\n        }\n\n        dispatch(saveDeviceRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .put(\n                'user/devices/',\n                { devices: newDevices },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                dispatch(saveDeviceSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(saveDeviceFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const removeDeviceRequest = createAction('REMOVE_DEVICE_REQUEST');\nexport const removeDeviceSuccess = createAction('REMOVE_DEVICE_SUCCESS');\nexport const removeDeviceFailure = createAction('REMOVE_DEVICE_FAILURE');\n\nexport const removeDevice = (uid) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n            data: {\n                userDevices: { devices },\n            },\n        } = getState();\n\n        const newDevices = devices.filter((device) => {\n            if (device.uid === uid) {\n                return false;\n            }\n            return true;\n        });\n\n        dispatch(saveDeviceRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .put(\n                'user/devices/',\n                { devices: newDevices },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                dispatch(removeDeviceSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(removeDeviceFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const getBinaryRecipeRequest = createAction('GET_BINARY_RECIPE_REQUEST');\nexport const getBinaryRecipeSuccess = createAction('GET_BINARY_RECIPE_SUCCESS');\nexport const getBinaryRecipeFailure = createAction('GET_BINARY_RECIPE_FAILURE');\n\nexport const getBinaryRecipe = (recipeId) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        console.log('services', dataTransferService);\n\n        dispatch(getBinaryRecipeRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .get('recipe_binary/' + recipeId + '/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(getBinaryRecipeSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(getBinaryRecipeFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\n///////////////////////\n//////// logs ////////\n/////////////////////\n\nexport const postLogsRequest = createAction('POST_LOGS_REQUEST');\nexport const postLogsSuccess = createAction('POST_LOGS_SUCCESS');\nexport const postLogsFailure = createAction('POST_LOGS_FAILURE');\n\nexport const addHistory = (base64String, deviceUID) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        // console.log('addHistory');\n\n        dispatch(postLogsRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .post(\n                '/history_usage/add_history/',\n                {\n                    history_string: base64String,\n                    device_uid: deviceUID,\n                },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                dispatch(postLogsSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(postLogsFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n","import React, { Component } from 'react';\n\nexport default class Loader extends Component {\n    render() {\n        return (\n            <div className=\"loader__container\">\n                <div className=\"loader\">\n                    <div className=\"lds-ripple\">\n                        <div></div>\n                        <div></div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport GoogleLogin from 'react-google-login';\nimport * as actions from '../../actions';\n\n// const responseGoogle = (response, status) => {\n//     console.log(response, status);\n// };\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n};\n\nclass GoogleOauth extends Component {\n    responseGoogleRequest = () => {\n        // console.log(response, 'request');\n    };\n\n    responseGoogleSuccess = (response) => {\n        const { convertToken } = this.props;\n        convertToken(\n            response.accessToken,\n            'google-oauth2',\n            'h19R0p6UGmYKzuc4fg1uaPlHwXPOc8GktswMZEdu'\n        );\n    };\n\n    responseGoogleFailure = () => {\n        // console.log(response, 'failure');\n    };\n\n    render() {\n        return (\n            <GoogleLogin\n                // clientId=\"385449723022-vmed4lc1a8a1t3fsat4flujbobsblv01.apps.googleusercontent.com\"\n                clientId=\"205221816405-0lvlolma2t1lvif67t749qee7h9te473.apps.googleusercontent.com\"\n                // redirectUri=\"http://localhost:3000\"\n                buttonText=\"Login\"\n                onSuccess={this.responseGoogleSuccess}\n                onFailure={this.responseGoogleFailure}\n                onRequest={this.responseGoogleRequest}\n                cookiePolicy={'single_host_origin'}\n                className=\"google-oauth-btn\"\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(GoogleOauth);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport FacebookLogin from 'react-facebook-login';\nimport * as actions from '../../actions';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n};\n\n// window.onResponseFacebook = (response) => {\n//     console.log('response Facebook', response);\n// };\n\nclass FacebookOauth extends Component {\n    state = {\n        response: null,\n        failure: null,\n    };\n\n    responseFacebook = (response) => {\n        const { convertToken } = this.props;\n        this.setState({ response });\n        convertToken(\n            response.accessToken,\n            'facebook',\n            'h19R0p6UGmYKzuc4fg1uaPlHwXPOc8GktswMZEdu'\n        );\n    };\n\n    onFailure = (failure) => {\n        this.setState({ failure });\n    };\n\n    onResponseFacebook = (response) => {\n        console.log('response Facebook', response);\n    };\n\n    componentDidMount() {\n        // console.log('facebook', window.FB);\n        // window.FB.getLoginStatus(this.onResponseFacebook);\n        // window.FB.login();\n        const { convertToken } = this.props;\n        convertToken();\n    }\n\n    render() {\n        // console.log('Facebook: ', window.FB);\n        return (\n            <>\n                <FacebookLogin\n                    appId=\"369580627566109\"\n                    autoLoad={false}\n                    fields=\"name,email,picture\"\n                    callback={this.responseFacebook}\n                    onFailure={this.onFailure}\n                    textButton=\"Login\"\n                    // isMobile={false}\n                    redirectUri={'https://portal.pipe.today/'}\n                    // disableMobileRedirect={true}\n                />\n                {/* <FacebookLogin\n                    appId=\"3315968511865055\"\n                    autoLoad={true}\n                    fields=\"name,email,picture\"\n                    callback={this.responseFacebook}\n                    onFailure={this.onFailure}\n                    textButton=\"Login\"\n                    // isMobile={false}\n                    // redirectUri={'https://sashakrauzer.github.io/'}\n                    disableMobileRedirect={true}\n                /> */}\n                {/* <div\n                    className=\"fb-login-button\"\n                    data-size=\"large\"\n                    data-button-type=\"login_with\"\n                    data-layout=\"default\"\n                    data-auto-logout-link=\"false\"\n                    data-use-continue-as=\"false\"\n                    data-width=\"\"\n                    // data-onlogin={this.onResponseFacebook}\n                    data-onlogin=\"onResponseFacebook();\"\n                ></div> */}\n                {/* <div>{JSON.stringify(this.state.response)}</div> */}\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(FacebookOauth);\n","import React, { Component } from 'react';\n\nimport GoogleOauth from '../../GoogleOauth/index.jsx';\nimport FacebookOauth from '../../FacebookOauth/index.jsx';\nimport logo from '../../../assets/images/elements.svg';\n\nclass Login extends Component {\n    render() {\n        // var isOpera =\n        //     (!!window.opr && !!window.opr.addons) ||\n        //     !!window.opera ||\n        //     navigator.userAgent.indexOf(' OPR/') >= 0;\n\n        // // Firefox 1.0+\n        // var isFirefox = typeof InstallTrigger !== 'undefined';\n\n        // // Safari 3.0+ \"[object HTMLElementConstructor]\"\n        // var isSafari =\n        //     /constructor/i.test(window.HTMLElement) ||\n        //     (function (p) {\n        //         return p.toString() === '[object SafariRemoteNotification]';\n        //     })(\n        //         !window['safari'] ||\n        //             (typeof safari !== 'undefined' &&\n        //                 window.safari.pushNotification)\n        //     );\n\n        // // Internet Explorer 6-11\n        // var isIE = /*@cc_on!@*/ false || !!document.documentMode;\n\n        // // Edge 20+\n        // var isEdge = !isIE && !!window.StyleMedia;\n\n        // // Chrome 1 - 79\n        // var isChrome =\n        //     !!window.chrome &&\n        //     (!!window.chrome.webstore || !!window.chrome.runtime);\n\n        // // Edge (based on chromium) detection\n        // var isEdgeChromium =\n        //     isChrome && navigator.userAgent.indexOf('Edg') !== -1;\n\n        // // Blink engine detection\n        // var isBlink = (isChrome || isOpera) && !!window.CSS;\n\n        // var output = 'Detecting browsers by ducktyping:<hr>';\n        // output += 'isFirefox: ' + isFirefox + '<br>';\n        // output += 'isChrome: ' + isChrome + '<br>';\n        // output += 'isSafari: ' + isSafari + '<br>';\n        // output += 'isOpera: ' + isOpera + '<br>';\n        // output += 'isIE: ' + isIE + '<br>';\n        // output += 'isEdge: ' + isEdge + '<br>';\n        // output += 'isEdgeChromium: ' + isEdgeChromium + '<br>';\n        // output += 'isBlink: ' + isBlink + '<br>';\n        // output += 'User Agent: ' + navigator.userAgent + '<br>';\n        const { isLogged } = this.props;\n        if (!isLogged) {\n            // dfsfds\n        }\n        return (\n            <div className=\"App\" path=\"/\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <div className=\"login-btn-wrap\">\n                        {!navigator.userAgent.includes('cider') ? (\n                            <GoogleOauth />\n                        ) : null}\n\n                        <FacebookOauth />\n                    </div>\n                    {/* <div dangerouslySetInnerHTML={{ __html: output }} /> */}\n                    {/* {output} */}\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","class ActionUtils {\n    prepareControlReceiveBuffer = (action, data) => {\n        if (action === 'writeRecipeRequest' && data.length) {\n            let buffer = new ArrayBuffer(20);\n            let msgKeyWord8 = 0x0a;\n            let operationCode = 0xff;\n            // let dataSize32 = 0x2334;\n            let dataSize32 = data.length;\n            let dataType16 = 0x6;\n\n            new DataView(buffer).setInt8(0, msgKeyWord8, true);\n            new DataView(buffer).setInt8(1, operationCode, true);\n            new DataView(buffer).setInt32(2, dataSize32, true);\n            new DataView(buffer).setInt16(6, dataType16, true);\n            return buffer;\n        }\n        if (action === 'writeImgRequest' && data.length) {\n            let buffer = new ArrayBuffer(20);\n            let msgKeyWord8 = 0x0a;\n            let operationCode = 0xff;\n            // let dataSize32 = 0x2334;\n            let dataSize32 = data.length;\n            let dataType16 = 0x2;\n\n            new DataView(buffer).setInt8(0, msgKeyWord8, true);\n            new DataView(buffer).setInt8(1, operationCode, true);\n            new DataView(buffer).setInt32(2, dataSize32, true);\n            new DataView(buffer).setInt16(6, dataType16, true);\n            return buffer;\n        }\n        if (action === 'fetchLogs') {\n            let buffer = new ArrayBuffer(20);\n            let msgKeyWord8 = 0x0e;\n            let operationCode = 0x00;\n            // let dataSize32 = 0x2334;\n            let dataSize32 = 0;\n            let dataType16 = 0x7;\n\n            new DataView(buffer).setInt8(0, msgKeyWord8, true);\n            new DataView(buffer).setInt8(1, operationCode, true);\n            new DataView(buffer).setInt32(2, dataSize32, true);\n            new DataView(buffer).setInt16(6, dataType16, true);\n            return buffer;\n        }\n        if (action === 'fetchLogsReady') {\n            let buffer = new ArrayBuffer(20);\n            let msgKeyWord8 = 0x0a;\n            let operationCode = 0x00;\n            // let dataSize32 = 0x2334;\n            let dataSize32 = 0;\n            let dataType16 = 0x7;\n\n            new DataView(buffer).setInt8(0, msgKeyWord8, true);\n            new DataView(buffer).setInt8(1, operationCode, true);\n            new DataView(buffer).setInt32(2, dataSize32, true);\n            new DataView(buffer).setInt16(6, dataType16, true);\n            return buffer;\n        }\n    };\n}\n\nconst instance = new ActionUtils();\nexport default instance;\n","import { createAction } from 'redux-actions';\nimport axios from 'axios';\n// import { navigate } from '@reach/router';\nimport _ from 'lodash';\n// import { writeStateToCookie } from '../utils/index';\nimport {\n    dataTransferService,\n    recipeInfoService,\n} from '../servicesAndCharacteristics';\n// import Helper from './actionHelper';\nimport Utils from './actionUtils';\n\nimport { saveDevice, showAppPreloader, addHistory } from './index';\n\naxios.defaults.baseURL = 'https://portal.pipe.today/api';\n\n// console.log(Helper.name);\n\n///////////////////////\n///// Bluetooth //////\n/////////////////////\n\nexport const connectToDeviceRequest = createAction('CONNECT_TO_DEVICE_REQUEST');\nexport const connectToDeviceSuccess = createAction('CONNECT_TO_DEVICE_SUCCESS');\nexport const connectToDeviceFailure = createAction('CONNECT_TO_DEVICE_FAILURE');\n\n// Подключение к выбраному устройству\nexport const connectToDevice = (newFilters) => {\n    return (dispatch, getState) => {\n        const {\n            bluetooth: { devices: devicesFromStore },\n        } = getState();\n\n        // alert('action connectToDevice');\n\n        dispatch(connectToDeviceRequest());\n\n        // const filters = newFilters;\n        const filters = newFilters || [{ namePrefix: 'Pipe' }];\n        // const filters = newFilters || [{ namePrefix: 'Blue' }];\n        // const filters = newFilters;\n        navigator.bluetooth\n            .requestDevice({\n                acceptAllDevices: filters ? undefined : true,\n                filters,\n                optionalServices: [\n                    dataTransferService.uuid,\n                    recipeInfoService.uuid,\n                    'battery_service',\n                    0x2a29,\n                    0x180a,\n                ],\n            })\n            .then((device) => {\n                // alert('first then action connectToDevice');\n                if (\n                    _.find(\n                        devicesFromStore,\n                        (deviceFromStore) =>\n                            deviceFromStore.name === device.name\n                    )\n                ) {\n                    // alert('first then error action connectToDevice');\n                    throw new Error('device has already been added');\n                } else {\n                    console.log(\n                        '%cconnected device:',\n                        'color:green; font-size:2em; border-top:10px solid red'\n                    );\n                    console.log(device);\n\n                    device.addEventListener('gattserverdisconnected', (event) =>\n                        dispatch(onDisconnected(event))\n                    );\n\n                    dispatch(connectToDeviceSuccess(device));\n                    dispatch(saveDevice(device));\n                    dispatch(connectToGATTServer(device));\n                }\n            })\n            .catch((error = { message: 'connectToDeviceFailure' }) => {\n                console.error(error.message);\n                dispatch(connectToDeviceFailure());\n            });\n    };\n};\n\nexport const deviceDisconnected = createAction('DEVICE_DISCONNECTED');\nexport const failedToReconnect = createAction('FAILED_TO_RECONNECT');\nexport const deviceConnecting = createAction('DEVICE_CONNECTING');\nexport const deviceReconnected = createAction('DEVICE_RECONNECTED');\n\n// Обработчик события отключения устройства\nexport const onDisconnected = (event) => {\n    return (dispatch) => {\n        dispatch(deviceDisconnected());\n\n        const device = event.target;\n\n        console.log(`Device ${device.name} is disconnected.`);\n        // console.log(event);\n\n        dispatch(connectToGATTServer(device));\n    };\n};\n\nexport const connectGattRequest = createAction('CONNECT_GATT_REQUEST');\nexport const connectGattSuccess = createAction('CONNECT_GATT_SUCCESS');\nexport const connectGattFailure = createAction('CONNECT_GATT_FAILURE');\n\n// Подключение к GATT серверу выбранного устройства\nexport const connectToGATTServer = (device) => {\n    return (dispatch) => {\n        // dispatch(connectGattRequest());\n        // device.gatt\n        //     .connect()\n        //     .then((server) => {\n        //         console.log(\n        //             '%cGATT server:',\n        //             'color:green; font-size:2em; border-top:10px solid red'\n        //         );\n        //         console.log(server);\n\n        //         dispatch(connectGattSuccess({ server, device }));\n        //     })\n        //     .catch(() => {\n        //         console.error('connectGattFailure');\n        //         dispatch(connectGattFailure());\n        //     });\n\n        connect();\n\n        function connect() {\n            exponentialBackoff(\n                3 /* max retries */,\n                2 /* seconds delay */,\n                function toTry() {\n                    dispatch(connectGattRequest({ device }));\n                    time('Connecting to Bluetooth Device... ');\n                    return device.gatt.connect();\n                },\n                function success(server) {\n                    console.log(\n                        '%cGATT server:',\n                        'color:green; font-size:2em; border-top:10px solid red'\n                    );\n                    console.log(server);\n\n                    dispatch(connectGattSuccess({ server, device }));\n\n                    // Успешное подключение к устройству. Вызываем дополнительные сервисы\n\n                    try {\n                        // Уровень заряда батареи\n                        // dispatch(batteryService());\n\n                        // Получение логов с устройства\n                        // dispatch(getLogs());\n\n                        // Список рецептов на устройстве\n                        dispatch(recipeInfo());\n                    } catch (e) {\n                        console.log('catch from success GATT', e.message);\n                    }\n                },\n                function fail() {\n                    dispatch(connectGattFailure({ device }));\n                    time('Failed to connect.');\n                }\n            );\n        }\n\n        function exponentialBackoff(max, delay, toTry, success, fail) {\n            toTry()\n                .then((server) => success(server))\n                .catch((error) => {\n                    console.log('catch', error);\n                    if (max === 0) {\n                        return fail();\n                    }\n                    time(\n                        'Retrying in ' + delay + 's... (' + max + ' tries left)'\n                    );\n                    setTimeout(function () {\n                        exponentialBackoff(\n                            --max,\n                            delay * 2,\n                            toTry,\n                            success,\n                            fail\n                        );\n                    }, delay * 1000);\n                });\n        }\n\n        function time(text) {\n            console.log('[' + new Date().toJSON().substr(11, 8) + '] ' + text);\n        }\n    };\n};\n\nexport const disconnectGattServer = (device) => {\n    return () => {\n        // console.log('disconnectGattServer', device);\n        device.device.gatt.disconnect();\n    };\n};\n\nexport const fetchLogsRequest = createAction('FETCH_LOGS_REQUEST');\nexport const fetchLogsSuccess = createAction('FETCH_LOGS_SUCCESS');\nexport const fetchLogsFailure = createAction('FETCH_LOGS_FAILURE');\n\nexport const getLogs = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchLogsRequest());\n\n        const {\n            bluetooth: { server, device },\n        } = getState();\n\n        let service = null;\n\n        let logs = null;\n        let key = 0;\n\n        server\n            .getPrimaryService(dataTransferService.uuid)\n            .then((ser) => {\n                // console.log('1');\n                service = ser;\n                return service.getCharacteristic(\n                    dataTransferService.characteristics.controlTransmit.uuid\n                );\n            })\n            .then((characteristic) => {\n                return new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(characteristic);\n                    }, 1000);\n                });\n            })\n            .then((characteristic) => {\n                // console.log('2');\n                return characteristic.startNotifications();\n            })\n            .then((characteristic) => {\n                // console.log('3');\n                characteristic.oncharacteristicvaluechanged = handleControlReceive;\n\n                console.log('Подписка на Control Receive', characteristic);\n\n                return service.getCharacteristic(\n                    dataTransferService.characteristics.controlReceive.uuid\n                );\n            })\n            .then((characteristic) => {\n                let buffer = Utils.prepareControlReceiveBuffer('fetchLogs');\n\n                console.log(\n                    '%ccontrol receive:',\n                    'color:green; font-size:2em; border-top:10px solid red'\n                );\n                console.log(new Int8Array(buffer));\n                characteristic.writeValue(new Int8Array(buffer));\n            })\n            .catch((error) => {\n                console.log('no logs', error);\n                dispatch(fetchLogsFailure());\n            });\n\n        function handleStatusTransferData(event) {\n            let value = event.target.value;\n            console.log('handleStatusTransferData', value, value.getUint8(0));\n        }\n\n        function handleTransmitData(event) {\n            let value = event.target.value;\n            console.log(\n                'handleTransmitData',\n                value.buffer,\n                value.getUint8(0),\n                'logs byteLength: ' + logs.byteLength,\n                'logs buffer: ' + logs\n            );\n\n            let i = 0;\n            while (i < 20) {\n                if (key >= logs.byteLength) {\n                    break;\n                }\n                // console.log('Uint8', value.getUint8(i));\n                new DataView(logs).setInt8(key, value.getUint8(i));\n                key++;\n                i++;\n            }\n            // console.log(logs);\n\n            if (key === logs.byteLength) {\n                let base64String = btoa(\n                    String.fromCharCode(...new Uint8Array(logs))\n                );\n                console.log('base64', base64String);\n                dispatch(fetchLogsSuccess(base64String));\n                dispatch(addHistory(base64String, device.name));\n            }\n        }\n\n        function handleControlReceive(event) {\n            let status = event.target.value.getUint8(0),\n                operationCode = event.target.value.getUint8(1),\n                dataLength = event.target.value.getUint32(2, true),\n                dataType = event.target.value.getUint16(6, true);\n            console.log(\n                'handleControlReceive',\n                status,\n                '----',\n                operationCode,\n                '----',\n                dataType,\n                '----',\n                event.target.value\n            );\n\n            if (0x0a === status && dataType === 0x7 && dataLength) {\n                logs = new ArrayBuffer(dataLength);\n\n                service\n                    .getCharacteristic(\n                        dataTransferService.characteristics.status.uuid\n                    )\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.oncharacteristicvaluechanged = handleStatusTransferData;\n                        return service.getCharacteristic(\n                            dataTransferService.characteristics.dataTransmit\n                                .uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.oncharacteristicvaluechanged = handleTransmitData;\n\n                        return service.getCharacteristic(\n                            dataTransferService.characteristics.controlReceive\n                                .uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        let buffer = Utils.prepareControlReceiveBuffer(\n                            'fetchLogsReady'\n                        );\n\n                        console.log(\n                            '%ccontrol receive:',\n                            'color:green; font-size:2em; border-top:10px solid red'\n                        );\n                        console.log(new Int8Array(buffer));\n                        characteristic.writeValue(new Int8Array(buffer));\n                    })\n                    .catch((error) => {\n                        alert('prepare to sending data error: ' + error);\n                    });\n            }\n        }\n    };\n};\n\nexport const fetchBatteryServiceRequest = createAction(\n    'FETCH_BATTERY_SERVICE_REQUEST'\n);\nexport const fetchBatteryServiceSuccess = createAction(\n    'FETCH_BATTERY_SERVICE_SUCCESS'\n);\nexport const fetchBatteryServiceFailure = createAction(\n    'FETCH_BATTERY_SERVICE_FAILURE'\n);\n\nexport const fetchBatteryCharacteristicSuccess = createAction(\n    'FETCH_BATTERY_CHARACTERISTIC_SUCCESS'\n);\n\nexport const batteryService = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchBatteryServiceRequest());\n\n        const {\n            bluetooth: { server },\n        } = getState();\n        // console.log('1');\n\n        let service = null;\n        server\n            .getPrimaryService('battery_service')\n            .then((ser) => {\n                service = ser;\n                dispatch(fetchBatteryServiceSuccess());\n                // console.log('2');\n                return service.getCharacteristic('battery_level');\n            })\n            .catch(() => {\n                // console.log('3');\n                dispatch(fetchBatteryServiceFailure());\n            })\n            .then((characteristic) => {\n                return characteristic.startNotifications();\n            })\n            .then((characteristic) => {\n                // console.log('4');\n                // if (characteristic) {\n                //     console.log('4.1');\n                //     characteristic.startNotifications();\n                //     characteristic.addEventListener(\n                //         'characteristicvaluechanged',\n                //         handleBatteryLevelChange\n                //     );\n                //     return characteristic.readValue();\n                // }\n                // throw new Error('characteristic baterry level not found');\n\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    handleBatteryLevelChange\n                );\n\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                // console.log('Battery service', value.buffer);\n                // console.log('5');\n                dispatch(\n                    fetchBatteryServiceSuccess({ level: value.getUint8(0) })\n                );\n            })\n            .catch(() => {});\n\n        function handleBatteryLevelChange(event) {\n            dispatch(\n                fetchBatteryServiceSuccess({\n                    level: event.target.value.getUint8(0),\n                })\n            );\n        }\n    };\n};\n\nexport const fetchDeviceInfoRequest = createAction('FETCH_DEVICE_INFO_REQUEST');\nexport const fetchDeviceInfoSuccess = createAction('FETCH_DEVICE_INFO_SUCCESS');\nexport const fetchDeviceInfoFailure = createAction('FETCH_DEVICE_INFO_FAILURE');\n\nexport const fetchDeviceInfoCharacteristicSuccess = createAction(\n    'FETCH_DEVICE_INFO_CHARACTERISTIC_SUCCESS'\n);\n\nexport const deviceInfoService = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchDeviceInfoRequest());\n\n        const {\n            bluetooth: { server },\n        } = getState();\n\n        server\n            .getPrimaryService(0x180a)\n            .then((service) => {\n                dispatch(fetchDeviceInfoSuccess());\n                return service.getCharacteristic(0x2a29);\n            })\n            .catch(() => {\n                dispatch(fetchDeviceInfoFailure());\n            })\n            .then((characteristic) => {\n                if (characteristic) {\n                    return characteristic.readValue();\n                }\n                throw new Error('characteristic manufacturerName not found');\n            })\n            .then((value) => {\n                dispatch(\n                    fetchDeviceInfoCharacteristicSuccess({\n                        manufacturerName: value.getUint8(0),\n                    })\n                );\n            })\n            .catch(() => {});\n    };\n};\n\nexport const fetchRecipeInfoRequest = createAction('FETCH_RECIPE_INFO_REQUEST');\nexport const fetchRecipeInfoSuccess = createAction('FETCH_RECIPE_INFO_SUCCESS');\nexport const fetchRecipeInfoFailure = createAction('FETCH_RECIPE_INFO_FAILURE');\n\nexport const recipeInfo = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipeInfoRequest());\n\n        const {\n            bluetooth: { server },\n        } = getState();\n\n        let service = null;\n        console.log('RecipeInfo request', server);\n        server\n            .getPrimaryService(recipeInfoService.uuid)\n            .then((ser) => {\n                service = ser;\n                console.log('RecipeInfo service');\n                return service.getCharacteristic(\n                    recipeInfoService.characteristics.recipeListLowPart.uuid\n                );\n            })\n            .then((characteristic) => {\n                console.log('RecipeInfo read first value');\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('recipeListLowPart', value.buffer);\n                return service.getCharacteristic(\n                    recipeInfoService.characteristics.recipeListHighPart.uuid\n                );\n            })\n            .then((characteristic) => {\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('recipeListHighPart', value.buffer);\n                dispatch(fetchRecipeInfoSuccess());\n            })\n            .catch((error) => {\n                dispatch(fetchRecipeInfoFailure());\n                console.log('error recipeInfo', error);\n            });\n    };\n};\n\nexport const writeRecipeToDeviceRequest = createAction(\n    'WRITE_RECIPE_TO_DEVICE_REQUEST'\n);\nexport const writeRecipeToDeviceSuccess = createAction(\n    'WRITE_RECIPE_TO_DEVICE_SUCCESS'\n);\nexport const writeRecipeToDeviceFailure = createAction(\n    'WRITE_RECIPE_TO_DEVICE_FAILURE'\n);\n\nexport const recipeByteTransfered = createAction('RECIPE_BYTE_TRANSFERED');\nexport const imgByteTransfered = createAction('IMG_BYTE_TRANSFERED');\nexport const speedOfDataTransfer = createAction('SPEED_OF_DATA_TRANSFER');\n\nlet keyI = 0;\nlet characteristicWrite = null;\n\nexport const writeRecipeToDevice = () => {\n    return (dispatch, getState) => {\n        const {\n            bluetooth: { server },\n            data: { recipeBinary },\n        } = getState();\n\n        let service = null;\n\n        // connect to service\n\n        // dispatch(showAppPreloader(true));\n\n        server\n            .getPrimaryService(dataTransferService.uuid)\n            .then((ser) => {\n                service = ser;\n                return service.getCharacteristic(\n                    dataTransferService.characteristics.controlTransmit.uuid\n                );\n            })\n            .then((characteristic) => {\n                return new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(characteristic);\n                    }, 1000);\n                });\n            })\n            // .then((characteristic) => {\n            //     return characteristic.stopNotifications();\n            // })\n            .then((characteristic) => {\n                return characteristic.startNotifications();\n            })\n            .then((characteristic) => {\n                characteristic.oncharacteristicvaluechanged = handleControlReceive;\n\n                console.log('Подписка на Control Transmit', characteristic);\n                return service.getCharacteristic(\n                    dataTransferService.characteristics.controlReceive.uuid\n                );\n            })\n            .then((characteristic) => {\n                let buffer = Utils.prepareControlReceiveBuffer(\n                    'writeRecipeRequest',\n                    {\n                        length: recipeBinary.buffer.byteLength,\n                    }\n                );\n\n                console.log(\n                    '%ccontrol receive:',\n                    'color:green; font-size:2em; border-top:10px solid red'\n                );\n                console.log(new Int8Array(buffer));\n                setTimeout(() => {\n                    characteristic.writeValue(new Int8Array(buffer));\n                }, 1000);\n            })\n            .catch((error) => {\n                dispatch(showAppPreloader(false));\n                alert(error);\n            });\n\n        function handleControlReceive(event) {\n            let status = event.target.value.getUint8(0),\n                operationCode = event.target.value.getUint8(1),\n                // dataLength = event.target.value.getUint32(2, true),\n                dataType = event.target.value.getUint16(6, true);\n            console.log(\n                'handleControlReceive',\n                status,\n                '----',\n                operationCode,\n                '----',\n                dataType,\n                '----',\n                event.target.value\n            );\n            if (0x0a === status && dataType === 0x6 && operationCode === 0xff) {\n                console.log('prepare to sending data...');\n                service\n                    .getCharacteristic(\n                        dataTransferService.characteristics.status.uuid\n                    )\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.oncharacteristicvaluechanged = handleStatusTransferData;\n                        console.log('prepare to sending data 2...');\n                        return service.getCharacteristic(\n                            dataTransferService.characteristics.dataReceive.uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        characteristicWrite = characteristic;\n                        console.log('prepare to sending data 3...');\n                        setTimeout(() => sendingData(), 2000);\n                        // sendingData();\n                    })\n                    .catch((error) => {\n                        dispatch(showAppPreloader(false));\n                        alert('prepare to sending data error: ' + error);\n                    });\n            } else if (\n                0x0a === status &&\n                dataType === 0x2 &&\n                operationCode === 0xff\n            ) {\n                // Запись изображения\n                setTimeout(\n                    () =>\n                        service\n                            .getCharacteristic(\n                                dataTransferService.characteristics.status.uuid\n                            )\n                            .then((characteristic) => {\n                                return characteristic.startNotifications();\n                            })\n                            .then((characteristic) => {\n                                characteristic.oncharacteristicvaluechanged = handleStatusTransferDataImg;\n\n                                return service.getCharacteristic(\n                                    dataTransferService.characteristics\n                                        .dataReceive.uuid\n                                );\n                            })\n                            .then((characteristic) => {\n                                characteristicWrite = characteristic;\n\n                                sendingDataImg();\n                            }),\n                    2000\n                );\n            } else if (0x0f === status && dataType === 0x6) {\n                console.log('Recipe did saved');\n                dispatch(showAppPreloader(false));\n                setTimeout(() => {\n                    // dispatch(showAppPreloader(true));\n                    service\n                        .getCharacteristic(\n                            dataTransferService.characteristics.controlReceive\n                                .uuid\n                        )\n                        .then((characteristic) => {\n                            let buffer = Utils.prepareControlReceiveBuffer(\n                                'writeImgRequest',\n                                {\n                                    length: recipeBinary.bufferImg.byteLength,\n                                }\n                            );\n\n                            console.log(\n                                '%ccontrol receive:',\n                                'color:green; font-size:2em; border-top:10px solid red'\n                            );\n                            console.log(\n                                new Int8Array(buffer),\n                                recipeBinary.bufferImg.byteLength\n                            );\n                            characteristic.writeValue(new Int8Array(buffer));\n                        })\n                        .catch((error) => {\n                            dispatch(showAppPreloader(false));\n                            alert(error);\n                        });\n                }, 2000);\n            } else if (0x0f === status && dataType === 0x2) {\n                console.log('Img did saved');\n                dispatch(showAppPreloader(false));\n            } else if (0x0d === status) {\n                console.warn(\"Don't have space\");\n            }\n\n            console.log(\n                '%ccontrol transmit:',\n                'color:green; font-size:2em; border-top:10px solid red'\n            );\n\n            switch (status) {\n                case 0x0a:\n                    console.log(\n                        '%cI am ready',\n                        'color:black; font-size:1em; border: 1px dashed gray;'\n                    );\n                    keyI = 0;\n                    break;\n                case 0x0b:\n                    console.log(\n                        '%cPaused',\n                        'color:black; font-size:1em; border: 1px dashed gray;'\n                    );\n                    break;\n                case 0x0c:\n                    console.log(\n                        '%cAborted',\n                        'color:black; font-size:1em; border: 1px dashed gray;'\n                    );\n                    break;\n                case 0x0d:\n                    console.log(\n                        '%cDont`t have space',\n                        'color:black; font-size:1em; border: 1px dashed gray;'\n                    );\n                    break;\n                case 0x0e:\n                    console.log(\n                        '%cBusy',\n                        'color:black; font-size:1em; border: 1px dashed gray;'\n                    );\n                    break;\n                case 0x0f:\n                    console.log(\n                        '%cSuccess',\n                        'color:black; font-size:1em; border: 1px dashed gray;'\n                    );\n                    break;\n                default:\n                    console.log(\n                        '%cUndefined status: ' + status,\n                        'color:black; font-size:1em; border: 1px dashed gray;'\n                    );\n                    break;\n            }\n        }\n\n        function handleStatusTransferData(event) {\n            let value = event.target.value;\n            console.log('handleStatusTransferData', value, value.getUint8(0));\n            sendingData();\n        }\n\n        function handleStatusTransferDataImg(event) {\n            let value = event.target.value;\n            console.log(\n                'handleStatusTransferDataImg',\n                value,\n                value.getUint8(0)\n            );\n            sendingDataImg();\n        }\n\n        async function sendingData() {\n            console.log('sendingData...');\n            let startTransfer = Date.now() / 1000;\n\n            for (\n                let sum = 0;\n                keyI < recipeBinary.buffer.byteLength && sum < 400;\n                keyI = keyI + 20, sum = sum + 20\n            ) {\n                try {\n                    console.log(\n                        'recipeBinary await',\n                        recipeBinary.buffer.slice(keyI, keyI + 20)\n                    );\n                    await characteristicWrite.writeValue(\n                        recipeBinary.buffer.slice(keyI, keyI + 20)\n                    );\n                } catch (e) {\n                    console.log('catch', e);\n                }\n                dispatch(\n                    recipeByteTransfered(\n                        recipeBinary.buffer.slice(keyI, keyI + 20).byteLength\n                    )\n                );\n                console.log(\n                    'DataBuffer',\n                    recipeBinary.buffer.slice(keyI, keyI + 20)\n                );\n            }\n\n            let endTransfer = Date.now() / 1000;\n\n            dispatch(speedOfDataTransfer(400 / (endTransfer - startTransfer)));\n        }\n\n        async function sendingDataImg() {\n            console.log('sendingData...');\n            let startTransfer = Date.now() / 1000;\n\n            for (\n                let sum = 0;\n                keyI < recipeBinary.bufferImg.byteLength && sum < 400;\n                keyI = keyI + 20, sum = sum + 20\n            ) {\n                await characteristicWrite.writeValue(\n                    recipeBinary.bufferImg.slice(keyI, keyI + 20)\n                );\n                dispatch(\n                    imgByteTransfered(\n                        recipeBinary.bufferImg.slice(keyI, keyI + 20).byteLength\n                    )\n                );\n                console.log(\n                    'DataBuffer',\n                    recipeBinary.bufferImg.slice(keyI, keyI + 20)\n                );\n            }\n\n            let endTransfer = Date.now() / 1000;\n\n            dispatch(speedOfDataTransfer(400 / (endTransfer - startTransfer)));\n        }\n    };\n};\n","import React, { Component } from 'react';\n// import { connectWB } from './service';\nimport { connect } from 'react-redux';\n// import * as actions from '../../actions';\nimport {\n    connectToDevice,\n    batteryService as batteryServiceAction,\n    deviceInfoService as deviceInfoServiceAction,\n    writeRecipeToDevice,\n} from '../../actions/bluetooth';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data: { recipeBinary },\n        data,\n        bluetooth,\n        bluetooth: { device, server },\n    } = state;\n    return {\n        token,\n        device,\n        bluetooth,\n        server,\n        recipeBinary,\n        data,\n    };\n};\n\nconst actionCreators = {\n    connectToDevice,\n    batteryServiceAction,\n    deviceInfoServiceAction,\n    writeRecipeToDevice,\n};\n\nclass WebBluetooth extends Component {\n    state = {\n        bluetoothDevice: null,\n        batteryLevelCharacteristic: null,\n        gattServer: null,\n        transferService: null,\n        characteristic: null,\n    };\n\n    connectToDevice = () => {\n        navigator.bluetooth\n            .requestDevice({\n                // acceptAllDevices: true,\n                filters: [\n                    { name: 'BlueNRG' },\n                    // { name: 'JUST-ASUS' },\n                    { services: ['5cf052d0-2403-4719-a558-b7e72c48112f'] },\n                    // { services: ['00001800-0000-1000-8000-00805f9b34fb'] },\n                ],\n                optionalServices: ['5cf052d0-2403-4719-a558-b7e72c48112f'],\n            })\n            .then((device) => {\n                console.log('device', device);\n                this.setState({ bluetoothDevice: device });\n                this.state.bluetoothDevice.addEventListener(\n                    'gattserverdisconnected',\n                    this.onDisconnected\n                );\n            })\n            .catch((error) => {\n                // alert(error);\n                console.log('error', error);\n            });\n    };\n\n    // onDisconnected() {\n    //     // console.log('> Bluetooth Device disconnected');\n    //     // connectDeviceAndCacheCharacteristics().catch((error) => {\n    //     //     console.log('Argh! ' + error);\n    //     // });\n    // }\n\n    // disconnect = () => {\n    //     bluetoothDevice.gatt.disconnect();\n    // };\n\n    connect() {\n        // console.log('Connecting to Bluetooth Device...');\n        return this.state.bluetoothDevice.gatt\n            .connect()\n            .then((server) => {\n                console.log('server', server);\n\n                this.setState({ gattServer: server });\n            })\n            .catch((error) => {\n                alert(error);\n                // console.log('error', error);\n            });\n    }\n\n    serviceConnect = (uuid) => {\n        const { server } = this.props;\n        console.log('serviceConnect', server);\n        server\n            .getPrimaryService(uuid)\n            .then((service) => {\n                console.log('service', service);\n                this.setState({ transferService: service });\n\n                // return service.getCharacteristic(StatusCharacteristicUuid);\n            })\n            .catch((error) => {\n                alert(error);\n                // console.log('error', error);\n            });\n    };\n\n    CtrlRxCharacteristicUuid = () => {\n        let buffer = new ArrayBuffer(20);\n        let msgKeyWord8 = 0x0a;\n        let operationCode = 0xff;\n        let dataSize32 = 800;\n        let dataType16 = 0x0006;\n\n        new DataView(buffer).setInt8(0, msgKeyWord8);\n        new DataView(buffer).setInt8(1, operationCode);\n        new DataView(buffer).setInt32(2, dataSize32);\n        new DataView(buffer).setInt16(6, dataType16);\n\n        console.log('BUFFER', buffer, new DataView(buffer));\n        this.state.transferService\n            .getCharacteristic('5cf052d3-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Control Receive');\n                return characteristic.writeValue(buffer);\n            })\n            .then((value) => {\n                console.log('Control Receive value: ', value);\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    sendDataToDevice = () => {\n        let buffer = new ArrayBuffer(20);\n        new DataView(buffer).setInt32(0, 6000);\n        this.state.transferService\n            .getCharacteristic('5cf052d1-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Data Receive', buffer);\n\n                let result = null;\n                async function sendingData() {\n                    for (let i = 0; i < 800; i = i + 20) {\n                        result = await characteristic.writeValue(buffer);\n                        console.log('sendingData', result);\n                    }\n                }\n                sendingData();\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    CtrlTxCharacteristicUuid = () => {\n        this.state.transferService\n            .getCharacteristic('5cf052d4-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                return characteristic.startNotifications();\n            })\n            .then((characteristic) => {\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleResponseControlMsg\n                );\n                console.log('Подписка на Control Transmit');\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    StatusCharacteristicUuid = () => {\n        this.state.transferService\n            .getCharacteristic('5cf052d5-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                characteristic.startNotifications();\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleLevelChanged\n                );\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('Статус value: ', value);\n            });\n    };\n\n    batteryLevel = () => {\n        this.state.transferService\n            .getCharacteristic('battery_level')\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                characteristic.startNotifications();\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleLevelChanged\n                );\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('Заряд батареи', value.buffer);\n                // console.log('Battery percentage is ' + value.getUint8(0));\n            });\n    };\n\n    handleResponseControlMsg(event) {\n        let status = event.target.value.getUint8(0);\n        console.log('handleResponseControlMsg', 0x0a === status);\n        // console.log('Event - Battery percentage is ' + batteryLevel);\n    }\n\n    handleLevelChanged(event) {\n        let batteryLevel = event.target.value;\n        console.log('handleStatusChanged', batteryLevel, batteryLevel.buffer);\n        // console.log('Event - Battery percentage is ' + batteryLevel);\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            bluetooth: { device, server, batteryService },\n            // batteryServiceAction,\n        } = this.props;\n        if (device && server && !batteryService) {\n            // console.log(\n            //     '%cNeed request battery service...',\n            //     'border: 1px dashed gray; font-size: 1.5em; padding: 5px'\n            // );\n            // batteryServiceAction();\n        }\n        // if (device && server && !deviceInfoService) {\n        //     console.log('Need request device info service');\n        //     deviceInfoServiceAction();\n        // }\n\n        const { recipeBinary, writeRecipeToDevice } = this.props;\n        if (recipeBinary !== prevProps.recipeBinary) {\n            console.log('Recipe binary not same');\n            if (recipeBinary.binary_recipe) {\n                // writeToDevice\n                writeRecipeToDevice();\n            }\n        }\n    }\n\n    render() {\n        // const { device, recipeBinary } = this.props;\n        // if (device) {\n        //     console.log('Added device: ', device);\n        // }\n        // console.log('webbluetooth render', recipeBinary);\n        // if (recipeBinary) {\n        //     console.log('recipeBinary', recipeBinary.buffer);\n        // }\n        return (\n            <div>\n                {/* <p>\n                    {this.state.bluetoothDevice &&\n                        'Подключено устройство: ' +\n                            this.state.bluetoothDevice.name}\n                </p>\n                <button\n                    onClick={() => connectToDevice()}\n                    // className={'bluetooth__connect-btn'}\n                >\n                    Add device\n                </button>\n                <br />\n                <br />\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.connect();\n                    }}\n                >\n                    Подключиться к серверу гатт\n                </button>\n                <br />\n                <br />\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.serviceConnect(\n                            '5cf052d0-2403-4719-a558-b7e72c48112f'\n                        );\n                    }}\n                >\n                    Подключиться к DataTransferService\n                </button>\n\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.serviceConnect('battery_service');\n                    }}\n                >\n                    Подключиться к Baterry service\n                </button>\n                <br />\n                <br />\n                <ul>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.CtrlRxCharacteristicUuid();\n                            }}\n                        >\n                            Отправить control message\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.CtrlTxCharacteristicUuid();\n                            }}\n                        >\n                            Подписаться на ответ control message\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.StatusCharacteristicUuid();\n                            }}\n                        >\n                            Посмотреть сколько принято байт во время передачи\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.batteryLevel();\n                            }}\n                        >\n                            Узнать уровень заряда батареи\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.sendDataToDevice();\n                            }}\n                        >\n                            Send data to device\n                        </button>\n                    </li>\n                </ul> */}\n                {/* <button onClick={this.disconnect}>Дисконект</button>\n                <button onClick={this.onReconnectButtonClick}>Reconect</button> */}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(WebBluetooth);\n","import React, { Component } from 'react';\nimport { Card, Button, Divider, Progress, Modal, Col } from 'antd';\nimport {\n    // PlusCircleOutlined,\n    CloseCircleOutlined,\n    CheckCircleTwoTone,\n    LoadingOutlined,\n} from '@ant-design/icons';\n\nclass Device extends Component {\n    componentDidUpdate = (prevProps) => {\n        const { connectedDevice } = this.props;\n        if (\n            connectedDevice &&\n            connectedDevice.GATTDisconnected &&\n            prevProps.connectedDevice &&\n            prevProps.connectedDevice.GATTDisconnected\n        ) {\n            console.log('componentDidUpdate');\n            Modal.error({\n                title: 'Failed to reconnect',\n                content: 'Please try again later',\n            });\n        }\n    };\n\n    render() {\n        const {\n            device,\n            connected,\n            connectToDevice,\n            removeDevice,\n            batteryService,\n            showDrawer,\n            byteTransfered,\n            imgByteTransfered,\n            recipeBinary,\n            server,\n            GATTConnected,\n            // disconnectGattServer,\n            // connectedDevice,\n            connectionRequest,\n            speedOfDataTransfer,\n            logs,\n        } = this.props;\n\n        let deviceState = '';\n\n        if (GATTConnected) {\n            deviceState = 'online';\n        } else {\n            if (connectionRequest) {\n                deviceState = 'connecting...';\n            } else {\n                deviceState = 'offline';\n            }\n        }\n\n        let logsResult = null;\n        switch (logs.status) {\n            case 'success':\n                logsResult = <CheckCircleTwoTone twoToneColor=\"#52c41a\" />;\n                break;\n            case 'request':\n                logsResult = <LoadingOutlined twoToneColor=\"#52c41a\" />;\n                break;\n            case 'failure':\n                logsResult = <CloseCircleOutlined twoToneColor=\"#52c41a\" />;\n                break;\n            default:\n                break;\n        }\n\n        if (!connected) {\n            return (\n                <Col>\n                    <Card\n                        title={\n                            <>\n                                <Divider type=\"vertical\" />\n                                <span>{device.name}</span>\n                            </>\n                        }\n                        extra={\n                            <div>\n                                <Button\n                                    style={{ color: 'red' }}\n                                    shape=\"circle\"\n                                    icon={\n                                        <CloseCircleOutlined twoToneColor=\"#52c41a\" />\n                                    }\n                                    onClick={() => removeDevice(device.uid)}\n                                />\n                            </div>\n                        }\n                        style={{ width: 300 }}\n                    >\n                        <p>\n                            <strong>Device: </strong>\n                            {deviceState}\n                        </p>\n                        {/* <p>\n                            <strong>UID:</strong> {device.uid}\n                        </p> */}\n                        <br />\n                        <Button\n                            // shape=\"circle\"\n                            type=\"primary\"\n                            // icon={<PlusCircleOutlined />}\n                            onClick={() => {\n                                // alert('button connect');\n                                connectToDevice([{ name: device.name }]);\n                            }}\n                        >\n                            Connect\n                        </Button>\n                    </Card>\n                </Col>\n            );\n        }\n\n        return (\n            <Col>\n                <Card\n                    title={\n                        <>\n                            {GATTConnected && (\n                                <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                            )}\n                            {connectionRequest && (\n                                <LoadingOutlined twoToneColor=\"#52c41a\" />\n                            )}\n                            <Divider type=\"vertical\" />\n                            <span>{device.name}</span>\n                        </>\n                    }\n                    extra={\n                        <div>\n                            <Button\n                                // type=\"primary\"\n                                style={{ color: 'red' }}\n                                shape=\"circle\"\n                                icon={<CloseCircleOutlined />}\n                                onClick={() => removeDevice(device.uid)}\n                            />\n                        </div>\n                    }\n                    style={{ width: 300 }}\n                >\n                    <p>\n                        <strong>Device: </strong>\n                        {deviceState}\n                    </p>\n                    {/* <p>\n                    {GATTConnected && (\n                        <button\n                            onClick={() =>\n                                disconnectGattServer(connectedDevice)\n                            }\n                        >\n                            Отключиться\n                        </button>\n                    )}\n                </p> */}\n                    <p>\n                        <strong>UID:</strong> {device.uid}\n                    </p>\n                    <p>\n                        <strong>Logs:</strong> {logsResult}\n                    </p>\n                    {recipeBinary && (\n                        <p>\n                            <strong>Bytes transferred:</strong>{' '}\n                            {`${byteTransfered + imgByteTransfered}/${\n                                recipeBinary.buffer.byteLength +\n                                recipeBinary.bufferImg.byteLength\n                            }`}\n                        </p>\n                    )}\n\n                    {recipeBinary && (\n                        <p>\n                            <strong>Speed:</strong>{' '}\n                            {'kB/s: ' + (speedOfDataTransfer / 1024).toFixed(2)}\n                        </p>\n                    )}\n\n                    {batteryService &&\n                    Number.isInteger(batteryService.level) ? (\n                        <div>\n                            <strong>Battery level: </strong>\n                            <Progress\n                                percent={batteryService.level}\n                                // percent={45}\n                                size=\"small\"\n                                status=\"normal\"\n                            />\n                        </div>\n                    ) : null}\n\n                    <br />\n\n                    {server && (\n                        <Button onClick={showDrawer}>\n                            Add recipe to device\n                        </Button>\n                    )}\n                    {/* {recipeBinary ? (\n                        <Progress\n                            type=\"circle\"\n                            percent={Math.floor(\n                                ((byteTransfered + imgByteTransfered) * 100) /\n                                    (recipeBinary.buffer.byteLength +\n                                        recipeBinary.bufferImg.byteLength)\n                            )}\n                            width={40}\n                        />\n                    ) : (\n                        ''\n                    )} */}\n                </Card>\n            </Col>\n        );\n    }\n}\n\nexport default Device;\n","import React, { Component } from 'react';\nimport { Row, Button, Tooltip, Divider } from 'antd';\nimport { PlusCircleOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\n\n// import { dataTransferService } from '../../../servicesAndCharacteristics';\n// import _ from 'lodash';\nimport * as actions from '../../../actions';\nimport {\n    connectToDevice,\n    disconnectGattServer,\n} from '../../../actions/bluetooth';\nimport WebBluetooth from '../../WebBluetooth';\nimport Device from './Device';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data,\n        data: {\n            byteTransfered,\n            imgByteTransfered,\n            recipeBinary,\n            speedOfDataTransfer,\n            logs,\n        },\n        bluetooth: {\n            device,\n            server,\n            batteryService,\n            devices: connectedDevices,\n        },\n    } = state;\n    return {\n        token,\n        data,\n        device,\n        connectedDevices,\n        server,\n        batteryService,\n        byteTransfered,\n        imgByteTransfered,\n        recipeBinary,\n        speedOfDataTransfer,\n        logs,\n    };\n};\n\nconst actionCreators = {\n    recipe: actions.recipe,\n    user: actions.user,\n    connectToDevice,\n    removeDevice: actions.removeDevice,\n    disconnectGattServer,\n};\n\nclass Devices extends Component {\n    render() {\n        const {\n            connectToDevice,\n            removeDevice,\n            connectedDevices,\n            showDrawer,\n            server,\n            batteryService,\n            byteTransfered,\n            imgByteTransfered,\n            recipeBinary,\n            disconnectGattServer,\n            speedOfDataTransfer,\n            logs,\n        } = this.props;\n        let devices =\n            this.props.devices &&\n            this.props.devices.map((device) => {\n                return (\n                    <Device\n                        key={device.name}\n                        connected={\n                            !!connectedDevices.find(\n                                (connectedDevice) =>\n                                    connectedDevice.name === device.name\n                            )\n                        }\n                        GATTConnected={\n                            !!connectedDevices.find(\n                                (connectedDevice) =>\n                                    connectedDevice.name === device.name &&\n                                    connectedDevice.server &&\n                                    connectedDevice.server.connected\n                            )\n                        }\n                        device={device}\n                        connectedDevice={connectedDevices.find(\n                            (connectedDevice) =>\n                                connectedDevice.name === device.name\n                        )}\n                        connectToDevice={connectToDevice}\n                        removeDevice={removeDevice}\n                        batteryService={batteryService}\n                        showDrawer={showDrawer}\n                        byteTransfered={byteTransfered}\n                        imgByteTransfered={imgByteTransfered}\n                        recipeBinary={recipeBinary}\n                        server={server}\n                        disconnectGattServer={disconnectGattServer}\n                        connectionRequest={\n                            !!connectedDevices.find(\n                                (connectedDevice) =>\n                                    connectedDevice.name === device.name &&\n                                    connectedDevice.connectionRequest\n                            )\n                        }\n                        speedOfDataTransfer={speedOfDataTransfer}\n                        logs={logs}\n                    />\n                );\n            });\n        return (\n            <>\n                <Row gutter={16}>{devices || ''}</Row>\n                <Divider />\n                <Tooltip title=\"Add device\">\n                    <Button\n                        // shape=\"circle\"\n                        type=\"primary\"\n                        icon={<PlusCircleOutlined />}\n                        onClick={() => {\n                            // alert('click on button');\n                            connectToDevice();\n                        }}\n                    >\n                        Add new device\n                    </Button>\n                    {/* <button\n                        onClick={() => {\n                            // alert('click on button');\n                            connectToDevice();\n                        }}\n                    >\n                        click me\n                    </button> */}\n                    {/* <button\n                        onClick={() => {\n                            navigator.bluetooth\n                                .requestDevice({\n                                    acceptAllDevices: true,\n                                    optionalServices: [\n                                        dataTransferService.uuid,\n                                        'battery_service',\n                                        0x2a29,\n                                        0x180a,\n                                    ],\n                                })\n                                .then((device) => {\n                                    alert('first then action connectToDevice');\n                                    // if (\n                                    //     _.find(\n                                    //         devicesFromStore,\n                                    //         (deviceFromStore) =>\n                                    //             deviceFromStore.name ===\n                                    //             device.name\n                                    //     )\n                                    // ) {\n                                    //     alert(\n                                    //         'first then error action connectToDevice'\n                                    //     );\n                                    //     throw new Error(\n                                    //         'device has already been added'\n                                    //     );\n                                    // } else {\n                                    console.log(\n                                        '%cconnected device:',\n                                        'color:green; font-size:2em; border-top:10px solid red'\n                                    );\n                                    console.log(device);\n\n                                    device.addEventListener(\n                                        'gattserverdisconnected',\n                                        () => false\n                                        // dispatch(onDisconnected(event))\n                                    );\n\n                                    // dispatch(connectToDeviceSuccess(device));\n                                    // dispatch(saveDevice(device));\n                                    // dispatch(connectToGATTServer(device));\n                                    // }\n                                })\n                                .catch(\n                                    (\n                                        error = {\n                                            message: 'connectToDeviceFailure',\n                                        }\n                                    ) => {\n                                        console.error(error.message);\n                                        // dispatch(connectToDeviceFailure());\n                                    }\n                                );\n                        }}\n                    >\n                        click me 2\n                    </button> */}\n                </Tooltip>\n                <WebBluetooth />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Devices);\n","import React, { Component } from 'react';\nimport { Card, Row, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../actions';\nimport * as bluetoothActions from '../../../actions/bluetooth';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    writeRecipeToDevice: bluetoothActions.writeRecipeToDevice,\n    getBinaryRecipe: actions.getBinaryRecipe,\n};\n\nclass Recipes extends Component {\n    render() {\n        const { onClose, getBinaryRecipe } = this.props;\n        let recipes = this.props.recipes.map((recipe) => {\n            return (\n                // <Col span={6} key={recipe.id}>\n                <Card\n                    key={recipe.id}\n                    title={recipe.name + ' - id' + recipe.id + ''}\n                    // extra={<a href=\"#\">More</a>}\n                    style={{ width: 75 }}\n                    cover={<img alt=\"example\" src={recipe.image} />}\n                    className=\"recipe__card\"\n                >\n                    <p>{recipe.description}</p>\n                    {this.props.buttonVisible && (\n                        <Button\n                            onClick={() => {\n                                onClose();\n                                getBinaryRecipe(recipe.id);\n                            }}\n                        >\n                            Add\n                        </Button>\n                    )}\n                </Card>\n                // </Col>\n            );\n        });\n        // console.log('fsadasd', recipes);\n        return <Row gutter={16}>{recipes}</Row>;\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Recipes);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Menu, PageHeader, Drawer } from 'antd';\nimport { AntDesignOutlined, ReadOutlined } from '@ant-design/icons';\n\nimport './account.scss';\n\nimport * as actions from '../../../actions';\nimport Devices from './Devices';\nimport Recipes from './Recipes';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data,\n    } = state;\n    return {\n        token,\n        data,\n    };\n};\n\nconst actionCreators = {\n    // convertToken: actions.convertToken,\n    recipe: actions.recipe,\n    user: actions.user,\n    userDevices: actions.userDevices,\n    logout: actions.logout,\n};\n\nclass Account extends Component {\n    state = {\n        current: 'devices',\n        showDrawer: false,\n    };\n\n    showDrawer = () => {\n        this.setState({ showDrawer: true });\n    };\n\n    onClose = () => {\n        this.setState({ showDrawer: false });\n    };\n\n    handleClick = (e) => {\n        // console.log('click ', e);\n        this.setState({ current: e.key });\n    };\n\n    componentDidMount() {\n        const { recipe, user, userDevices } = this.props;\n        // console.log('didMount');\n        recipe();\n        user();\n        userDevices();\n    }\n\n    render() {\n        const { current } = this.state;\n        const {\n            data: { user, recipe, userDevices },\n            logout,\n        } = this.props;\n        // console.log('account', user);\n        return (\n            <>\n                <div className=\"elements__account\">\n                    <PageHeader\n                        title={\n                            <div className=\"account-header\">\n                                {user && user.first_name + ' ' + user.last_name}\n                                <button onClick={logout}>Logout</button>\n                            </div>\n                        }\n                    >\n                        <Menu\n                            onClick={this.handleClick}\n                            selectedKeys={[current]}\n                            mode=\"horizontal\"\n                        >\n                            <Menu.Item\n                                key=\"devices\"\n                                icon={<AntDesignOutlined />}\n                            >\n                                My devices\n                            </Menu.Item>\n                            <Menu.Item key=\"recipes\" icon={<ReadOutlined />}>\n                                Recipes\n                            </Menu.Item>\n                        </Menu>\n                        {/* <WebBluetooth /> */}\n                    </PageHeader>\n                    {this.state.current === 'devices' ? (\n                        <Devices\n                            devices={userDevices && userDevices.devices}\n                            showDrawer={this.showDrawer}\n                        />\n                    ) : (\n                        <Recipes\n                            recipes={recipe}\n                            buttonVisible={false}\n                            onClose={this.onClose}\n                        />\n                    )}\n                    <Drawer\n                        title=\"Recipes\"\n                        width={640}\n                        placement=\"right\"\n                        closable={false}\n                        onClose={this.onClose}\n                        visible={this.state.showDrawer}\n                    >\n                        <Recipes\n                            recipes={recipe}\n                            buttonVisible={true}\n                            onClose={this.onClose}\n                        />\n                    </Drawer>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Account);\n","import React, { Component } from 'react';\nimport { Result, Button } from 'antd';\n\nclass BluetoothNotAvailable extends Component {\n    render() {\n        return (\n            <Result\n                title={<h1>Your browser is not supported Web Bluetooth</h1>}\n                extra={\n                    <Button\n                        type=\"primary\"\n                        key=\"console\"\n                        href=\"https://www.google.com/chrome/\"\n                    >\n                        Download Google Chrome\n                    </Button>\n                }\n            />\n        );\n    }\n}\n\nexport default BluetoothNotAvailable;\n","import React, { Component } from 'react';\nimport { Router, Link, Redirect, navigate } from '@reach/router';\nimport { connect } from 'react-redux';\nimport { Result, Button } from 'antd';\n\nimport * as actions from './actions';\nimport { readStateFromCookie } from './utils';\nimport 'antd/dist/antd.css';\nimport './App.scss';\nimport Loader from './components/Loader';\n// import WebBluetooth from './WebBluetooth';\n// import GoogleOauth from './components/GoogleOauth';\nimport Login from './components/routes/Login';\nimport Account from './components/routes/Account';\nimport BluetoothNotAvailable from './components/routes/BluetoothNotAvailable';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { cookie },\n        settings: { showPreloader },\n    } = state;\n    return {\n        cookie,\n        showPreloader,\n    };\n};\n\nconst actionCreators = {\n    fetchTokenSuccess: actions.fetchTokenSuccess,\n};\n\nclass App extends Component {\n    componentWillMount() {\n        const { fetchTokenSuccess } = this.props;\n        const authCookie = readStateFromCookie('auth_cookie');\n        // Проверяем наличии куки авторизации\n        if (authCookie) {\n            console.log(\n                '%ccookie:',\n                'color:green; font-size:2em; border-top:10px solid red'\n            );\n            console.log(authCookie);\n            fetchTokenSuccess(authCookie);\n        }\n    }\n\n    render() {\n        const { cookie, showPreloader } = this.props;\n        // navigator.bluetooth.getAvailability().then((available) => {\n        //     if (available) console.log('This device supports Bluetooth!');\n        //     else console.log('Doh! Bluetooth is not supported');\n        // });\n        // navigator.bluetooth.onavailabilitychanged = function (event) {\n        //     console.log('availabilitychanged', event);\n        // };\n        // const bluetoothIsAvailable = !!navigator.bluetooth;\n\n        if (!navigator.bluetooth) {\n            navigate('/bluetooth-not-available');\n        }\n\n        if (!cookie.access_token) {\n            navigate('/');\n        }\n\n        return (\n            <>\n                {showPreloader && <Loader />}\n                {/* <Router basepath=\"elements\"> */}\n                <Router>\n                    {/* {!bluetoothIsAvailable ? (\n                        <Redirect\n                            // from=\"*\"\n                            to=\"bluetooth-not-available\"\n                            noThrow\n                        />\n                    ) : null} */}\n\n                    {cookie.access_token && (\n                        <Redirect from=\"/\" to=\"account\" noThrow />\n                    )}\n\n                    <Login path=\"/\" />\n                    <Account path=\"account\" />\n                    <BluetoothNotAvailable path=\"bluetooth-not-available\" />\n\n                    <Result\n                        default\n                        status=\"404\"\n                        title=\"404\"\n                        subTitle=\"Sorry, the page you visited does not exist.\"\n                        extra={\n                            <Button type=\"primary\">\n                                <Link to=\"/\">Back Home</Link>\n                            </Button>\n                        }\n                    />\n                </Router>\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(App);\n","import auth from './auth';\nimport data from './data';\nimport bluetooth from './bluetooth';\nimport settings from './settings';\n\nexport default {\n    auth,\n    data,\n    bluetooth,\n    settings,\n};\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.fetchTokenSuccess](state, { payload }) {\n            return {\n                ...state,\n                cookie: payload,\n            };\n        },\n        [actions.logoutSuccess](state) {\n            return {\n                ...state,\n                cookie: {},\n            };\n        },\n    },\n    {\n        cookie: {},\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\nimport * as bluetoothActions from '../actions/bluetooth';\nimport { base64ToArrayBuffer } from '../utils';\n\nexport default handleActions(\n    {\n        [actions.fetchRecipesSuccess](state, { payload }) {\n            return {\n                ...state,\n                recipe: payload,\n            };\n        },\n        [actions.fetchUserSuccess](state, { payload }) {\n            return {\n                ...state,\n                user: payload,\n            };\n        },\n        [actions.fetchUserDevicesSuccess](state, { payload }) {\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [actions.getBinaryRecipeSuccess](state, { payload }) {\n            let buffer = base64ToArrayBuffer(payload.binary_recipe);\n            let bufferImg = base64ToArrayBuffer(payload.binary_image_r400x400);\n            return {\n                ...state,\n                recipeBinary: { ...payload, buffer, bufferImg },\n            };\n        },\n        [bluetoothActions.recipeByteTransfered](state, { payload }) {\n            return {\n                ...state,\n                byteTransfered: state.byteTransfered + payload,\n            };\n        },\n        [bluetoothActions.imgByteTransfered](state, { payload }) {\n            return {\n                ...state,\n                imgByteTransfered: state.imgByteTransfered + payload,\n            };\n        },\n        [bluetoothActions.speedOfDataTransfer](state, { payload }) {\n            console.log('Speed', payload);\n            return {\n                ...state,\n                speedOfDataTransfer: isFinite(payload) ? payload : 0,\n            };\n        },\n        [actions.saveDeviceSuccess](state, { payload }) {\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [actions.removeDeviceSuccess](state, { payload }) {\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [bluetoothActions.fetchLogsSuccess](state, { payload }) {\n            return {\n                ...state,\n                logs: Object.assign(\n                    {},\n                    { ...state.logs },\n                    { status: 'success', data: payload }\n                ),\n            };\n        },\n        [bluetoothActions.fetchLogsFailure](state) {\n            return {\n                ...state,\n                logs: Object.assign(\n                    {},\n                    { ...state.logs },\n                    { status: 'failure' }\n                ),\n            };\n        },\n        [bluetoothActions.fetchLogsRequest](state) {\n            return {\n                ...state,\n                logs: Object.assign(\n                    {},\n                    { ...state.logs },\n                    { status: 'request' }\n                ),\n            };\n        },\n    },\n    {\n        recipe: [],\n        user: null,\n        userDevices: null,\n        recipeBinary: null,\n        byteTransfered: 0,\n        imgByteTransfered: 0,\n        speedOfDataTransfer: 0,\n        logs: { status: 'success', data: null },\n    }\n);\n","import { handleActions } from 'redux-actions';\n// import * as actions from '../actions';\nimport * as bluetoothActions from '../actions/bluetooth';\n// import _ from 'lodash';\n\nexport default handleActions(\n    {\n        [bluetoothActions.connectToDeviceSuccess](state, { payload }) {\n            let newDevices = state.devices.slice();\n            newDevices.push({\n                id: payload.id,\n                name: payload.name,\n                device: payload,\n            });\n            return {\n                ...state,\n                device: payload,\n                devices: newDevices,\n            };\n        },\n        [bluetoothActions.connectGattRequest](state, { payload }) {\n            console.log('connectGattRequest', payload);\n            let devices = state.devices.map((device) => {\n                if (device.name === payload.device.name) {\n                    device.connectionRequest = true;\n                }\n                return device;\n            });\n            return {\n                ...state,\n                server: payload.server,\n                devices,\n            };\n        },\n        [bluetoothActions.connectGattSuccess](state, { payload }) {\n            let devices = state.devices.map((device) => {\n                if (device.name === payload.device.name) {\n                    device.connectionRequest = false;\n                    device.server = payload.server;\n                    device.GATTDisconnected = false;\n                }\n                return device;\n            });\n            return {\n                ...state,\n                server: payload.server,\n                devices,\n            };\n        },\n        [bluetoothActions.connectGattFailure](state, { payload }) {\n            let devices = state.devices.map((device) => {\n                if (device.name === payload.device.name) {\n                    device.GATTDisconnected = true;\n                    device.connectionRequest = false;\n                }\n                return device;\n            });\n            return {\n                ...state,\n                devices,\n            };\n        },\n        [bluetoothActions.fetchBatteryServiceSuccess](state, { payload }) {\n            const { batteryService } = state;\n            return {\n                ...state,\n                batteryService: { ...batteryService, ...payload },\n            };\n        },\n        [bluetoothActions.fetchDeviceInfoCharacteristicSuccess](\n            state,\n            { payload }\n        ) {\n            const { deviceInfoService } = state;\n            return {\n                ...state,\n                deviceInfoService: { ...deviceInfoService, ...payload },\n            };\n        },\n    },\n    {\n        device: null,\n        devices: [],\n        server: null,\n        batteryService: null,\n        deviceInfoService: null,\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.showAppPreloader](state, { payload }) {\n            // Stack for handle several requests\n            let stack = state.preloaderStack.slice();\n            if (payload) {\n                stack.push(0);\n            } else {\n                stack.shift();\n            }\n            return {\n                ...state,\n                showPreloader: !!stack.length,\n                preloaderStack: stack,\n            };\n        },\n    },\n    {\n        showPreloader: false,\n        preloaderStack: [],\n    }\n);\n","import reducers from './reducers';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nconst middleware = getDefaultMiddleware({\n    immutableCheck: false,\n    serializableCheck: false,\n    thunk: true,\n});\n\nexport default configureStore({\n    reducer: { ...reducers },\n    middleware,\n    devTools: process.env.NODE_ENV !== 'production',\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\n\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}