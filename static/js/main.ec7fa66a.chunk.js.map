{"version":3,"sources":["assets/images/elements.svg","utils/index.js","actions/index.js","components/Loader/index.jsx","components/GoogleOauth/index.jsx","components/FacebookOauth/index.jsx","components/routes/Login/index.jsx","servicesAndCharacteristics.js","actions/actionUtils.js","actions/bluetooth.js","components/WebBluetooth/index.jsx","components/routes/Account/Device.jsx","components/routes/Account/Devices.jsx","components/routes/Account/Recipes.jsx","components/routes/Account/index.js","components/routes/BluetoothNotAvailable/index.jsx","App.jsx","reducers/index.js","reducers/auth.js","reducers/data.js","reducers/bluetooth.js","reducers/settings.js","store.js","index.jsx"],"names":["module","exports","base64ToArrayBuffer","base64","binary_string","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","buffer","axios","defaults","baseURL","showAppPreloader","createAction","fetchTokenRequest","fetchTokenSuccess","convertToken","dispatch","response","access_token","expires_in","token_type","scope","refresh_token","state","name","duration","cookies","Cookies","expiresDate","Date","setSeconds","getSeconds","set","JSON","stringify","path","expires","writeStateToCookie","logoutRequest","logoutSuccess","logoutFailure","fetchRecipesRequest","fetchRecipesSuccess","fetchRecipesFailure","recipe","getState","auth","cookie","get","headers","Authorization","then","data","catch","fetchUserSuccess","fetchUserFailure","user","e","status","navigate","fetchUserDevicesSuccess","fetchUserDevicesFailure","saveDeviceRequest","saveDeviceSuccess","saveDeviceFailure","removeDeviceSuccess","removeDeviceFailure","getBinaryRecipeRequest","getBinaryRecipeSuccess","getBinaryRecipeFailure","postLogsRequest","postLogsSuccess","postLogsFailure","Loader","className","Component","actionCreators","actions","GoogleOauth","responseGoogleRequest","responseGoogleSuccess","props","accessToken","responseGoogleFailure","clientId","buttonText","onSuccess","this","onFailure","onRequest","cookiePolicy","connect","token","FacebookOauth","failure","responseFacebook","setState","onResponseFacebook","console","log","appId","autoLoad","fields","callback","textButton","redirectUri","Login","isLogged","src","logo","alt","navigator","userAgent","includes","dataTransferService","dataReceive","uuid","description","properties","dataTransmit","controlReceive","controlTransmit","recipeInfoService","recipeListLowPart","recipeListMidPart","recipeListHighPart","recipeListSize","commandService","command","commandStatus","instance","prepareControlReceiveBuffer","action","ArrayBuffer","dataSize32","DataView","setInt8","setInt32","setInt16","prepareCommandBuffer","id","recipeID","Number","connectToDeviceRequest","connectToDeviceSuccess","connectToDeviceFailure","connectToDevice","newFilters","deviceFromStore","bluetooth","device","filters","requestDevice","acceptAllDevices","undefined","optionalServices","Error","ongattserverdisconnected","event","onDisconnected","devices","userDevices","newDevices","_","uniqBy","uid","put","saveDevice","connectToGATTServer","error","message","deviceDisconnected","target","fetchRecipesIDOnDevice","connectGattRequest","connectGattSuccess","connectGattFailure","connectDataTransferServiceSuccess","connectRecipeInfoServiceSuccess","connectCommandServiceSuccess","time","text","toJSON","substr","exponentialBackoff","max","delay","toTry","success","fail","server","setTimeout","gatt","getPrimaryService","service","getCharacteristic","characteristic","startNotifications","addEventListener","recipeBinary","value","getUint8","operationCode","dataLength","getUint32","dataType","getUint16","characteristicWrite","startTransferOfRecipe","characteristicForWrite","sendingData","startTransferOfImg","sendingDataImg","endTransferOfRecipe","Utils","bufferImg","byteLength","Int8Array","writeValue","alert","endTransferOfImg","warn","logs","startReceiveOfLogs","keyI","handleControlTransmit","recipeAndImgAreTransfering","recipeIsTransfering","imgIsTransfering","handleStatusTransferData","logsTransfering","base64String","btoa","String","fromCharCode","fetchLogsSuccess","deviceUID","post","history_string","device_uid","addHistory","handleTransmitData","handleRecipeList","readValue","recipesIDList","from","handleSizeOfRecipeList","writeRecipeToDevice","handleCommand","batteryService","Modal","title","content","receivedLogs","endReceiveOfLogs","fetchLogsRequest","fetchLogsFailure","fetchBatteryServiceRequest","fetchBatteryServiceSuccess","fetchBatteryServiceFailure","handleBatteryLevelChange","level","ser","fetchDeviceInfoRequest","fetchDeviceInfoSuccess","fetchDeviceInfoFailure","fetchDeviceInfoCharacteristicSuccess","recipeByteTransfered","imgByteTransfered","speedOfDataTransfer","a","startTransfer","now","sum","slice","endTransfer","batteryServiceAction","deviceInfoServiceAction","manufacturerName","WebBluetooth","bluetoothDevice","batteryLevelCharacteristic","gattServer","transferService","services","serviceConnect","CtrlRxCharacteristicUuid","sendDataToDevice","result","CtrlTxCharacteristicUuid","handleResponseControlMsg","StatusCharacteristicUuid","handleLevelChanged","batteryLevel","prevProps","Device","connected","removeDevice","showDrawer","byteTransfered","GATTConnected","connectionRequest","deviceState","logsResult","CheckCircleTwoTone","twoToneColor","LoadingOutlined","CloseCircleOutlined","type","extra","style","color","shape","icon","onClick","width","toFixed","isInteger","percent","size","filter","disconnectGattServer","disconnect","Devices","connectedDevice","map","key","gutter","PlusCircleOutlined","connectedDevices","bluetoothActions","getBinaryRecipe","recipeId","updateRecipeOnDevice","Recipes","onClose","recipesOnDevice","recipes","version","cover","image","replace","buttonVisible","logout","remove","Account","current","handleClick","first_name","last_name","selectedKeys","mode","Item","AntDesignOutlined","ReadOutlined","placement","closable","visible","BluetoothNotAvailable","href","App","authCookie","showPreloader","to","noThrow","default","subTitle","settings","handleActions","payload","binary_recipe","binary_image_r400x400","isFinite","Object","assign","copyObjFromStore","keys","forEach","push","deviceInfoService","GATTDisconnected","stack","preloaderStack","shift","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","thunk","configureStore","reducer","reducers","devTools","process","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.ec7fa66a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/elements.b15f934a.svg\";","import Cookies from 'universal-cookie';\n\nexport const writeStateToCookie = (state, name, duration) => {\n    const cookies = new Cookies();\n    const expiresDate = new Date();\n    // expiresDate.setDate(expiresDate.getDate() + duration);\n    expiresDate.setSeconds(expiresDate.getSeconds() + duration);\n    cookies.set(name, JSON.stringify(state), {\n        path: '/',\n        expires: expiresDate,\n    });\n};\n\nexport const readStateFromCookie = (name) => {\n    const cookies = new Cookies();\n    return cookies.get(name);\n};\n\nexport const removeStateFromCookie = (name) => {\n    const cookies = new Cookies();\n    return cookies.remove(name);\n};\n\nexport const base64ToArrayBuffer = (base64) => {\n    var binary_string = window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n    for (var i = 0; i < len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n};\n","import { createAction } from 'redux-actions';\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\nimport _ from 'lodash';\nimport { writeStateToCookie, removeStateFromCookie } from '../utils';\n// import { dataTransferService } from '../servicesAndCharacteristics';\n\naxios.defaults.baseURL = 'https://portal.pipe.today/api';\n// axios.defaults.withCredentials = false;\n\n///////////////////////\n/////// other ////////\n/////////////////////\n\nexport const showAppPreloader = createAction('SHOW_APP_PRELOADER');\nexport const selectRecipe = createAction('SELECT_RECIPE');\n\n///////////////////////\n//// auth actions ////\n/////////////////////\n\nexport const fetchTokenRequest = createAction('FETCH_TOKEN_REQUEST');\nexport const fetchTokenSuccess = createAction('FETCH_TOKEN_SUCCESS');\nexport const fetchTokenFailure = createAction('FETCH_TOKEN_FAILURE');\n\nexport const convertToken = () => {\n    // export const convertToken = (data, type, appId) => {\n    return (dispatch) => {\n        dispatch(fetchTokenRequest());\n\n        const response = {\n            access_token: 'vw1gWk6snMInNV1CIFENDCOiqn3RGe',\n            expires_in: 2592000,\n            token_type: 'Bearer',\n            scope: 'read write',\n            refresh_token: 'J0QXCv3XLzs22fbJNell77WzxjoaPV',\n        };\n\n        writeStateToCookie(response, 'auth_cookie', response.expires_in);\n\n        dispatch(fetchTokenSuccess(response));\n\n        // axios\n        //     .post('oauth/convert-token/', {\n        //         grant_type: 'convert_token',\n        //         client_id: appId,\n        //         backend: type,\n        //         token: data,\n        //     })\n        //     .then((response) => {\n        //         writeStateToCookie(\n        //             response.data,\n        //             'auth_cookie',\n        //             response.data.expires_in\n        //         );\n        //         dispatch(fetchTokenSuccess(response.data));\n        //     })\n        //     .catch(() => {\n        //         dispatch(fetchTokenFailure());\n        //     });\n    };\n};\n\nexport const logoutRequest = createAction('LOGOUT_REQUEST');\nexport const logoutSuccess = createAction('LOGOUT_SUCCESS');\nexport const logoutFailure = createAction('LOGOUT_FAILURE');\n\nexport const logout = () => {\n    return (dispatch) => {\n        dispatch(logoutRequest());\n        try {\n            removeStateFromCookie('auth_cookie');\n            dispatch(logoutSuccess());\n        } catch (e) {\n            dispatch(logoutFailure());\n            console.log('logout', e.message);\n        }\n    };\n};\n\n///////////////////////\n////// recipes ///////\n/////////////////////\n\nexport const fetchRecipesRequest = createAction('FETCH_RECIPES_REQUEST');\nexport const fetchRecipesSuccess = createAction('FETCH_RECIPES_SUCCESS');\nexport const fetchRecipesFailure = createAction('FETCH_RECIPES_FAILURE');\n\nexport const recipe = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        axios\n            .get('recipe/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(fetchRecipesSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(fetchRecipesFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\n///////////////////////\n//////// user ////////\n/////////////////////\n\nexport const fetchUserRequest = createAction('FETCH_USER_REQUEST');\nexport const fetchUserSuccess = createAction('FETCH_USER_SUCCESS');\nexport const fetchUserFailure = createAction('FETCH_USER_FAILURE');\n\nexport const user = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n        axios\n            .get('user/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(fetchUserSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch((e) => {\n                dispatch(fetchUserFailure());\n                dispatch(showAppPreloader(false));\n\n                switch (e.response.status) {\n                    case 403:\n                        navigate('/');\n                        break;\n                    default:\n                        break;\n                }\n            });\n    };\n};\n\nexport const fetchUserDevicesRequest = createAction(\n    'FETCH_USER_DEVICES_REQUEST'\n);\nexport const fetchUserDevicesSuccess = createAction(\n    'FETCH_USER_DEVICES_SUCCESS'\n);\nexport const fetchUserDevicesFailure = createAction(\n    'FETCH_USER_DEVICES_FAILURE'\n);\n\nexport const userDevices = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipesRequest());\n        dispatch(showAppPreloader(true));\n\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        axios\n            .get('user/devices/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(fetchUserDevicesSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(fetchUserDevicesFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const saveDeviceRequest = createAction('SAVE_DEVICE_REQUEST');\nexport const saveDeviceSuccess = createAction('SAVE_DEVICE_SUCCESS');\nexport const saveDeviceFailure = createAction('SAVE_DEVICE_FAILURE');\n\nexport const saveDevice = (device) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n            data: {\n                userDevices: { devices },\n            },\n        } = getState();\n\n        const newDevices = _.uniqBy(\n            [...devices, { name: device.name, uid: device.name }],\n            'name'\n        );\n\n        if (newDevices.length === devices.length) {\n            return false;\n        }\n\n        dispatch(saveDeviceRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .put(\n                'user/devices/',\n                { devices: newDevices },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                dispatch(saveDeviceSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(saveDeviceFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const removeDeviceRequest = createAction('REMOVE_DEVICE_REQUEST');\nexport const removeDeviceSuccess = createAction('REMOVE_DEVICE_SUCCESS');\nexport const removeDeviceFailure = createAction('REMOVE_DEVICE_FAILURE');\n\nexport const removeDevice = (uid) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n            data: {\n                userDevices: { devices },\n            },\n        } = getState();\n\n        const newDevices = devices.filter((device) => {\n            if (device.uid === uid) {\n                return false;\n            }\n            return true;\n        });\n\n        dispatch(saveDeviceRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .put(\n                'user/devices/',\n                { devices: newDevices },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                dispatch(removeDeviceSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(removeDeviceFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\nexport const getBinaryRecipeRequest = createAction('GET_BINARY_RECIPE_REQUEST');\nexport const getBinaryRecipeSuccess = createAction('GET_BINARY_RECIPE_SUCCESS');\nexport const getBinaryRecipeFailure = createAction('GET_BINARY_RECIPE_FAILURE');\n\nexport const getBinaryRecipe = (recipeId) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        dispatch(getBinaryRecipeRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .get('recipe_binary/' + recipeId + '/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(getBinaryRecipeSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(getBinaryRecipeFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\n///////////////////////\n//////// logs ////////\n/////////////////////\n\nexport const postLogsRequest = createAction('POST_LOGS_REQUEST');\nexport const postLogsSuccess = createAction('POST_LOGS_SUCCESS');\nexport const postLogsFailure = createAction('POST_LOGS_FAILURE');\n\nexport const addHistory = (base64String, deviceUID) => {\n    return (dispatch, getState) => {\n        const {\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        // console.log('addHistory');\n\n        dispatch(postLogsRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .post(\n                '/history_usage/add_history/',\n                {\n                    history_string: base64String,\n                    device_uid: deviceUID,\n                },\n                {\n                    headers: {\n                        Authorization: `Bearer ${access_token}`,\n                    },\n                }\n            )\n            .then((response) => {\n                dispatch(postLogsSuccess(response.data));\n                dispatch(showAppPreloader(false));\n            })\n            .catch(() => {\n                dispatch(postLogsFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n","import React, { Component } from 'react';\n\nexport default class Loader extends Component {\n    render() {\n        return (\n            <div className=\"loader__container\">\n                <div className=\"loader\">\n                    <div className=\"lds-ripple\">\n                        <div></div>\n                        <div></div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport GoogleLogin from 'react-google-login';\nimport * as actions from '../../actions';\n\n// const responseGoogle = (response, status) => {\n//     console.log(response, status);\n// };\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n};\n\nclass GoogleOauth extends Component {\n    responseGoogleRequest = () => {\n        // console.log(response, 'request');\n    };\n\n    responseGoogleSuccess = (response) => {\n        const { convertToken } = this.props;\n        convertToken(\n            response.accessToken,\n            'google-oauth2',\n            'h19R0p6UGmYKzuc4fg1uaPlHwXPOc8GktswMZEdu'\n        );\n    };\n\n    responseGoogleFailure = () => {\n        // console.log(response, 'failure');\n    };\n\n    render() {\n        return (\n            <GoogleLogin\n                // clientId=\"385449723022-vmed4lc1a8a1t3fsat4flujbobsblv01.apps.googleusercontent.com\"\n                clientId=\"205221816405-0lvlolma2t1lvif67t749qee7h9te473.apps.googleusercontent.com\"\n                // redirectUri=\"http://localhost:3000\"\n                buttonText=\"Login\"\n                onSuccess={this.responseGoogleSuccess}\n                onFailure={this.responseGoogleFailure}\n                onRequest={this.responseGoogleRequest}\n                cookiePolicy={'single_host_origin'}\n                className=\"google-oauth-btn\"\n            />\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(GoogleOauth);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport FacebookLogin from 'react-facebook-login';\nimport * as actions from '../../actions';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n    } = state;\n    return {\n        token,\n    };\n};\n\nconst actionCreators = {\n    convertToken: actions.convertToken,\n};\n\n// window.onResponseFacebook = (response) => {\n//     console.log('response Facebook', response);\n// };\n\nclass FacebookOauth extends Component {\n    state = {\n        response: null,\n        failure: null,\n    };\n\n    responseFacebook = (response) => {\n        const { convertToken } = this.props;\n        this.setState({ response });\n        convertToken(\n            response.accessToken,\n            'facebook',\n            'h19R0p6UGmYKzuc4fg1uaPlHwXPOc8GktswMZEdu'\n        );\n    };\n\n    onFailure = (failure) => {\n        this.setState({ failure });\n    };\n\n    onResponseFacebook = (response) => {\n        console.log('response Facebook', response);\n    };\n\n    componentDidMount() {\n        // console.log('facebook', window.FB);\n        // window.FB.getLoginStatus(this.onResponseFacebook);\n        // window.FB.login();\n        const { convertToken } = this.props;\n        convertToken();\n    }\n\n    render() {\n        // console.log('Facebook: ', window.FB);\n        return (\n            <>\n                <FacebookLogin\n                    appId=\"369580627566109\"\n                    autoLoad={false}\n                    fields=\"name,email,picture\"\n                    callback={this.responseFacebook}\n                    onFailure={this.onFailure}\n                    textButton=\"Login\"\n                    // isMobile={false}\n                    redirectUri={'https://portal.pipe.today/'}\n                    // disableMobileRedirect={true}\n                />\n                {/* <FacebookLogin\n                    appId=\"3315968511865055\"\n                    autoLoad={true}\n                    fields=\"name,email,picture\"\n                    callback={this.responseFacebook}\n                    onFailure={this.onFailure}\n                    textButton=\"Login\"\n                    // isMobile={false}\n                    // redirectUri={'https://sashakrauzer.github.io/'}\n                    disableMobileRedirect={true}\n                /> */}\n                {/* <div\n                    className=\"fb-login-button\"\n                    data-size=\"large\"\n                    data-button-type=\"login_with\"\n                    data-layout=\"default\"\n                    data-auto-logout-link=\"false\"\n                    data-use-continue-as=\"false\"\n                    data-width=\"\"\n                    // data-onlogin={this.onResponseFacebook}\n                    data-onlogin=\"onResponseFacebook();\"\n                ></div> */}\n                {/* <div>{JSON.stringify(this.state.response)}</div> */}\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(FacebookOauth);\n","import React, { Component } from 'react';\n\nimport GoogleOauth from '../../GoogleOauth/index.jsx';\nimport FacebookOauth from '../../FacebookOauth/index.jsx';\nimport logo from '../../../assets/images/elements.svg';\n\nclass Login extends Component {\n    render() {\n        // var isOpera =\n        //     (!!window.opr && !!window.opr.addons) ||\n        //     !!window.opera ||\n        //     navigator.userAgent.indexOf(' OPR/') >= 0;\n\n        // // Firefox 1.0+\n        // var isFirefox = typeof InstallTrigger !== 'undefined';\n\n        // // Safari 3.0+ \"[object HTMLElementConstructor]\"\n        // var isSafari =\n        //     /constructor/i.test(window.HTMLElement) ||\n        //     (function (p) {\n        //         return p.toString() === '[object SafariRemoteNotification]';\n        //     })(\n        //         !window['safari'] ||\n        //             (typeof safari !== 'undefined' &&\n        //                 window.safari.pushNotification)\n        //     );\n\n        // // Internet Explorer 6-11\n        // var isIE = /*@cc_on!@*/ false || !!document.documentMode;\n\n        // // Edge 20+\n        // var isEdge = !isIE && !!window.StyleMedia;\n\n        // // Chrome 1 - 79\n        // var isChrome =\n        //     !!window.chrome &&\n        //     (!!window.chrome.webstore || !!window.chrome.runtime);\n\n        // // Edge (based on chromium) detection\n        // var isEdgeChromium =\n        //     isChrome && navigator.userAgent.indexOf('Edg') !== -1;\n\n        // // Blink engine detection\n        // var isBlink = (isChrome || isOpera) && !!window.CSS;\n\n        // var output = 'Detecting browsers by ducktyping:<hr>';\n        // output += 'isFirefox: ' + isFirefox + '<br>';\n        // output += 'isChrome: ' + isChrome + '<br>';\n        // output += 'isSafari: ' + isSafari + '<br>';\n        // output += 'isOpera: ' + isOpera + '<br>';\n        // output += 'isIE: ' + isIE + '<br>';\n        // output += 'isEdge: ' + isEdge + '<br>';\n        // output += 'isEdgeChromium: ' + isEdgeChromium + '<br>';\n        // output += 'isBlink: ' + isBlink + '<br>';\n        // output += 'User Agent: ' + navigator.userAgent + '<br>';\n        const { isLogged } = this.props;\n        if (!isLogged) {\n            // dfsfds\n        }\n        return (\n            <div className=\"App\" path=\"/\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <div className=\"login-btn-wrap\">\n                        {!navigator.userAgent.includes('cider') ? (\n                            <GoogleOauth />\n                        ) : null}\n\n                        <FacebookOauth />\n                    </div>\n                    {/* <div dangerouslySetInnerHTML={{ __html: output }} /> */}\n                    {/* {output} */}\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","// export default [\n//     {\n//         name: 'Device Information Service',\n//         uuid: 0x180a,\n//         description: 'Exposes manufacturer and/or information about a device',\n//         characteristics: [\n//             {\n//                 name: 'Manufacturer Name String',\n//                 uuid: 0x2a29,\n//                 description: 'Represent the name of the manufacturer of device',\n//                 properties: ['read'],\n//             },\n//         ],\n//     },\n//     {\n//         name: 'Battery Service',\n//         uuid: 0x180f,\n//         description:\n//             'Exposes the Battery Level of a single battery or set of batteries in a device',\n//         characteristics: [\n//             {\n//                 name: 'Battery Level',\n//                 uuid: 0x2a19,\n//                 description: 'Represent level of the battery in a device',\n//                 properties: ['read', 'notify'],\n//             },\n//         ],\n//     },\n//     {\n//         name: 'Data Transfer Service',\n//         uuid: '5cf052d0-2403-4719-a558-b7e72c48112f',\n//         description: 'Provide data receive and transmitting of a data',\n//         characteristics: [\n//             {\n//                 name: 'Data Receive',\n//                 uuid: '5cf052d1-2403-4719-a558-b7e72c48112f',\n//                 description: 'Receive data channel',\n//                 properties: ['write'],\n//             },\n//             {\n//                 name: 'Data Transmit',\n//                 uuid: '5cf052d2-2403-4719-a558-b7e72c48112f',\n//                 description: 'Transmit data channel',\n//                 properties: ['read', 'notify'],\n//             },\n//             {\n//                 name: 'Control Receive',\n//                 uuid: '5cf052d3-2403-4719-a558-b7e72c48112f',\n//                 description: 'Control data receive channel',\n//                 properties: ['write'],\n//             },\n//             {\n//                 name: 'Control Transmit',\n//                 uuid: '5cf052d4-2403-4719-a558-b7e72c48112f',\n//                 description: 'Control data transmit channel',\n//                 properties: ['read', 'notify'],\n//             },\n//             {\n//                 name: 'Status',\n//                 uuid: '5cf052d5-2403-4719-a558-b7e72c48112f',\n//                 description: 'Expose status of transfer data',\n//                 properties: ['write', 'read', 'notify'],\n//             },\n//         ],\n//     },\n// ];\n\nexport const deviceInformationService = {\n    name: 'Device Information Service',\n    uuid: 0x180a,\n    description: 'Exposes manufacturer and/or information about a device',\n    characteristics: [\n        {\n            name: 'Manufacturer Name String',\n            uuid: 0x2a29,\n            description: 'Represent the name of the manufacturer of device',\n            properties: ['read'],\n        },\n    ],\n};\n\nexport const batteryService = {\n    name: 'Battery Service',\n    uuid: 0x180f,\n    description:\n        'Exposes the Battery Level of a single battery or set of batteries in a device',\n    characteristics: [\n        {\n            name: 'Battery Level',\n            uuid: 0x2a19,\n            description: 'Represent level of the battery in a device',\n            properties: ['read', 'notify'],\n        },\n    ],\n};\n\nexport const dataTransferService = {\n    name: 'Data Transfer Service',\n    uuid: '5cf052d0-2403-4719-a558-b7e72c48112f',\n    description: 'Provide data receive and transmitting of a data',\n    characteristics: {\n        dataReceive: {\n            name: 'Data Receive',\n            uuid: '5cf052d1-2403-4719-a558-b7e72c48112f',\n            description: 'Receive data channel',\n            properties: ['write'],\n        },\n        dataTransmit: {\n            name: 'Data Transmit',\n            uuid: '5cf052d2-2403-4719-a558-b7e72c48112f',\n            description: 'Transmit data channel',\n            properties: ['read', 'notify'],\n        },\n        controlReceive: {\n            name: 'Control Receive',\n            uuid: '5cf052d3-2403-4719-a558-b7e72c48112f',\n            description: 'Control data receive channel',\n            properties: ['write'],\n        },\n        controlTransmit: {\n            name: 'Control Transmit',\n            uuid: '5cf052d4-2403-4719-a558-b7e72c48112f',\n            description: 'Control data transmit channel',\n            properties: ['read', 'notify'],\n        },\n        status: {\n            name: 'Status',\n            uuid: '5cf052d5-2403-4719-a558-b7e72c48112f',\n            description: 'Expose status of transfer data',\n            properties: ['write', 'read', 'notify'],\n        },\n    },\n};\n\nexport const recipeInfoService = {\n    name: 'Recipe Info Service',\n    uuid: '32dd23d0-d223-4462-34ad-434ec288113c',\n    description: '',\n    characteristics: {\n        recipeListLowPart: {\n            name: 'Recipe List Low Part',\n            uuid: '32dd23d1-d223-4462-34ad-434ec288113c',\n            description: 'Exporse first 3 slots of recipe list',\n            properties: ['read', 'notify'],\n        },\n        recipeListMidPart: {\n            name: 'Recipe List Mid Part',\n            uuid: '32dd23d2-d223-4462-34ad-434ec288113c',\n            description: 'Exporse mid 3 slots of recipe list',\n            properties: ['read', 'notify'],\n        },\n        recipeListHighPart: {\n            name: 'Recipe List High Part',\n            uuid: '32dd23d3-d223-4462-34ad-434ec288113c',\n            description: 'Exporse last 3 slots of recipe list',\n            properties: ['read', 'notify'],\n        },\n        recipeListSize: {\n            name: 'Recipe List Size',\n            uuid: '32dd23d4-d223-4462-34ad-434ec288113c',\n            description: 'Exporse size of recipe list',\n            properties: ['read', 'notify'],\n        },\n    },\n};\n\nexport const commandService = {\n    name: 'Command Service',\n    uuid: 'dad54500-2ee3-6213-624a-aeca328f132a',\n    description: '',\n    characteristics: {\n        command: {\n            name: 'Command',\n            uuid: 'dad54501-2ee3-6213-624a-aeca328f132a',\n            description: '',\n            properties: ['write'],\n        },\n        commandStatus: {\n            name: 'Command Status',\n            uuid: 'dad54502-2ee3-6213-624a-aeca328f132a',\n            description: '',\n            properties: ['notify'],\n        },\n    },\n};\n","class ActionUtils {\n    prepareControlReceiveBuffer = (action, data) => {\n        if (action === 'writeRecipeRequest' && data.length) {\n            let buffer = new ArrayBuffer(20);\n            let msgKeyWord8 = 0x0a;\n            let operationCode = 0xff;\n            // let dataSize32 = 0x2334;\n            let dataSize32 = data.length;\n            let dataType16 = 0x6;\n\n            new DataView(buffer).setInt8(0, msgKeyWord8, true);\n            new DataView(buffer).setInt8(1, operationCode, true);\n            new DataView(buffer).setInt32(2, dataSize32, true);\n            new DataView(buffer).setInt16(6, dataType16, true);\n            return buffer;\n        }\n        if (action === 'writeImgRequest' && data.length) {\n            let buffer = new ArrayBuffer(20);\n            let msgKeyWord8 = 0x0a;\n            let operationCode = 0xff;\n            // let dataSize32 = 0x2334;\n            let dataSize32 = data.length;\n            let dataType16 = 0x2;\n\n            new DataView(buffer).setInt8(0, msgKeyWord8, true);\n            new DataView(buffer).setInt8(1, operationCode, true);\n            new DataView(buffer).setInt32(2, dataSize32, true);\n            new DataView(buffer).setInt16(6, dataType16, true);\n            return buffer;\n        }\n        if (action === 'fetchLogs') {\n            let buffer = new ArrayBuffer(20);\n            let msgKeyWord8 = 0x0e;\n            let operationCode = 0x00;\n            // let dataSize32 = 0x2334;\n            let dataSize32 = 0;\n            let dataType16 = 0x7;\n\n            new DataView(buffer).setInt8(0, msgKeyWord8, true);\n            new DataView(buffer).setInt8(1, operationCode, true);\n            new DataView(buffer).setInt32(2, dataSize32, true);\n            new DataView(buffer).setInt16(6, dataType16, true);\n            return buffer;\n        }\n        if (action === 'fetchLogsReady') {\n            let buffer = new ArrayBuffer(20);\n            let msgKeyWord8 = 0x0a;\n            let operationCode = 0x00;\n            // let dataSize32 = 0x2334;\n            let dataSize32 = 0;\n            let dataType16 = 0x7;\n\n            new DataView(buffer).setInt8(0, msgKeyWord8, true);\n            new DataView(buffer).setInt8(1, operationCode, true);\n            new DataView(buffer).setInt32(2, dataSize32, true);\n            new DataView(buffer).setInt16(6, dataType16, true);\n            return buffer;\n        }\n    };\n\n    prepareCommandBuffer = (action, data) => {\n        if (action === 'removeRecipe' && data.id) {\n            let buffer = new ArrayBuffer(20);\n            let msgKeyWord8 = 0x12;\n            let recipeID = Number(data.id);\n\n            new DataView(buffer).setInt8(0, msgKeyWord8, true);\n            new DataView(buffer).setInt32(1, recipeID, true);\n            return buffer;\n        }\n    };\n}\n\nconst instance = new ActionUtils();\nexport default instance;\n","import { createAction } from 'redux-actions';\nimport axios from 'axios';\nimport { Modal } from 'antd';\n// import { navigate } from '@reach/router';\n// import _ from 'lodash';\n// import { writeStateToCookie } from '../utils/index';\nimport {\n    dataTransferService,\n    recipeInfoService,\n    commandService,\n} from '../servicesAndCharacteristics';\n// import Helper from './actionHelper';\nimport Utils from './actionUtils';\n\nimport {\n    saveDevice,\n    showAppPreloader,\n    addHistory,\n    getBinaryRecipeRequest,\n    getBinaryRecipeSuccess,\n    getBinaryRecipeFailure,\n} from './index';\n\naxios.defaults.baseURL = 'https://portal.pipe.today/api';\n\n// console.log(Helper.name);\n\n// let HelperOfDevice;\n\n// let dispatch = null;\n\n///////////////////////\n///// Bluetooth //////\n/////////////////////\n\nexport const connectToDeviceRequest = createAction('CONNECT_TO_DEVICE_REQUEST');\nexport const connectToDeviceSuccess = createAction('CONNECT_TO_DEVICE_SUCCESS');\nexport const connectToDeviceFailure = createAction('CONNECT_TO_DEVICE_FAILURE');\n\n// Подключение к выбраному устройству\nexport const connectToDevice = (newFilters) => {\n    return (dispatch, getState) => {\n        const {\n            // bluetooth: { devices: devicesFromStore, device: deviceFromStore },\n            bluetooth: { device: deviceFromStore },\n        } = getState();\n\n        // alert('action connectToDevice');\n\n        dispatch(connectToDeviceRequest());\n\n        const filters = newFilters;\n        // const filters = newFilters || [{ namePrefix: 'Pipe' }];\n        // const filters = newFilters || [{ namePrefix: 'Blue' }];\n        // const filters = newFilters;\n        navigator.bluetooth\n            .requestDevice({\n                acceptAllDevices: filters ? undefined : true,\n                filters,\n                optionalServices: [\n                    dataTransferService.uuid,\n                    recipeInfoService.uuid,\n                    commandService.uuid,\n                    'battery_service',\n                    0x2a29,\n                    0x180a,\n                ],\n            })\n            .then((device) => {\n                // if (\n                //     _.find(\n                //         devicesFromStore,\n                //         (deviceFromStore) =>\n                //             deviceFromStore.name === device.name\n                //     )\n                // )\n                if (deviceFromStore && deviceFromStore.name === device.name) {\n                    throw new Error('device has already been added');\n                } else {\n                    console.log(\n                        '%cconnected device:',\n                        'color:green; font-size:2em; border-top:10px solid red'\n                    );\n                    console.log(device);\n\n                    // Ставим обработчик на случай дисконекта устройства\n                    device.ongattserverdisconnected = (event) =>\n                        dispatch(onDisconnected(event));\n\n                    // device.addEventListener('gattserverdisconnected', (event) =>\n                    //     dispatch(onDisconnected(event))\n                    // );\n\n                    dispatch(connectToDeviceSuccess(device));\n\n                    // Сохраняем устройство в базу\n                    dispatch(saveDevice(device));\n\n                    // Подключаемся к серверу GATT\n                    dispatch(connectToGATTServer(device));\n                }\n            })\n            .catch((error = { message: 'connectToDeviceFailure' }) => {\n                console.log(error.message);\n                dispatch(connectToDeviceFailure());\n            });\n    };\n};\n\nexport const deviceDisconnected = createAction('DEVICE_DISCONNECTED');\nexport const failedToReconnect = createAction('FAILED_TO_RECONNECT');\nexport const deviceConnecting = createAction('DEVICE_CONNECTING');\nexport const deviceReconnected = createAction('DEVICE_RECONNECTED');\n\n// Обработчик события отключения устройства\nexport const onDisconnected = (event) => {\n    return (dispatch) => {\n        dispatch(deviceDisconnected());\n\n        const device = event.target;\n\n        console.log(`Device ${device.name} is disconnected.`);\n        // console.log(event);\n\n        dispatch(connectToGATTServer(device));\n    };\n};\n\nexport const fetchRecipesIDOnDevice = createAction('FETCH_RECIPES_ON_DEVICE');\n\nexport const connectGattRequest = createAction('CONNECT_GATT_REQUEST');\nexport const connectGattSuccess = createAction('CONNECT_GATT_SUCCESS');\nexport const connectGattFailure = createAction('CONNECT_GATT_FAILURE');\n\nexport const connectDataTransferServiceSuccess = createAction(\n    'CONNECT_DATA_TRANSFER_SERVICE_SUCCESS'\n);\nexport const connectRecipeInfoServiceSuccess = createAction(\n    'CONNECT_RECIPE_INFO_SERVICE_SUCCESS'\n);\nexport const connectCommandServiceSuccess = createAction(\n    'CONNECT_COMMAND_SERVICE_SUCCESS'\n);\n\n// Подключение к GATT серверу выбранного устройства\nexport const connectToGATTServer = (device) => {\n    return (dispatch, getState) => {\n        exponentialBackoff(\n            3 /* max retries */,\n            2 /* seconds delay */,\n            function toTry() {\n                dispatch(connectGattRequest({ device }));\n                time('Connecting to Bluetooth Device... ');\n                return device.gatt.connect();\n            },\n            function success(server) {\n                console.log(\n                    '%cGATT server:',\n                    'color:green; font-size:2em; border-top:10px solid red'\n                );\n                console.log(server);\n\n                dispatch(connectGattSuccess({ server, device }));\n\n                // Успешное подключение к устройству. Вызываем дополнительные сервисы\n\n                // Подписка на характеристики Data Transfer Service\n                server\n                    .getPrimaryService(dataTransferService.uuid)\n                    .then((service) => {\n                        dispatch(connectDataTransferServiceSuccess(service));\n                        return service.getCharacteristic(\n                            dataTransferService.characteristics.controlTransmit\n                                .uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            (event) =>\n                                handleControlTransmit(event, dispatch, getState)\n                        );\n\n                        const {\n                            bluetooth: { dataTransferService: service },\n                        } = getState();\n\n                        return service.getCharacteristic(\n                            dataTransferService.characteristics.status.uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            (event) =>\n                                handleStatusTransferData(\n                                    event,\n                                    dispatch,\n                                    getState\n                                )\n                        );\n\n                        const {\n                            bluetooth: { dataTransferService: service },\n                        } = getState();\n\n                        return service.getCharacteristic(\n                            dataTransferService.characteristics.dataTransmit\n                                .uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            (event) =>\n                                handleTransmitData(event, dispatch, getState)\n                        );\n                    })\n                    .catch((error) => {\n                        console.log('DataTransferService', error);\n                    });\n\n                // Подписка на характеристики Recipe Info Service\n                server\n                    .getPrimaryService(recipeInfoService.uuid)\n                    .then((service) => {\n                        dispatch(connectRecipeInfoServiceSuccess(service));\n\n                        return service.getCharacteristic(\n                            recipeInfoService.characteristics.recipeListLowPart\n                                .uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            (event) =>\n                                handleRecipeList(event, dispatch, getState)\n                        );\n\n                        return characteristic.readValue();\n                    })\n                    .then((value) => {\n                        console.log('RV - recipeListLowPart: ', value.buffer);\n\n                        dispatch(\n                            fetchRecipesIDOnDevice({\n                                recipesIDList: {\n                                    [value.getUint32(0, true)]: value.getUint16(\n                                        4,\n                                        true\n                                    ),\n                                    [value.getUint32(6, true)]: value.getUint16(\n                                        10,\n                                        true\n                                    ),\n                                    [value.getUint32(\n                                        12,\n                                        true\n                                    )]: value.getUint16(16, true),\n                                },\n                                from: 'lowPart',\n                            })\n                        );\n\n                        const {\n                            bluetooth: { recipeInfoService: service },\n                        } = getState();\n\n                        return service.getCharacteristic(\n                            recipeInfoService.characteristics.recipeListMidPart\n                                .uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            (event) =>\n                                handleRecipeList(event, dispatch, getState)\n                        );\n\n                        return characteristic.readValue();\n                    })\n                    .then((value) => {\n                        console.log('RV - recipeListMidPart: ', value.buffer);\n\n                        dispatch(\n                            fetchRecipesIDOnDevice({\n                                recipesIDList: {\n                                    [value.getUint32(0, true)]: value.getUint16(\n                                        4,\n                                        true\n                                    ),\n                                    [value.getUint32(6, true)]: value.getUint16(\n                                        10,\n                                        true\n                                    ),\n                                    [value.getUint32(\n                                        12,\n                                        true\n                                    )]: value.getUint16(16, true),\n                                },\n                                from: 'midPart',\n                            })\n                        );\n\n                        const {\n                            bluetooth: { recipeInfoService: service },\n                        } = getState();\n\n                        return service.getCharacteristic(\n                            recipeInfoService.characteristics.recipeListHighPart\n                                .uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            (event) =>\n                                handleRecipeList(event, dispatch, getState)\n                        );\n\n                        return characteristic.readValue();\n                    })\n                    .then((value) => {\n                        console.log('RV - recipeListHighPart: ', value.buffer);\n\n                        dispatch(\n                            fetchRecipesIDOnDevice({\n                                recipesIDList: {\n                                    [value.getUint32(0, true)]: value.getUint16(\n                                        4,\n                                        true\n                                    ),\n                                    [value.getUint32(6, true)]: value.getUint16(\n                                        10,\n                                        true\n                                    ),\n                                    [value.getUint32(\n                                        12,\n                                        true\n                                    )]: value.getUint16(16, true),\n                                },\n                                from: 'highPart',\n                            })\n                        );\n\n                        const {\n                            bluetooth: { recipeInfoService: service },\n                        } = getState();\n\n                        return service.getCharacteristic(\n                            recipeInfoService.characteristics.recipeListSize\n                                .uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            (event) =>\n                                handleSizeOfRecipeList(\n                                    event,\n                                    dispatch,\n                                    getState\n                                )\n                        );\n\n                        return characteristic.readValue();\n                    })\n                    .then((value) => {\n                        console.log(\n                            'RV - handleSizeOfRecipeList: ',\n                            value.buffer\n                        );\n                    })\n                    .catch((error) => {\n                        console.log('RecipeInfoService', error);\n                    });\n\n                // Подписка на комманд сервис\n                server\n                    .getPrimaryService(commandService.uuid)\n                    .then((service) => {\n                        dispatch(connectCommandServiceSuccess(service));\n\n                        return service.getCharacteristic(\n                            commandService.characteristics.command.uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        return characteristic.startNotifications();\n                    })\n                    .then((characteristic) => {\n                        characteristic.addEventListener(\n                            'characteristicvaluechanged',\n                            (event) => handleCommand(event, dispatch, getState)\n                        );\n                    })\n                    .catch((error) => {\n                        console.log('CommandService', error);\n                    });\n\n                try {\n                    // Уровень заряда батареи\n                    dispatch(batteryService());\n\n                    // Получение логов с устройства\n                    // dispatch(getLogs());\n\n                    // Список рецептов на устройстве\n                    // dispatch(recipeInfo());\n                } catch (e) {\n                    console.log('catch from success GATT', e.message);\n                }\n            },\n            function fail() {\n                dispatch(connectGattFailure({ device }));\n                time('Failed to connect.');\n\n                Modal.error({\n                    title: 'Failed to reconnect',\n                    content: 'Please try again later',\n                });\n            }\n        );\n\n        function exponentialBackoff(max, delay, toTry, success, fail) {\n            toTry()\n                .then((server) => success(server))\n                .catch((error) => {\n                    console.log('catch', error);\n                    if (max === 0) {\n                        return fail();\n                    }\n                    time(\n                        'Retrying in ' + delay + 's... (' + max + ' tries left)'\n                    );\n                    setTimeout(function () {\n                        exponentialBackoff(\n                            --max,\n                            delay * 2,\n                            toTry,\n                            success,\n                            fail\n                        );\n                    }, delay * 1000);\n                });\n        }\n\n        function time(text) {\n            console.log('[' + new Date().toJSON().substr(11, 8) + '] ' + text);\n        }\n    };\n};\n\nexport const disconnectGattServer = (device) => {\n    return () => {\n        // console.log('disconnectGattServer', device);\n        device.device.gatt.disconnect();\n    };\n};\n\n// Обработчик события отключения устройства\n// export const initDeviceHelper = (server, device) => {\n//     return (dispatch, getState) => {\n//         HelperOfDevice = new Helper({ dispatch, getState, server, device });\n//     };\n// };\n\nexport const startReceiveOfLogs = createAction('START_RECEIVE_OF_LOGS');\nexport const receivedLogs = createAction('RECEIVED_LOGS');\nexport const endReceiveOfLogs = createAction('END_RECEIVE_OF_LOGS');\n\nexport const fetchLogsRequest = createAction('FETCH_LOGS_REQUEST');\nexport const fetchLogsSuccess = createAction('FETCH_LOGS_SUCCESS');\nexport const fetchLogsFailure = createAction('FETCH_LOGS_FAILURE');\n\nexport const getLogs = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchLogsRequest());\n\n        const {\n            bluetooth: { server },\n        } = getState();\n\n        // let service = null;\n\n        // let logs = null;\n        // let key = 0;\n\n        server\n            .getPrimaryService(dataTransferService.uuid)\n            .then((service) => {\n                return service.getCharacteristic(\n                    dataTransferService.characteristics.controlReceive.uuid\n                );\n            })\n            .then((characteristic) => {\n                let buffer = Utils.prepareControlReceiveBuffer('fetchLogs');\n\n                console.log(\n                    '%ccontrol receive:',\n                    'color:green; font-size:2em; border-top:10px solid red'\n                );\n                console.log(new Int8Array(buffer));\n\n                characteristic.writeValue(new Int8Array(buffer));\n            })\n            .catch((error) => {\n                console.log('no logs', error);\n                dispatch(fetchLogsFailure());\n            });\n\n        // function handleStatusTransferData(event) {\n        //     let value = event.target.value;\n        //     console.log('handleStatusTransferData', value, value.getUint8(0));\n        // }\n\n        // function handleTransmitData(event) {\n        //     let value = event.target.value;\n        //     console.log(\n        //         'handleTransmitData',\n        //         value.buffer,\n        //         value.getUint8(0),\n        //         'logs byteLength: ' + logs.byteLength,\n        //         'logs buffer: ' + logs\n        //     );\n\n        //     let i = 0;\n        //     while (i < 20) {\n        //         if (key >= logs.byteLength) {\n        //             break;\n        //         }\n        //         // console.log('Uint8', value.getUint8(i));\n        //         new DataView(logs).setInt8(key, value.getUint8(i));\n        //         key++;\n        //         i++;\n        //     }\n        //     // console.log(logs);\n\n        //     if (key === logs.byteLength) {\n        //         let base64String = btoa(\n        //             String.fromCharCode(...new Uint8Array(logs))\n        //         );\n        //         console.log('base64', base64String);\n        //         dispatch(fetchLogsSuccess(base64String));\n        //         dispatch(addHistory(base64String, device.name));\n        //     }\n        // }\n\n        // function handleControlTransmit(event) {\n        //     let status = event.target.value.getUint8(0),\n        //         operationCode = event.target.value.getUint8(1),\n        //         dataLength = event.target.value.getUint32(2, true),\n        //         dataType = event.target.value.getUint16(6, true);\n        //     console.log(\n        //         'handleControlTransmit',\n        //         status,\n        //         '----',\n        //         operationCode,\n        //         '----',\n        //         dataType,\n        //         '----',\n        //         event.target.value\n        //     );\n\n        //     if (0x0a === status && dataType === 0x7 && dataLength) {\n        //         logs = new ArrayBuffer(dataLength);\n\n        //         service\n        //             .getCharacteristic(\n        //                 dataTransferService.characteristics.status.uuid\n        //             )\n        //             .then((characteristic) => {\n        //                 return characteristic.startNotifications();\n        //             })\n        //             .then((characteristic) => {\n        //                 characteristic.oncharacteristicvaluechanged = handleStatusTransferData;\n        //                 return service.getCharacteristic(\n        //                     dataTransferService.characteristics.dataTransmit\n        //                         .uuid\n        //                 );\n        //             })\n        //             .then((characteristic) => {\n        //                 return characteristic.startNotifications();\n        //             })\n        //             .then((characteristic) => {\n        //                 characteristic.oncharacteristicvaluechanged = handleTransmitData;\n\n        //                 return service.getCharacteristic(\n        //                     dataTransferService.characteristics.controlReceive\n        //                         .uuid\n        //                 );\n        //             })\n        //             .then((characteristic) => {\n        //                 let buffer = Utils.prepareControlReceiveBuffer(\n        //                     'fetchLogsReady'\n        //                 );\n\n        //                 console.log(\n        //                     '%ccontrol receive:',\n        //                     'color:green; font-size:2em; border-top:10px solid red'\n        //                 );\n        //                 console.log(new Int8Array(buffer));\n        //                 characteristic.writeValue(new Int8Array(buffer));\n        //             })\n        //             .catch((error) => {\n        //                 alert('prepare to sending data error: ' + error);\n        //             });\n        //     }\n        // }\n    };\n};\n\nexport const fetchBatteryServiceRequest = createAction(\n    'FETCH_BATTERY_SERVICE_REQUEST'\n);\nexport const fetchBatteryServiceSuccess = createAction(\n    'FETCH_BATTERY_SERVICE_SUCCESS'\n);\nexport const fetchBatteryServiceFailure = createAction(\n    'FETCH_BATTERY_SERVICE_FAILURE'\n);\n\nexport const fetchBatteryCharacteristicSuccess = createAction(\n    'FETCH_BATTERY_CHARACTERISTIC_SUCCESS'\n);\n\nexport const batteryService = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchBatteryServiceRequest());\n\n        const {\n            bluetooth: { server },\n        } = getState();\n        // console.log('1');\n\n        // HelperOfDevice.readMyProp();\n\n        let service = null;\n        server\n            .getPrimaryService('battery_service')\n            .then((ser) => {\n                service = ser;\n                dispatch(fetchBatteryServiceSuccess());\n                // console.log('2');\n                return service.getCharacteristic('battery_level');\n            })\n            .catch(() => {\n                // console.log('3');\n                dispatch(fetchBatteryServiceFailure());\n            })\n            .then((characteristic) => {\n                return characteristic.startNotifications();\n            })\n            .then((characteristic) => {\n                // console.log('4');\n                // if (characteristic) {\n                //     console.log('4.1');\n                //     characteristic.startNotifications();\n                //     characteristic.addEventListener(\n                //         'characteristicvaluechanged',\n                //         handleBatteryLevelChange\n                //     );\n                //     return characteristic.readValue();\n                // }\n                // throw new Error('characteristic baterry level not found');\n\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    handleBatteryLevelChange\n                );\n\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                // console.log('Battery service', value.buffer);\n                // console.log('5');\n                dispatch(\n                    fetchBatteryServiceSuccess({ level: value.getUint8(0) })\n                );\n            })\n            .catch(() => {});\n\n        function handleBatteryLevelChange(event) {\n            dispatch(\n                fetchBatteryServiceSuccess({\n                    level: event.target.value.getUint8(0),\n                })\n            );\n        }\n    };\n};\n\nexport const fetchDeviceInfoRequest = createAction('FETCH_DEVICE_INFO_REQUEST');\nexport const fetchDeviceInfoSuccess = createAction('FETCH_DEVICE_INFO_SUCCESS');\nexport const fetchDeviceInfoFailure = createAction('FETCH_DEVICE_INFO_FAILURE');\n\nexport const fetchDeviceInfoCharacteristicSuccess = createAction(\n    'FETCH_DEVICE_INFO_CHARACTERISTIC_SUCCESS'\n);\n\nexport const deviceInfoService = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchDeviceInfoRequest());\n\n        const {\n            bluetooth: { server },\n        } = getState();\n\n        server\n            .getPrimaryService(0x180a)\n            .then((service) => {\n                dispatch(fetchDeviceInfoSuccess());\n                return service.getCharacteristic(0x2a29);\n            })\n            .catch(() => {\n                dispatch(fetchDeviceInfoFailure());\n            })\n            .then((characteristic) => {\n                if (characteristic) {\n                    return characteristic.readValue();\n                }\n                throw new Error('characteristic manufacturerName not found');\n            })\n            .then((value) => {\n                dispatch(\n                    fetchDeviceInfoCharacteristicSuccess({\n                        manufacturerName: value.getUint8(0),\n                    })\n                );\n            })\n            .catch(() => {});\n    };\n};\n\nexport const fetchRecipeInfoRequest = createAction('FETCH_RECIPE_INFO_REQUEST');\nexport const fetchRecipeInfoSuccess = createAction('FETCH_RECIPE_INFO_SUCCESS');\nexport const fetchRecipeInfoFailure = createAction('FETCH_RECIPE_INFO_FAILURE');\n\nexport const recipeInfo = () => {\n    return (dispatch, getState) => {\n        dispatch(fetchRecipeInfoRequest());\n\n        const {\n            bluetooth: { server },\n        } = getState();\n\n        let service = null;\n        console.log('RecipeInfo request', server);\n        server\n            .getPrimaryService(recipeInfoService.uuid)\n            .then((ser) => {\n                service = ser;\n                console.log('RecipeInfo service');\n                return service.getCharacteristic(\n                    recipeInfoService.characteristics.recipeListLowPart.uuid\n                );\n            })\n            .then((characteristic) => {\n                console.log('RecipeInfo read first value');\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('recipeListLowPart', value.buffer);\n                return service.getCharacteristic(\n                    recipeInfoService.characteristics.recipeListHighPart.uuid\n                );\n            })\n            .then((characteristic) => {\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('recipeListHighPart', value.buffer);\n                dispatch(fetchRecipeInfoSuccess());\n            })\n            .catch((error) => {\n                dispatch(fetchRecipeInfoFailure());\n                console.log('error recipeInfo', error);\n            });\n    };\n};\n\n// export const Request = createAction('FETCH_RECIPE_INFO_REQUEST');\n// export const fetchRecipeInfoSuccess = createAction('FETCH_RECIPE_INFO_SUCCESS');\n// export const fetchRecipeInfoFailure = createAction('FETCH_RECIPE_INFO_FAILURE');\n\n// export const recipeInfo = () => {\n//     return (dispatch, getState) => {\n//         dispatch(fetchRecipeInfoRequest());\n\n//         const {\n//             bluetooth: { server },\n//         } = getState();\n\n//         let service = null;\n//         console.log('RecipeInfo request', server);\n//         server\n//             .getPrimaryService(recipeInfoService.uuid)\n//             .then((ser) => {\n//                 service = ser;\n//                 console.log('RecipeInfo service');\n//                 return service.getCharacteristic(\n//                     recipeInfoService.characteristics.recipeListLowPart.uuid\n//                 );\n//             })\n//             .then((characteristic) => {\n//                 console.log('RecipeInfo read first value');\n//                 return characteristic.readValue();\n//             })\n//             .then((value) => {\n//                 console.log('recipeListLowPart', value.buffer);\n//                 return service.getCharacteristic(\n//                     recipeInfoService.characteristics.recipeListHighPart.uuid\n//                 );\n//             })\n//             .then((characteristic) => {\n//                 return characteristic.readValue();\n//             })\n//             .then((value) => {\n//                 console.log('recipeListHighPart', value.buffer);\n//                 dispatch(fetchRecipeInfoSuccess());\n//             })\n//             .catch((error) => {\n//                 dispatch(fetchRecipeInfoFailure());\n//                 console.log('error recipeInfo', error);\n//             });\n//     };\n// };\n\nexport const writeRecipeToDeviceRequest = createAction(\n    'WRITE_RECIPE_TO_DEVICE_REQUEST'\n);\nexport const writeRecipeToDeviceSuccess = createAction(\n    'WRITE_RECIPE_TO_DEVICE_SUCCESS'\n);\nexport const writeRecipeToDeviceFailure = createAction(\n    'WRITE_RECIPE_TO_DEVICE_FAILURE'\n);\n\nexport const startTransferOfRecipe = createAction('START_TRANSFER_OF_RECIPE');\nexport const endTransferOfRecipe = createAction('END_TRANSFER_OF_RECIPE');\nexport const startTransferOfImg = createAction('START_TRANSFER_OF_IMG');\nexport const endTransferOfImg = createAction('END_TRANSFER_OF_IMG');\n\nexport const recipeByteTransfered = createAction('RECIPE_BYTE_TRANSFERED');\nexport const imgByteTransfered = createAction('IMG_BYTE_TRANSFERED');\nexport const speedOfDataTransfer = createAction('SPEED_OF_DATA_TRANSFER');\n\nlet keyI = 0;\nlet characteristicWrite = null;\n\nexport const writeRecipeToDevice = (recipeID) => {\n    return (dispatch, getState) => {\n        const {\n            bluetooth: { server },\n            auth: {\n                cookie: { access_token },\n            },\n        } = getState();\n\n        dispatch(getBinaryRecipeRequest());\n        dispatch(showAppPreloader(true));\n\n        axios\n            .get('recipe_binary/' + recipeID + '/', {\n                headers: {\n                    Authorization: `Bearer ${access_token}`,\n                },\n            })\n            .then((response) => {\n                dispatch(getBinaryRecipeSuccess(response.data));\n                dispatch(showAppPreloader(false));\n\n                // Send control msg to device before transfer data\n                server\n                    .getPrimaryService(dataTransferService.uuid)\n                    .then((service) => {\n                        return service.getCharacteristic(\n                            dataTransferService.characteristics.controlReceive\n                                .uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        const {\n                            data: { recipeBinary },\n                        } = getState();\n\n                        let buffer = Utils.prepareControlReceiveBuffer(\n                            'writeRecipeRequest',\n                            {\n                                length: recipeBinary.buffer.byteLength,\n                            }\n                        );\n\n                        console.log(\n                            '%ccontrol receive:',\n                            'color:green; font-size:2em; border-top:10px solid red'\n                        );\n                        console.log(new Int8Array(buffer));\n                        setTimeout(() => {\n                            characteristic.writeValue(new Int8Array(buffer));\n                        }, 1000);\n                    })\n                    .catch((error) => {\n                        console.log(\n                            'Error writeValue to Control Receive: ',\n                            error\n                        );\n                    });\n            })\n            .catch((error) => {\n                console.log('ERROR - getBinaryRecipe', error);\n                dispatch(getBinaryRecipeFailure());\n                dispatch(showAppPreloader(false));\n            });\n    };\n};\n\n// export const recipeByteTransfered = createAction('RECIPE_BYTE_TRANSFERED');\n// export const imgByteTransfered = createAction('IMG_BYTE_TRANSFERED');\n// export const speedOfDataTransfer = createAction('SPEED_OF_DATA_TRANSFER');\n\n// let keyI2 = 0;\n// let characteristicWrite2 = null;\n\nexport const updateRecipeOnDevice = (recipeID) => {\n    return (dispatch, getState) => {\n        const {\n            bluetooth: { server },\n            // data: { recipeBinary },\n        } = getState();\n\n        // Send control msg to device before transfer data\n        server\n            .getPrimaryService(commandService.uuid)\n            .then((service) => {\n                return service.getCharacteristic(\n                    // commandService.characteristics.command.uuid\n                    'dad54501-2ee3-6213-624a-aeca328f132a'\n                );\n            })\n            .then((characteristic) => {\n                // let buffer = Utils.prepareCommandBuffer('removeRecipe', {\n                //     id: recipeID,\n                // });\n\n                let buffer = new ArrayBuffer(20);\n                let msgKeyWord8 = 0x12;\n\n                new DataView(buffer).setInt8(0, msgKeyWord8, true);\n                new DataView(buffer).setInt32(1, Number(recipeID), true);\n                // return buffer;\n\n                console.log(\n                    '%ccommand:',\n                    'color:green; font-size:2em; border-top:10px solid red'\n                );\n                console.log(new Int8Array(buffer));\n\n                setTimeout(() => {\n                    characteristic.writeValue(new Int8Array(buffer));\n                }, 1000);\n            })\n            .catch((error) => {\n                console.log('ERROR - WV command: ', error);\n            });\n    };\n};\n\n///////////////////////\n///// Handlers //////\n/////////////////////\n\nfunction handleControlTransmit(event, dispatch, getState) {\n    const {\n        bluetooth: { server },\n        data: { recipeBinary },\n    } = getState();\n\n    let status = event.target.value.getUint8(0),\n        operationCode = event.target.value.getUint8(1),\n        dataLength = event.target.value.getUint32(2, true),\n        dataType = event.target.value.getUint16(6, true);\n    console.log(\n        'handleControlTransmit',\n        status,\n        '----',\n        operationCode,\n        '----',\n        dataLength,\n        '----',\n        dataType,\n        '----',\n        event.target.value.buffer\n    );\n    if (0x0a === status && dataType === 0x6 && operationCode === 0xff) {\n        // Запись рецепта\n        console.log('prepare to sending recipe...');\n\n        server\n            .getPrimaryService(dataTransferService.uuid)\n            .then((service) => {\n                return service.getCharacteristic(\n                    dataTransferService.characteristics.dataReceive.uuid\n                );\n            })\n            .then((characteristic) => {\n                characteristicWrite = characteristic;\n\n                dispatch(\n                    startTransferOfRecipe({\n                        characteristicForWrite: characteristic,\n                    })\n                );\n\n                setTimeout(() => sendingData(recipeBinary, dispatch), 2000);\n            })\n            .catch((error) => {\n                console.log('ERROR - prepare to sending recipe: ' + error);\n            });\n    } else if (0x0a === status && dataType === 0x2 && operationCode === 0xff) {\n        // Запись изображения\n        console.log('prepare to sending img...');\n\n        setTimeout(\n            () =>\n                server\n                    .getPrimaryService(dataTransferService.uuid)\n                    .then((service) => {\n                        return service.getCharacteristic(\n                            dataTransferService.characteristics.dataReceive.uuid\n                        );\n                    })\n                    .then((characteristic) => {\n                        characteristicWrite = characteristic;\n\n                        dispatch(startTransferOfImg());\n\n                        sendingDataImg(recipeBinary, dispatch);\n                    })\n                    .catch((error) => {\n                        console.log('ERROR - prepare to sending img: ' + error);\n                    }),\n            2000\n        );\n    } else if (0x0f === status && dataType === 0x6) {\n        // Рецепт сохранен\n        console.log('Recipe did saved');\n\n        dispatch(endTransferOfRecipe());\n\n        setTimeout(() => {\n            server\n                .getPrimaryService(dataTransferService.uuid)\n                .then((service) => {\n                    return service.getCharacteristic(\n                        dataTransferService.characteristics.controlReceive.uuid\n                    );\n                })\n                .then((characteristic) => {\n                    let buffer = Utils.prepareControlReceiveBuffer(\n                        'writeImgRequest',\n                        {\n                            length: recipeBinary.bufferImg.byteLength,\n                        }\n                    );\n\n                    console.log(\n                        '%ccontrol receive:',\n                        'color:green; font-size:2em; border-top:10px solid red'\n                    );\n                    console.log(\n                        new Int8Array(buffer),\n                        recipeBinary.bufferImg.byteLength\n                    );\n                    characteristic.writeValue(new Int8Array(buffer));\n                })\n                .catch((error) => {\n                    alert(error);\n                });\n        }, 2000);\n    } else if (0x0f === status && dataType === 0x2) {\n        // Изображение сохранено\n        console.log('Img did saved');\n\n        dispatch(endTransferOfImg());\n\n        dispatch(showAppPreloader(false));\n    } else if (0x0d === status) {\n        // Недостаточно места\n        console.warn(\"Don't have space\");\n    } else if (0x0a === status && dataType === 0x7 && dataLength) {\n        // Сервер готов к получению логов\n        let logs = new ArrayBuffer(dataLength);\n\n        dispatch(startReceiveOfLogs({ logs }));\n\n        server\n            .getPrimaryService(dataTransferService.uuid)\n            .then((service) => {\n                return service.getCharacteristic(\n                    dataTransferService.characteristics.controlReceive.uuid\n                );\n            })\n            .then((characteristic) => {\n                let buffer = Utils.prepareControlReceiveBuffer(\n                    'fetchLogsReady'\n                );\n\n                console.log(\n                    '%ccontrol receive:',\n                    'color:green; font-size:2em; border-top:10px solid red'\n                );\n                console.log(new Int8Array(buffer));\n\n                characteristic.writeValue(new Int8Array(buffer));\n            })\n            .catch((error) => {\n                console.log(\n                    'ERROR - WV Control Receive I am ready to get logs: ' +\n                        error\n                );\n            });\n    }\n\n    console.log(\n        '%ccontrol transmit:',\n        'color:green; font-size:2em; border-top:10px solid red'\n    );\n\n    switch (status) {\n        case 0x0a:\n            console.log(\n                '%cI am ready',\n                'color:black; font-size:1em; border: 1px dashed gray;'\n            );\n            keyI = 0;\n            break;\n        case 0x0b:\n            console.log(\n                '%cPaused',\n                'color:black; font-size:1em; border: 1px dashed gray;'\n            );\n            break;\n        case 0x0c:\n            console.log(\n                '%cAborted',\n                'color:black; font-size:1em; border: 1px dashed gray;'\n            );\n            break;\n        case 0x0d:\n            console.log(\n                '%cDont`t have space',\n                'color:black; font-size:1em; border: 1px dashed gray;'\n            );\n            break;\n        case 0x0e:\n            console.log(\n                '%cBusy',\n                'color:black; font-size:1em; border: 1px dashed gray;'\n            );\n            break;\n        case 0x0f:\n            console.log(\n                '%cSuccess',\n                'color:black; font-size:1em; border: 1px dashed gray;'\n            );\n            break;\n        default:\n            console.log(\n                '%cUndefined status: ' + status,\n                'color:black; font-size:1em; border: 1px dashed gray;'\n            );\n            break;\n    }\n}\n\nfunction handleTransmitData(event, dispatch, getState) {\n    const {\n        data: {\n            logsTransfering: { logs, keyI },\n        },\n        bluetooth: { device },\n    } = getState();\n\n    let value = event.target.value;\n\n    console.log(\n        'handleTransmitData',\n        value.buffer,\n        value.getUint8(0),\n        'logs byteLength: ' + logs.byteLength,\n        'logs buffer: ' + logs\n    );\n\n    let i = 0;\n    while (i < 20) {\n        if (keyI >= logs.byteLength) {\n            break;\n        }\n        // console.log('Uint8', value.getUint8(i));\n        new DataView(logs).setInt8(keyI, value.getUint8(i));\n        keyI++;\n        i++;\n    }\n    // console.log(logs);\n\n    if (keyI === logs.byteLength) {\n        let base64String = btoa(String.fromCharCode(...new Uint8Array(logs)));\n        console.log('base64', base64String);\n        dispatch(fetchLogsSuccess(base64String));\n        dispatch(addHistory(base64String, device.name));\n    }\n}\n\nfunction handleStatusTransferData(event, dispatch, getState) {\n    const {\n        data: {\n            recipeBinary,\n            recipeAndImgAreTransfering: {\n                recipeIsTransfering,\n                imgIsTransfering,\n            },\n        },\n    } = getState();\n\n    // В зависимости от того что отправляется, вызываем нужную функцию\n    if (recipeIsTransfering) {\n        let value = event.target.value;\n        console.log(\n            'handleStatusTransferData',\n            value.buffer,\n            value.getUint32(0),\n            value.getUint8(4)\n        );\n        sendingData(recipeBinary, dispatch);\n    } else if (imgIsTransfering) {\n        let value = event.target.value;\n        console.log(\n            'handleStatusTransferDataImg',\n            value.buffer,\n            value.getUint32(0)\n        );\n        sendingDataImg(recipeBinary, dispatch);\n    } else {\n        let value = event.target.value;\n        console.log('handleStatusTransferData', value, value.getUint8(0));\n    }\n}\n\n// function handleStatusTransferDataImg(event, recipeBinary, dispatch) {\n//     let value = event.target.value;\n//     console.log('handleStatusTransferDataImg', value, value.getUint8(0));\n//     sendingDataImg(recipeBinary, dispatch);\n// }\n\nasync function sendingData(recipeBinary, dispatch) {\n    console.log('sendingData...');\n    let startTransfer = Date.now() / 1000;\n\n    for (\n        let sum = 0;\n        keyI < recipeBinary.buffer.byteLength && sum < 400;\n        keyI = keyI + 20, sum = sum + 20\n    ) {\n        try {\n            console.log(\n                'recipeBinary await',\n                recipeBinary.buffer.slice(keyI, keyI + 20)\n            );\n            await characteristicWrite.writeValue(\n                recipeBinary.buffer.slice(keyI, keyI + 20)\n            );\n        } catch (e) {\n            console.log('catch', e);\n        }\n        dispatch(\n            recipeByteTransfered(\n                recipeBinary.buffer.slice(keyI, keyI + 20).byteLength\n            )\n        );\n        console.log('DataBuffer', recipeBinary.buffer.slice(keyI, keyI + 20));\n    }\n\n    let endTransfer = Date.now() / 1000;\n\n    dispatch(speedOfDataTransfer(400 / (endTransfer - startTransfer)));\n}\n\nasync function sendingDataImg(recipeBinary, dispatch) {\n    console.log('sendingData...');\n    let startTransfer = Date.now() / 1000;\n\n    for (\n        let sum = 0;\n        keyI < recipeBinary.bufferImg.byteLength && sum < 400;\n        keyI = keyI + 20, sum = sum + 20\n    ) {\n        await characteristicWrite.writeValue(\n            recipeBinary.bufferImg.slice(keyI, keyI + 20)\n        );\n        dispatch(\n            imgByteTransfered(\n                recipeBinary.bufferImg.slice(keyI, keyI + 20).byteLength\n            )\n        );\n        console.log(\n            'DataBuffer',\n            recipeBinary.bufferImg.slice(keyI, keyI + 20)\n        );\n    }\n\n    let endTransfer = Date.now() / 1000;\n\n    dispatch(speedOfDataTransfer(400 / (endTransfer - startTransfer)));\n}\n\nfunction handleRecipeList(event, dispatch, getState) {\n    console.log('handleRecipeList', event.target.value.buffer);\n}\n\nfunction handleSizeOfRecipeList(event) {\n    console.log('handleSizeOfRecipeList', event.target.value.buffer);\n}\n\nfunction handleCommand(event, dispatch, getState) {\n    let status = event.target.value.getUint8(0),\n        recipeID = event.target.value.getUint32(1, true);\n    console.log('handleCommand', event.target.value.buffer);\n\n    if (status === 1) {\n        dispatch(writeRecipeToDevice(recipeID));\n    }\n}\n","import React, { Component } from 'react';\n// import { connectWB } from './service';\nimport { connect } from 'react-redux';\n// import * as actions from '../../actions';\nimport {\n    connectToDevice,\n    batteryService as batteryServiceAction,\n    deviceInfoService as deviceInfoServiceAction,\n    writeRecipeToDevice,\n} from '../../actions/bluetooth';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data: { recipeBinary },\n        data,\n        bluetooth,\n        bluetooth: { device, server },\n    } = state;\n    return {\n        token,\n        device,\n        bluetooth,\n        server,\n        recipeBinary,\n        data,\n    };\n};\n\nconst actionCreators = {\n    connectToDevice,\n    batteryServiceAction,\n    deviceInfoServiceAction,\n    writeRecipeToDevice,\n};\n\nclass WebBluetooth extends Component {\n    state = {\n        bluetoothDevice: null,\n        batteryLevelCharacteristic: null,\n        gattServer: null,\n        transferService: null,\n        characteristic: null,\n    };\n\n    connectToDevice = () => {\n        navigator.bluetooth\n            .requestDevice({\n                // acceptAllDevices: true,\n                filters: [\n                    { name: 'BlueNRG' },\n                    // { name: 'JUST-ASUS' },\n                    { services: ['5cf052d0-2403-4719-a558-b7e72c48112f'] },\n                    // { services: ['00001800-0000-1000-8000-00805f9b34fb'] },\n                ],\n                optionalServices: ['5cf052d0-2403-4719-a558-b7e72c48112f'],\n            })\n            .then((device) => {\n                console.log('device', device);\n                this.setState({ bluetoothDevice: device });\n                this.state.bluetoothDevice.addEventListener(\n                    'gattserverdisconnected',\n                    this.onDisconnected\n                );\n            })\n            .catch((error) => {\n                // alert(error);\n                console.log('error', error);\n            });\n    };\n\n    // onDisconnected() {\n    //     // console.log('> Bluetooth Device disconnected');\n    //     // connectDeviceAndCacheCharacteristics().catch((error) => {\n    //     //     console.log('Argh! ' + error);\n    //     // });\n    // }\n\n    // disconnect = () => {\n    //     bluetoothDevice.gatt.disconnect();\n    // };\n\n    connect() {\n        // console.log('Connecting to Bluetooth Device...');\n        return this.state.bluetoothDevice.gatt\n            .connect()\n            .then((server) => {\n                console.log('server', server);\n\n                this.setState({ gattServer: server });\n            })\n            .catch((error) => {\n                alert(error);\n                // console.log('error', error);\n            });\n    }\n\n    serviceConnect = (uuid) => {\n        const { server } = this.props;\n        console.log('serviceConnect', server);\n        server\n            .getPrimaryService(uuid)\n            .then((service) => {\n                console.log('service', service);\n                this.setState({ transferService: service });\n\n                // return service.getCharacteristic(StatusCharacteristicUuid);\n            })\n            .catch((error) => {\n                alert(error);\n                // console.log('error', error);\n            });\n    };\n\n    CtrlRxCharacteristicUuid = () => {\n        let buffer = new ArrayBuffer(20);\n        let msgKeyWord8 = 0x0a;\n        let operationCode = 0xff;\n        let dataSize32 = 800;\n        let dataType16 = 0x0006;\n\n        new DataView(buffer).setInt8(0, msgKeyWord8);\n        new DataView(buffer).setInt8(1, operationCode);\n        new DataView(buffer).setInt32(2, dataSize32);\n        new DataView(buffer).setInt16(6, dataType16);\n\n        console.log('BUFFER', buffer, new DataView(buffer));\n        this.state.transferService\n            .getCharacteristic('5cf052d3-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Control Receive');\n                return characteristic.writeValue(buffer);\n            })\n            .then((value) => {\n                console.log('Control Receive value: ', value);\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    sendDataToDevice = () => {\n        let buffer = new ArrayBuffer(20);\n        new DataView(buffer).setInt32(0, 6000);\n        this.state.transferService\n            .getCharacteristic('5cf052d1-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Data Receive', buffer);\n\n                let result = null;\n                async function sendingData() {\n                    for (let i = 0; i < 800; i = i + 20) {\n                        result = await characteristic.writeValue(buffer);\n                        console.log('sendingData', result);\n                    }\n                }\n                sendingData();\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    CtrlTxCharacteristicUuid = () => {\n        this.state.transferService\n            .getCharacteristic('5cf052d4-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                return characteristic.startNotifications();\n            })\n            .then((characteristic) => {\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleResponseControlMsg\n                );\n                console.log('Подписка на Control Transmit');\n            })\n            .catch((error) => {\n                alert(error);\n            });\n    };\n\n    StatusCharacteristicUuid = () => {\n        this.state.transferService\n            .getCharacteristic('5cf052d5-2403-4719-a558-b7e72c48112f')\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                characteristic.startNotifications();\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleLevelChanged\n                );\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('Статус value: ', value);\n            });\n    };\n\n    batteryLevel = () => {\n        this.state.transferService\n            .getCharacteristic('battery_level')\n            .then((characteristic) => {\n                console.log('characteristic Статус', characteristic);\n                characteristic.startNotifications();\n                characteristic.addEventListener(\n                    'characteristicvaluechanged',\n                    this.handleLevelChanged\n                );\n                return characteristic.readValue();\n            })\n            .then((value) => {\n                console.log('Заряд батареи', value.buffer);\n                // console.log('Battery percentage is ' + value.getUint8(0));\n            });\n    };\n\n    handleResponseControlMsg(event) {\n        let status = event.target.value.getUint8(0);\n        console.log('handleResponseControlMsg', 0x0a === status);\n        // console.log('Event - Battery percentage is ' + batteryLevel);\n    }\n\n    handleLevelChanged(event) {\n        let batteryLevel = event.target.value;\n        console.log('handleStatusChanged', batteryLevel, batteryLevel.buffer);\n        // console.log('Event - Battery percentage is ' + batteryLevel);\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            bluetooth: { device, server, batteryService },\n            // batteryServiceAction,\n        } = this.props;\n        if (device && server && !batteryService) {\n            // console.log(\n            //     '%cNeed request battery service...',\n            //     'border: 1px dashed gray; font-size: 1.5em; padding: 5px'\n            // );\n            // batteryServiceAction();\n        }\n        // if (device && server && !deviceInfoService) {\n        //     console.log('Need request device info service');\n        //     deviceInfoServiceAction();\n        // }\n\n        // const { recipeBinary, writeRecipeToDevice } = this.props;\n        // if (recipeBinary !== prevProps.recipeBinary) {\n        //     console.log('Recipe binary not same');\n        //     if (recipeBinary.binary_recipe) {\n        //         // writeToDevice\n        //         writeRecipeToDevice();\n        //     }\n        // }\n    }\n\n    render() {\n        // const { device, recipeBinary } = this.props;\n        // if (device) {\n        //     console.log('Added device: ', device);\n        // }\n        // console.log('webbluetooth render', recipeBinary);\n        // if (recipeBinary) {\n        //     console.log('recipeBinary', recipeBinary.buffer);\n        // }\n        return (\n            <div>\n                {/* <p>\n                    {this.state.bluetoothDevice &&\n                        'Подключено устройство: ' +\n                            this.state.bluetoothDevice.name}\n                </p>\n                <button\n                    onClick={() => connectToDevice()}\n                    // className={'bluetooth__connect-btn'}\n                >\n                    Add device\n                </button>\n                <br />\n                <br />\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.connect();\n                    }}\n                >\n                    Подключиться к серверу гатт\n                </button>\n                <br />\n                <br />\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.serviceConnect(\n                            '5cf052d0-2403-4719-a558-b7e72c48112f'\n                        );\n                    }}\n                >\n                    Подключиться к DataTransferService\n                </button>\n\n                <button\n                    onClick={() => {\n                        // connectWB(this.state.bluetoothDevice);\n                        this.serviceConnect('battery_service');\n                    }}\n                >\n                    Подключиться к Baterry service\n                </button>\n                <br />\n                <br />\n                <ul>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.CtrlRxCharacteristicUuid();\n                            }}\n                        >\n                            Отправить control message\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.CtrlTxCharacteristicUuid();\n                            }}\n                        >\n                            Подписаться на ответ control message\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.StatusCharacteristicUuid();\n                            }}\n                        >\n                            Посмотреть сколько принято байт во время передачи\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.batteryLevel();\n                            }}\n                        >\n                            Узнать уровень заряда батареи\n                        </button>\n                    </li>\n                    <li>\n                        <button\n                            onClick={() => {\n                                // connectWB(this.state.bluetoothDevice);\n                                this.sendDataToDevice();\n                            }}\n                        >\n                            Send data to device\n                        </button>\n                    </li>\n                </ul> */}\n                {/* <button onClick={this.disconnect}>Дисконект</button>\n                <button onClick={this.onReconnectButtonClick}>Reconect</button> */}\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(WebBluetooth);\n","import React, { Component } from 'react';\nimport { Card, Button, Divider, Progress, Col } from 'antd';\nimport {\n    // PlusCircleOutlined,\n    CloseCircleOutlined,\n    CheckCircleTwoTone,\n    LoadingOutlined,\n} from '@ant-design/icons';\n\nclass Device extends Component {\n    // componentDidUpdate = (prevProps) => {\n    //     const { connectedDevice } = this.props;\n    //     if (\n    //         connectedDevice &&\n    //         connectedDevice.GATTDisconnected &&\n    //         prevProps.connectedDevice &&\n    //         prevProps.connectedDevice.GATTDisconnected\n    //     ) {\n    //         console.log('componentDidUpdate');\n    //         Modal.error({\n    //             title: 'Failed to reconnect',\n    //             content: 'Please try again later',\n    //         });\n    //     }\n    // };\n\n    render() {\n        const {\n            device,\n            connected,\n            connectToDevice,\n            removeDevice,\n            batteryService,\n            showDrawer,\n            byteTransfered,\n            imgByteTransfered,\n            recipeBinary,\n            server,\n            GATTConnected,\n            // disconnectGattServer,\n            // connectedDevice,\n            connectionRequest,\n            speedOfDataTransfer,\n            logs,\n        } = this.props;\n\n        let deviceState = '';\n\n        if (GATTConnected) {\n            deviceState = 'online';\n        } else {\n            if (connectionRequest) {\n                deviceState = 'connecting...';\n            } else {\n                deviceState = 'offline';\n            }\n        }\n\n        let logsResult = null;\n        switch (logs.status) {\n            case 'success':\n                logsResult = <CheckCircleTwoTone twoToneColor=\"#52c41a\" />;\n                break;\n            case 'request':\n                logsResult = <LoadingOutlined twoToneColor=\"#52c41a\" />;\n                break;\n            case 'failure':\n                logsResult = <CloseCircleOutlined twoToneColor=\"#52c41a\" />;\n                break;\n            default:\n                break;\n        }\n\n        if (!connected) {\n            return (\n                <Col>\n                    <Card\n                        title={\n                            <>\n                                <Divider type=\"vertical\" />\n                                <span>{device.name}</span>\n                            </>\n                        }\n                        extra={\n                            <div>\n                                <Button\n                                    style={{ color: 'red' }}\n                                    shape=\"circle\"\n                                    icon={\n                                        <CloseCircleOutlined twoToneColor=\"#52c41a\" />\n                                    }\n                                    onClick={() => removeDevice(device.uid)}\n                                />\n                            </div>\n                        }\n                        style={{ width: 300 }}\n                    >\n                        <p>\n                            <strong>Device: </strong>\n                            {deviceState}\n                        </p>\n                        {/* <p>\n                            <strong>UID:</strong> {device.uid}\n                        </p> */}\n                        <br />\n                        <Button\n                            // shape=\"circle\"\n                            type=\"primary\"\n                            // icon={<PlusCircleOutlined />}\n                            onClick={() => {\n                                // alert('button connect');\n                                connectToDevice([{ name: device.name }]);\n                            }}\n                        >\n                            Connect\n                        </Button>\n                    </Card>\n                </Col>\n            );\n        }\n\n        return (\n            <Col>\n                <Card\n                    title={\n                        <>\n                            {GATTConnected && (\n                                <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                            )}\n                            {connectionRequest && (\n                                <LoadingOutlined twoToneColor=\"#52c41a\" />\n                            )}\n                            <Divider type=\"vertical\" />\n                            <span>{device.name}</span>\n                        </>\n                    }\n                    extra={\n                        <div>\n                            <Button\n                                // type=\"primary\"\n                                style={{ color: 'red' }}\n                                shape=\"circle\"\n                                icon={<CloseCircleOutlined />}\n                                onClick={() => removeDevice(device.uid)}\n                            />\n                        </div>\n                    }\n                    style={{ width: 300 }}\n                >\n                    <p>\n                        <strong>Device: </strong>\n                        {deviceState}\n                    </p>\n                    {/* <p>\n                    {GATTConnected && (\n                        <button\n                            onClick={() =>\n                                disconnectGattServer(connectedDevice)\n                            }\n                        >\n                            Отключиться\n                        </button>\n                    )}\n                </p> */}\n                    <p>\n                        <strong>UID:</strong> {device.uid}\n                    </p>\n                    <p>\n                        <strong>Logs:</strong> {logsResult}\n                    </p>\n                    {recipeBinary && (\n                        <p>\n                            <strong>Bytes transferred:</strong>{' '}\n                            {`${byteTransfered + imgByteTransfered}/${\n                                recipeBinary.buffer.byteLength +\n                                recipeBinary.bufferImg.byteLength\n                            }`}\n                        </p>\n                    )}\n\n                    {recipeBinary && (\n                        <p>\n                            <strong>Speed:</strong>{' '}\n                            {'kB/s: ' + (speedOfDataTransfer / 1024).toFixed(2)}\n                        </p>\n                    )}\n\n                    {batteryService &&\n                    Number.isInteger(batteryService.level) ? (\n                        <div>\n                            <strong>Battery level: </strong>\n                            <Progress\n                                percent={batteryService.level}\n                                // percent={45}\n                                size=\"small\"\n                                status=\"normal\"\n                            />\n                        </div>\n                    ) : null}\n\n                    <br />\n\n                    {server && (\n                        <Button onClick={showDrawer}>Recipe's list</Button>\n                    )}\n                    {/* {recipeBinary ? (\n                        <Progress\n                            type=\"circle\"\n                            percent={Math.floor(\n                                ((byteTransfered + imgByteTransfered) * 100) /\n                                    (recipeBinary.buffer.byteLength +\n                                        recipeBinary.bufferImg.byteLength)\n                            )}\n                            width={40}\n                        />\n                    ) : (\n                        ''\n                    )} */}\n                </Card>\n            </Col>\n        );\n    }\n}\n\nexport default Device;\n","import React, { Component } from 'react';\nimport { Row, Button, Tooltip, Divider } from 'antd';\nimport { PlusCircleOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\n\n// import { dataTransferService } from '../../../servicesAndCharacteristics';\n// import _ from 'lodash';\nimport * as actions from '../../../actions';\nimport {\n    connectToDevice,\n    disconnectGattServer,\n} from '../../../actions/bluetooth';\nimport WebBluetooth from '../../WebBluetooth';\nimport Device from './Device';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data,\n        data: {\n            byteTransfered,\n            imgByteTransfered,\n            recipeBinary,\n            speedOfDataTransfer,\n            logs,\n        },\n        bluetooth: {\n            device: connectedDevice,\n            server,\n            batteryService,\n            devices: connectedDevices,\n            connectionRequest,\n        },\n    } = state;\n    return {\n        token,\n        data,\n        connectedDevices,\n        connectedDevice,\n        connectionRequest,\n        server,\n        batteryService,\n        byteTransfered,\n        imgByteTransfered,\n        recipeBinary,\n        speedOfDataTransfer,\n        logs,\n    };\n};\n\nconst actionCreators = {\n    recipe: actions.recipe,\n    user: actions.user,\n    connectToDevice,\n    removeDevice: actions.removeDevice,\n    disconnectGattServer,\n};\n\nclass Devices extends Component {\n    render() {\n        const {\n            connectToDevice,\n            removeDevice,\n            // connectedDevices,\n            connectedDevice,\n            showDrawer,\n            server,\n            batteryService,\n            byteTransfered,\n            imgByteTransfered,\n            recipeBinary,\n            disconnectGattServer,\n            speedOfDataTransfer,\n            logs,\n            connectionRequest,\n        } = this.props;\n        let devices =\n            this.props.devices &&\n            this.props.devices.map((device) => {\n                return (\n                    <Device\n                        key={device.name}\n                        // connected={\n                        //     !!connectedDevices.find(\n                        //         (connectedDevice) =>\n                        //             connectedDevice.name === device.name\n                        //     )\n                        // }\n                        connected={device.name === connectedDevice.name}\n                        // GATTConnected={\n                        //     !!connectedDevices.find(\n                        //         (connectedDevice) =>\n                        //             connectedDevice.name === device.name &&\n                        //             connectedDevice.server &&\n                        //             connectedDevice.server.connected\n                        //     )\n                        // }\n                        GATTConnected={\n                            device.name === connectedDevice.name &&\n                            server &&\n                            server.connected\n                        }\n                        device={device}\n                        // connectedDevice={connectedDevices.find(\n                        //     (connectedDevice) =>\n                        //         connectedDevice.name === device.name\n                        // )}\n                        connectToDevice={connectToDevice}\n                        removeDevice={removeDevice}\n                        batteryService={batteryService}\n                        showDrawer={showDrawer}\n                        byteTransfered={byteTransfered}\n                        imgByteTransfered={imgByteTransfered}\n                        recipeBinary={recipeBinary}\n                        server={server}\n                        disconnectGattServer={disconnectGattServer}\n                        // connectionRequest={\n                        //     !!connectedDevices.find(\n                        //         (connectedDevice) =>\n                        //             connectedDevice.name === device.name &&\n                        //             connectedDevice.connectionRequest\n                        //     )\n                        // }\n                        connectionRequest={\n                            device.name === connectedDevice.name &&\n                            connectionRequest\n                        }\n                        speedOfDataTransfer={speedOfDataTransfer}\n                        logs={logs}\n                    />\n                );\n            });\n        return (\n            <>\n                <Row gutter={16}>{devices || ''}</Row>\n                <Divider />\n                <Tooltip title=\"Add device\">\n                    <Button\n                        // shape=\"circle\"\n                        type=\"primary\"\n                        icon={<PlusCircleOutlined />}\n                        onClick={() => {\n                            // alert('click on button');\n                            connectToDevice();\n                        }}\n                    >\n                        Add new device\n                    </Button>\n                    {/* <button\n                        onClick={() => {\n                            // alert('click on button');\n                            connectToDevice();\n                        }}\n                    >\n                        click me\n                    </button> */}\n                    {/* <button\n                        onClick={() => {\n                            navigator.bluetooth\n                                .requestDevice({\n                                    acceptAllDevices: true,\n                                    optionalServices: [\n                                        dataTransferService.uuid,\n                                        'battery_service',\n                                        0x2a29,\n                                        0x180a,\n                                    ],\n                                })\n                                .then((device) => {\n                                    alert('first then action connectToDevice');\n                                    // if (\n                                    //     _.find(\n                                    //         devicesFromStore,\n                                    //         (deviceFromStore) =>\n                                    //             deviceFromStore.name ===\n                                    //             device.name\n                                    //     )\n                                    // ) {\n                                    //     alert(\n                                    //         'first then error action connectToDevice'\n                                    //     );\n                                    //     throw new Error(\n                                    //         'device has already been added'\n                                    //     );\n                                    // } else {\n                                    console.log(\n                                        '%cconnected device:',\n                                        'color:green; font-size:2em; border-top:10px solid red'\n                                    );\n                                    console.log(device);\n\n                                    device.addEventListener(\n                                        'gattserverdisconnected',\n                                        () => false\n                                        // dispatch(onDisconnected(event))\n                                    );\n\n                                    // dispatch(connectToDeviceSuccess(device));\n                                    // dispatch(saveDevice(device));\n                                    // dispatch(connectToGATTServer(device));\n                                    // }\n                                })\n                                .catch(\n                                    (\n                                        error = {\n                                            message: 'connectToDeviceFailure',\n                                        }\n                                    ) => {\n                                        console.log(error.message);\n                                        // dispatch(connectToDeviceFailure());\n                                    }\n                                );\n                        }}\n                    >\n                        click me 2\n                    </button> */}\n                </Tooltip>\n                <WebBluetooth />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Devices);\n","import React, { Component } from 'react';\nimport { Card, Row, Button, Divider } from 'antd';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../actions';\nimport * as bluetoothActions from '../../../actions/bluetooth';\n\nimport { CheckCircleTwoTone } from '@ant-design/icons';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data: { recipesOnDevice },\n    } = state;\n    return {\n        token,\n        recipesOnDevice,\n    };\n};\n\nconst actionCreators = {\n    writeRecipeToDevice: bluetoothActions.writeRecipeToDevice,\n    getBinaryRecipe: actions.getBinaryRecipe,\n    updateRecipeOnDevice: bluetoothActions.updateRecipeOnDevice,\n};\n\nclass Recipes extends Component {\n    render() {\n        const {\n            onClose,\n            // getBinaryRecipe,\n            writeRecipeToDevice,\n            recipesOnDevice,\n            updateRecipeOnDevice,\n        } = this.props;\n        let recipes = this.props.recipes.map((recipe) => {\n            return (\n                // <Col span={6} key={recipe.id}>\n                <Card\n                    key={recipe.id}\n                    // title={recipe.name + ' - id' + recipe.id + ''}\n                    title={\n                        <div>\n                            {/* <p> */}\n                            {recipesOnDevice[recipe.id] ? (\n                                <h3>\n                                    <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                                    <Divider type=\"vertical\" />\n                                    {recipe.name + ' №' + recipe.id}\n                                </h3>\n                            ) : (\n                                <h3>{recipe.name + ' №' + recipe.id}</h3>\n                            )}\n                            {/* </p> */}\n                            {/* <h3>{recipe.name + ' №' + recipe.id}</h3> */}\n                            <p>{'Version ' + recipe.version}</p>\n                        </div>\n                    }\n                    // extra={<a href=\"#\">More</a>}\n                    style={{ width: 250 }}\n                    cover={\n                        <img\n                            alt=\"example\"\n                            src={recipe.image.replace('http://', 'https://')}\n                        />\n                    }\n                    className=\"recipe__card\"\n                >\n                    <p>{recipe.description}</p>\n                    {this.props.buttonVisible && (\n                        <Button\n                            onClick={() => {\n                                onClose();\n                                writeRecipeToDevice(recipe.id);\n                            }}\n                        >\n                            Add\n                        </Button>\n                    )}\n\n                    <Button\n                        onClick={() => {\n                            updateRecipeOnDevice(recipe.id);\n                        }}\n                    >\n                        Update\n                    </Button>\n                </Card>\n                // </Col>\n            );\n        });\n        // console.log('fsadasd', recipes);\n        return <Row gutter={16}>{recipes}</Row>;\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Recipes);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Menu, PageHeader, Drawer } from 'antd';\nimport { AntDesignOutlined, ReadOutlined } from '@ant-design/icons';\n\nimport './account.scss';\n\nimport * as actions from '../../../actions';\nimport Devices from './Devices';\nimport Recipes from './Recipes';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { token },\n        data,\n    } = state;\n    return {\n        token,\n        data,\n    };\n};\n\nconst actionCreators = {\n    // convertToken: actions.convertToken,\n    recipe: actions.recipe,\n    user: actions.user,\n    userDevices: actions.userDevices,\n    logout: actions.logout,\n};\n\nclass Account extends Component {\n    state = {\n        current: 'devices',\n        showDrawer: false,\n    };\n\n    showDrawer = () => {\n        this.setState({ showDrawer: true });\n    };\n\n    onClose = () => {\n        this.setState({ showDrawer: false });\n    };\n\n    handleClick = (e) => {\n        // console.log('click ', e);\n        this.setState({ current: e.key });\n    };\n\n    componentDidMount() {\n        const { recipe, user, userDevices } = this.props;\n        // console.log('didMount');\n        recipe();\n        user();\n        userDevices();\n    }\n\n    render() {\n        const { current } = this.state;\n        const {\n            data: { user, recipe, userDevices },\n            logout,\n        } = this.props;\n        // console.log('account', user);\n        return (\n            <>\n                <div className=\"elements__account\">\n                    <PageHeader\n                        title={\n                            <div className=\"account-header\">\n                                {user && user.first_name + ' ' + user.last_name}\n                                <button onClick={logout}>Logout</button>\n                            </div>\n                        }\n                    >\n                        <Menu\n                            onClick={this.handleClick}\n                            selectedKeys={[current]}\n                            mode=\"horizontal\"\n                        >\n                            <Menu.Item\n                                key=\"devices\"\n                                icon={<AntDesignOutlined />}\n                            >\n                                My devices\n                            </Menu.Item>\n                            <Menu.Item key=\"recipes\" icon={<ReadOutlined />}>\n                                Recipes\n                            </Menu.Item>\n                        </Menu>\n                        {/* <WebBluetooth /> */}\n                    </PageHeader>\n                    {this.state.current === 'devices' ? (\n                        <Devices\n                            devices={userDevices && userDevices.devices}\n                            showDrawer={this.showDrawer}\n                        />\n                    ) : (\n                        <Recipes\n                            recipes={recipe}\n                            buttonVisible={false}\n                            onClose={this.onClose}\n                        />\n                    )}\n                    <Drawer\n                        title=\"Recipes\"\n                        width={320}\n                        placement=\"right\"\n                        closable={false}\n                        onClose={this.onClose}\n                        visible={this.state.showDrawer}\n                    >\n                        <Recipes\n                            recipes={recipe}\n                            buttonVisible={true}\n                            onClose={this.onClose}\n                        />\n                    </Drawer>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(Account);\n","import React, { Component } from 'react';\nimport { Result, Button } from 'antd';\n\nclass BluetoothNotAvailable extends Component {\n    render() {\n        return (\n            <Result\n                title={<h1>Your browser is not supported Web Bluetooth</h1>}\n                extra={\n                    <Button\n                        type=\"primary\"\n                        key=\"console\"\n                        href=\"https://www.google.com/chrome/\"\n                    >\n                        Download Google Chrome\n                    </Button>\n                }\n            />\n        );\n    }\n}\n\nexport default BluetoothNotAvailable;\n","import React, { Component } from 'react';\nimport { Router, Link, Redirect, navigate } from '@reach/router';\nimport { connect } from 'react-redux';\nimport { Result, Button } from 'antd';\n\nimport * as actions from './actions';\nimport { readStateFromCookie } from './utils';\nimport 'antd/dist/antd.css';\nimport './App.scss';\nimport Loader from './components/Loader';\n// import WebBluetooth from './WebBluetooth';\n// import GoogleOauth from './components/GoogleOauth';\nimport Login from './components/routes/Login';\nimport Account from './components/routes/Account';\nimport BluetoothNotAvailable from './components/routes/BluetoothNotAvailable';\n\nconst mapStateToProps = (state) => {\n    const {\n        auth: { cookie },\n        settings: { showPreloader },\n    } = state;\n    return {\n        cookie,\n        showPreloader,\n    };\n};\n\nconst actionCreators = {\n    fetchTokenSuccess: actions.fetchTokenSuccess,\n};\n\nclass App extends Component {\n    componentWillMount() {\n        const { fetchTokenSuccess } = this.props;\n        const authCookie = readStateFromCookie('auth_cookie');\n        // Проверяем наличии куки авторизации\n        if (authCookie) {\n            console.log(\n                '%ccookie:',\n                'color:green; font-size:2em; border-top:10px solid red'\n            );\n            console.log(authCookie);\n            fetchTokenSuccess(authCookie);\n        }\n    }\n\n    render() {\n        const { cookie, showPreloader } = this.props;\n        // navigator.bluetooth.getAvailability().then((available) => {\n        //     if (available) console.log('This device supports Bluetooth!');\n        //     else console.log('Doh! Bluetooth is not supported');\n        // });\n        // navigator.bluetooth.onavailabilitychanged = function (event) {\n        //     console.log('availabilitychanged', event);\n        // };\n        // const bluetoothIsAvailable = !!navigator.bluetooth;\n\n        if (!navigator.bluetooth) {\n            navigate('/bluetooth-not-available');\n        }\n\n        if (!cookie.access_token) {\n            navigate('/');\n        }\n\n        return (\n            <>\n                {showPreloader && <Loader />}\n                {/* <Router basepath=\"elements\"> */}\n                <Router>\n                    {/* {!bluetoothIsAvailable ? (\n                        <Redirect\n                            // from=\"*\"\n                            to=\"bluetooth-not-available\"\n                            noThrow\n                        />\n                    ) : null} */}\n\n                    {cookie.access_token && (\n                        <Redirect from=\"/\" to=\"account\" noThrow />\n                    )}\n\n                    <Login path=\"/\" />\n                    <Account path=\"account\" />\n                    <BluetoothNotAvailable path=\"bluetooth-not-available\" />\n\n                    <Result\n                        default\n                        status=\"404\"\n                        title=\"404\"\n                        subTitle=\"Sorry, the page you visited does not exist.\"\n                        extra={\n                            <Button type=\"primary\">\n                                <Link to=\"/\">Back Home</Link>\n                            </Button>\n                        }\n                    />\n                </Router>\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, actionCreators)(App);\n","import auth from './auth';\nimport data from './data';\nimport bluetooth from './bluetooth';\nimport settings from './settings';\n\nexport default {\n    auth,\n    data,\n    bluetooth,\n    settings,\n};\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.fetchTokenSuccess](state, { payload }) {\n            return {\n                ...state,\n                cookie: payload,\n            };\n        },\n        [actions.logoutSuccess](state) {\n            return {\n                ...state,\n                cookie: {},\n            };\n        },\n    },\n    {\n        cookie: {},\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\nimport * as bluetoothActions from '../actions/bluetooth';\nimport { base64ToArrayBuffer } from '../utils';\n\nexport default handleActions(\n    {\n        [actions.fetchRecipesSuccess](state, { payload }) {\n            return {\n                ...state,\n                recipe: payload,\n            };\n        },\n        [actions.fetchUserSuccess](state, { payload }) {\n            return {\n                ...state,\n                user: payload,\n            };\n        },\n        [actions.fetchUserDevicesSuccess](state, { payload }) {\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [actions.getBinaryRecipeSuccess](state, { payload }) {\n            let buffer = base64ToArrayBuffer(payload.binary_recipe);\n            let bufferImg = base64ToArrayBuffer(payload.binary_image_r400x400);\n            return {\n                ...state,\n                recipeBinary: { ...payload, buffer, bufferImg },\n            };\n        },\n        [bluetoothActions.recipeByteTransfered](state, { payload }) {\n            return {\n                ...state,\n                byteTransfered: state.byteTransfered + payload,\n            };\n        },\n        [bluetoothActions.imgByteTransfered](state, { payload }) {\n            return {\n                ...state,\n                imgByteTransfered: state.imgByteTransfered + payload,\n            };\n        },\n        [bluetoothActions.speedOfDataTransfer](state, { payload }) {\n            console.log('Speed', payload);\n            return {\n                ...state,\n                speedOfDataTransfer: isFinite(payload) ? payload : 0,\n            };\n        },\n        [actions.saveDeviceSuccess](state, { payload }) {\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [actions.removeDeviceSuccess](state, { payload }) {\n            return {\n                ...state,\n                userDevices: payload,\n            };\n        },\n        [bluetoothActions.fetchLogsSuccess](state, { payload }) {\n            return {\n                ...state,\n                logs: Object.assign(\n                    {},\n                    { ...state.logs },\n                    { status: 'success', data: payload }\n                ),\n            };\n        },\n        [bluetoothActions.fetchLogsFailure](state) {\n            return {\n                ...state,\n                logs: Object.assign(\n                    {},\n                    { ...state.logs },\n                    { status: 'failure' }\n                ),\n            };\n        },\n        [bluetoothActions.fetchLogsRequest](state) {\n            return {\n                ...state,\n                logs: Object.assign(\n                    {},\n                    { ...state.logs },\n                    { status: 'request' }\n                ),\n            };\n        },\n        [bluetoothActions.startTransferOfRecipe](\n            state,\n            { payload: { characteristicForWrite } }\n        ) {\n            return {\n                ...state,\n                recipeAndImgAreTransfering: {\n                    recipeIsTransfering: true,\n                    imgIsTransfering: false,\n                    characteristicForWrite,\n                    keyI: 0,\n                },\n            };\n        },\n        [bluetoothActions.endTransferOfRecipe](state) {\n            return {\n                ...state,\n                recipeAndImgAreTransfering: {\n                    ...state.recipeAndImgAreTransfering,\n                    recipeIsTransfering: false,\n                    imgIsTransfering: false,\n                    keyI: 0,\n                },\n            };\n        },\n        [bluetoothActions.startTransferOfImg](state) {\n            return {\n                ...state,\n                recipeAndImgAreTransfering: {\n                    ...state.recipeAndImgAreTransfering,\n                    recipeIsTransfering: false,\n                    imgIsTransfering: true,\n                    keyI: 0,\n                },\n            };\n        },\n        [bluetoothActions.endTransferOfImg](state) {\n            return {\n                ...state,\n                recipeAndImgAreTransfering: {\n                    recipeIsTransfering: false,\n                    imgIsTransfering: false,\n                    keyI: 0,\n                    characteristicForWrite: null,\n                },\n            };\n        },\n        [bluetoothActions.fetchRecipesIDOnDevice](\n            state,\n            { payload: { recipesIDList, from } }\n        ) {\n            let copyObjFromStore = Object.assign({}, state.recipesOnDevice);\n\n            switch (from) {\n                case 'lowPart':\n                    return {\n                        ...state,\n                        recipesOnDevice: recipesIDList,\n                    };\n                case 'midPart':\n                    Object.keys(recipesIDList).forEach((key) => {\n                        copyObjFromStore[key] = recipesIDList[key];\n                    });\n                    return {\n                        ...state,\n                        recipesOnDevice: copyObjFromStore,\n                    };\n                case 'highPart':\n                    Object.keys(recipesIDList).forEach((key) => {\n                        copyObjFromStore[key] = recipesIDList[key];\n                    });\n                    return {\n                        ...state,\n                        recipesOnDevice: copyObjFromStore,\n                    };\n                default:\n                    break;\n            }\n            return {\n                ...state,\n            };\n        },\n        [bluetoothActions.startReceiveOfLogs](state, { payload }) {\n            return {\n                ...state,\n                logsTransfering: {\n                    ...state.logsTransfering,\n                    logs: payload.logs,\n                },\n            };\n        },\n        [bluetoothActions.receivedLogs](state, { payload }) {\n            return {\n                ...state,\n                logsTransfering: {\n                    ...state.logsTransfering,\n                    logs: payload.logs,\n                },\n            };\n        },\n        [bluetoothActions.endReceiveOfLogs](state, { payload }) {\n            return {\n                ...state,\n                logsTransfering: {\n                    ...state.logsTransfering,\n                    logs: payload.logs,\n                },\n            };\n        },\n    },\n    {\n        recipe: [],\n        user: null,\n        userDevices: null,\n        recipeBinary: null,\n        byteTransfered: 0,\n        imgByteTransfered: 0,\n        speedOfDataTransfer: 0,\n        logs: { status: 'success', data: null },\n        recipeAndImgAreTransfering: {\n            recipeIsTransfering: false,\n            imgIsTransfering: false,\n            keyI: 0,\n            characteristicForWrite: null,\n        },\n        logsTransfering: {\n            logs: null,\n            keyI: 0,\n        },\n        recipesOnDevice: {},\n    }\n);\n","import { handleActions } from 'redux-actions';\n// import * as actions from '../actions';\nimport * as bluetoothActions from '../actions/bluetooth';\n// import _ from 'lodash';\n\nexport default handleActions(\n    {\n        // [bluetoothActions.connectToDeviceRequest](state) {\n        //     return {\n        //         ...state,\n        //         device: {},\n        //         devices: [],\n        //         server: {},\n        //         batteryService: null,\n        //         deviceInfoService: null,\n        //         connectionRequest: false,\n        //     };\n        // },\n        [bluetoothActions.connectToDeviceSuccess](state, { payload }) {\n            let newDevices = state.devices.slice();\n            newDevices.push({\n                id: payload.id,\n                name: payload.name,\n                device: payload,\n            });\n            return {\n                ...state,\n                device: payload,\n                devices: newDevices,\n            };\n        },\n        [bluetoothActions.connectGattRequest](state, { payload }) {\n            // console.log('connectGattRequest', payload);\n            let devices = state.devices.map((device) => {\n                if (device.name === payload.device.name) {\n                    device.connectionRequest = true;\n                }\n                return device;\n            });\n            return {\n                ...state,\n                devices,\n                connectionRequest: true,\n\n                device: {},\n                server: {},\n                batteryService: null,\n                deviceInfoService: null,\n            };\n        },\n        [bluetoothActions.connectGattSuccess](state, { payload }) {\n            let devices = state.devices.map((device) => {\n                if (device.name === payload.device.name) {\n                    device.connectionRequest = false;\n                    device.server = payload.server;\n                    device.GATTDisconnected = false;\n                }\n                return device;\n            });\n            return {\n                ...state,\n                server: payload.server,\n                device: payload.device,\n                devices,\n                connectionRequest: false,\n            };\n        },\n        [bluetoothActions.connectGattFailure](state, { payload }) {\n            let devices = state.devices.map((device) => {\n                if (device.name === payload.device.name) {\n                    device.GATTDisconnected = true;\n                    device.connectionRequest = false;\n                }\n                return device;\n            });\n            return {\n                ...state,\n                devices,\n                connectionRequest: false,\n            };\n        },\n        [bluetoothActions.fetchBatteryServiceSuccess](state, { payload }) {\n            const { batteryService } = state;\n            return {\n                ...state,\n                batteryService: { ...batteryService, ...payload },\n            };\n        },\n        [bluetoothActions.fetchDeviceInfoCharacteristicSuccess](\n            state,\n            { payload }\n        ) {\n            const { deviceInfoService } = state;\n            return {\n                ...state,\n                deviceInfoService: { ...deviceInfoService, ...payload },\n            };\n        },\n        [bluetoothActions.connectDataTransferServiceSuccess](\n            state,\n            { payload }\n        ) {\n            return {\n                ...state,\n                dataTransferService: payload,\n            };\n        },\n        [bluetoothActions.connectRecipeInfoServiceSuccess](state, { payload }) {\n            return {\n                ...state,\n                recipeInfoService: payload,\n            };\n        },\n        [bluetoothActions.connectCommandServiceSuccess](state, { payload }) {\n            return {\n                ...state,\n                commandService: payload,\n            };\n        },\n    },\n    {\n        device: {},\n        devices: [],\n        server: {},\n        batteryService: null,\n        deviceInfoService: null,\n        dataTransferService: null,\n        recipeInfoService: null,\n        commandService: null,\n        connectionRequest: false,\n    }\n);\n","import { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nexport default handleActions(\n    {\n        [actions.showAppPreloader](state, { payload }) {\n            // Stack for handle several requests\n            let stack = state.preloaderStack.slice();\n            if (payload) {\n                stack.push(0);\n            } else {\n                stack.shift();\n            }\n            return {\n                ...state,\n                showPreloader: !!stack.length,\n                preloaderStack: stack,\n            };\n        },\n    },\n    {\n        showPreloader: false,\n        preloaderStack: [],\n    }\n);\n","import reducers from './reducers';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nconst middleware = getDefaultMiddleware({\n    immutableCheck: false,\n    serializableCheck: false,\n    thunk: true,\n});\n\nexport default configureStore({\n    reducer: { ...reducers },\n    middleware,\n    devTools: process.env.NODE_ENV !== 'production',\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\n\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}